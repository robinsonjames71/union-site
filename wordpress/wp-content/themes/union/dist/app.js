/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(1);
__webpack_require__(9);
module.exports = __webpack_require__(10);


/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_stickybits__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rellax__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_rellax___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_rellax__);
// import Blazy from 'blazy'


window.$ = window.jQuery = __webpack_require__(4);

__webpack_require__(6);
__webpack_require__(7);
__webpack_require__(8);

/*
*  new_map
*
*  This function will render a Google Map onto the selected jQuery element
*
*  @type  function
*  @date  8/11/2013
*  @since 4.3.0
*
*  @param $el (jQuery element)
*  @return  n/a
*/

function new_map($el) {

  // var
  var $markers = $el.find('.marker');

  // vars
  var args = {
    zoom: 15,
    center: new google.maps.LatLng(0, 0),
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    disableDefaultUI: true,
    styles: [{
      elementType: 'geometry',
      stylers: [{
        color: '#f5f5f5'
      }]
    }, {
      elementType: 'labels.icon',
      stylers: [{
        visibility: 'off'
      }]
    }, {
      elementType: 'labels.text.fill',
      stylers: [{
        color: '#616161'
      }]
    }, {
      elementType: 'labels.text.stroke',
      stylers: [{
        color: '#f5f5f5'
      }]
    }, {
      featureType: 'administrative.land_parcel',
      elementType: 'labels.text.fill',
      stylers: [{
        color: '#bdbdbd'
      }]
    }, {
      featureType: 'poi',
      elementType: 'geometry',
      stylers: [{
        color: '#eeeeee'
      }]
    }, {
      featureType: 'poi',
      elementType: 'labels.text.fill',
      stylers: [{
        color: '#757575'
      }]
    }, {
      featureType: 'poi.park',
      elementType: 'geometry',
      stylers: [{
        color: '#e5e5e5'
      }]
    }, {
      featureType: 'poi.park',
      elementType: 'labels.text.fill',
      stylers: [{
        color: '#9e9e9e'
      }]
    }, {
      featureType: 'road',
      elementType: 'geometry',
      stylers: [{
        color: '#ffffff'
      }]
    }, {
      featureType: 'road.arterial',
      elementType: 'labels.text.fill',
      stylers: [{
        color: '#757575'
      }]
    }, {
      featureType: 'road.highway',
      elementType: 'geometry',
      stylers: [{
        color: '#dadada'
      }]
    }, {
      featureType: 'road.highway',
      elementType: 'labels.text.fill',
      stylers: [{
        color: '#616161'
      }]
    }, {
      featureType: 'road.local',
      elementType: 'labels.text.fill',
      stylers: [{
        color: '#9e9e9e'
      }]
    }, {
      featureType: 'transit.line',
      elementType: 'geometry',
      stylers: [{
        color: '#e5e5e5'
      }]
    }, {
      featureType: 'transit.station',
      elementType: 'geometry',
      stylers: [{
        color: '#eeeeee'
      }]
    }, {
      featureType: 'water',
      elementType: 'geometry',
      stylers: [{
        color: '#c9c9c9'
      }]
    }, {
      featureType: 'water',
      elementType: 'labels.text.fill',
      stylers: [{
        color: '#9e9e9e'
      }]
    }]
  };

  // create map
  var map = new google.maps.Map($el[0], args);

  // add a markers reference
  map.markers = [];

  // add markers
  $markers.each(function () {

    add_marker($(this), map);
  });

  // center map
  center_map(map);

  // return
  return map;
}

/*
*  add_marker
*
*  This function will add a marker to the selected Google Map
*
*  @type  function
*  @date  8/11/2013
*  @since 4.3.0
*
*  @param $marker (jQuery element)
*  @param map (Google Map object)
*  @return  n/a
*/

function add_marker($marker, map) {

  // var
  var latlng = new google.maps.LatLng($marker.attr('data-lat'), $marker.attr('data-lng'));

  // create marker
  var marker = new google.maps.Marker({
    position: latlng,
    map: map
  });

  // add to array
  map.markers.push(marker);

  // if marker contains HTML, add it to an infoWindow
  if ($marker.html()) {
    // create info window
    var infowindow = new google.maps.InfoWindow({
      content: $marker.html()
    });

    // show info window when marker is clicked
    google.maps.event.addListener(marker, 'click', function () {

      infowindow.open(map, marker);
    });
  }
}

/*
*  center_map
*
*  This function will center the map, showing all markers attached to this map
*
*  @type  function
*  @date  8/11/2013
*  @since 4.3.0
*
*  @param map (Google Map object)
*  @return  n/a
*/

function center_map(map) {

  // vars
  var bounds = new google.maps.LatLngBounds();

  // loop through all markers and create bounds
  $.each(map.markers, function (i, marker) {

    var latlng = new google.maps.LatLng(marker.position.lat(), marker.position.lng());

    bounds.extend(latlng);
  });

  // only 1 marker?
  if (map.markers.length == 1) {
    // set center of map
    map.setCenter(bounds.getCenter());
    map.setZoom(15);
  } else {
    // fit to bounds
    map.fitBounds(bounds);
  }
}

// global var
var map = null;
$(document).ready(function () {
  if ($('body').hasClass('home')) {
    window.scrollTo(0, 0);
    $('body').css({ 'height': '100vh', 'overflow': 'hidden' });
    setTimeout(function () {
      $('body').css({ 'height': 'auto', 'overflow': 'auto' });
      var scrollToPosition = $('.hero1').next().offset().top;
      $('html, body').animate({ scrollTop: scrollToPosition }, 1000, 'swing');
    }, 4000);
  }

  if ($('.rellax').length) {
    var rellax = new __WEBPACK_IMPORTED_MODULE_1_rellax___default.a('.rellax');
  }

  // Quotes page
  $('.quotes a').on('click', function (e) {
    e.preventDefault();
    console.log($(this).text());
    if ($(this).find('span').text() === 'Read More') {
      $(this).closest('.quote').find('.readmore-text').css({ 'max-height': '600px' });
      $(this).find('span').text('Close');
    } else {
      $(this).closest('.quote').find('.readmore-text').css({ 'max-height': '0' });
      $(this).find('span').text('Read More');
    }
  });

  $('.acf-map').each(function () {

    // create map
    map = new_map($(this));
  });

  var firstContentSection = $('.body-content > div:first-child');
  var mainNav = $('.nav-main');
  if (firstContentSection.hasClass('dark-left-menu')) {
    mainNavClasses('dark-left-menu');
  } else if (firstContentSection.hasClass('dark-right-menu')) {
    mainNavClasses('dark-right-menu');
  } else if (firstContentSection.hasClass('dark-menu')) {
    mainNavClasses('dark-menu');
  }

  // Menu treatment
  function mainNavClasses(addClass) {
    var newClass = addClass || '';
    mainNav.removeClass('dark-left-menu').removeClass('dark-right-menu').removeClass('dark-menu').addClass(newClass);
  }

  // Waypoints
  $('.dark-menu').each(function () {
    var darkwaypointsTop = $(this).waypoint({
      handler: function handler(direction) {
        if (direction === 'down') {
          mainNavClasses('dark-menu');
        }
      },
      offset: 20
    });
  });

  $('.dark-menu').each(function () {
    var darkwaypointsBot = $(this).waypoint({
      handler: function handler(direction) {
        if (direction === 'up') {
          mainNavClasses('dark-menu');
        }
      },
      offset: function offset() {
        return -this.element.clientHeight;
      }
    });
  });

  $('.dark-left-menu').each(function () {
    var darkwaypointsTop = $(this).waypoint({
      handler: function handler(direction) {
        if (direction === 'down') {
          mainNavClasses('dark-left-menu');
        }
      },
      offset: 20
    });
  });

  $('.dark-left-menu').each(function () {
    var darkwaypointsBot = $(this).waypoint({
      handler: function handler(direction) {
        if (direction === 'up') {
          mainNavClasses('dark-left-menu');
        }
      },
      offset: function offset() {
        return -this.element.clientHeight;
      }
    });
  });

  $('.dark-right-menu').each(function () {
    var darkwaypointsTop = $(this).waypoint({
      handler: function handler(direction) {
        if (direction === 'down') {
          mainNavClasses('dark-right-menu');
        }
      },
      offset: 20
    });
  });

  $('.dark-right-menu').each(function () {
    var darkwaypointsBot = $(this).waypoint({
      handler: function handler(direction) {
        if (direction === 'up') {
          mainNavClasses('dark-right-menu');
        }
      },
      offset: function offset() {
        return -this.element.clientHeight;
      }
    });
  });

  $('.light-menu').each(function () {
    var lightwaypointsTop = $(this).waypoint({
      handler: function handler(direction) {
        if (direction === 'down') {
          mainNavClasses();
        }
      },
      offset: 20
    });
  });

  $('.light-menu').each(function () {
    var lightwaypointsBot = $(this).waypoint({
      handler: function handler(direction) {
        if (direction === 'up') {
          mainNavClasses();
        }
      },
      offset: function offset() {
        return -this.element.clientHeight;
      }
    });
  });

  if ($('.nav-main').index() !== 0 && window.innerWidth > 768) {
    var sticky = new Waypoint.Sticky({
      element: $('.nav-main')[0]
    });
  }

  // $('a[href*="#"]').on('click touchend', function() {
  //   if (location.pathname.replace(/^\//,'') == this.pathname.replace(/^\//,'') && location.hostname == this.hostname) {

  //     var target = $(this.hash);
  //     target = target.length ? target : $('[name=' + this.hash.slice(1) +']');
  //     $('.mobile_menu').prop('checked', false);
  //     if (target.length) {
  //       setTimeout(function() {window.scroll(0,target.offset().top - 60);},1) //offset height of header here too.
  //       return false;
  //     }
  //   }
  // });

  // product page sticky menu
  var stuck = false;
  var stickyNav = void 0;
  if (window.innerWidth >= 901) {
    stuck = true;
    stickyNav = Object(__WEBPACK_IMPORTED_MODULE_0_stickybits__["a" /* default */])('#product-page-nav');
  }
  $(window).on('resize', function () {
    if (window.innerWidth <= 900 && stuck) {
      stuck = false;
      stickyNav.cleanup();
    }
    if (window.innerWidth >= 901 && !stuck) {
      stuck = true;
      stickyNav = Object(__WEBPACK_IMPORTED_MODULE_0_stickybits__["a" /* default */])('#product-page-nav');
    }
  });

  // read more buttons
  $('.read-more, .read-less').on('click', function () {
    $(this).parent().toggleClass('read_more_text--active');
  });

  // product features component
  $('.features-table .column').on('mouseenter', function () {
    $(this).css({
      "border-top-color": "#209cee",
      "cursor": "pointer"
    });
  });
  $('.features-table-item').on('mouseout', function () {
    $(this).css();
  });

  var $posts = $('.post-col');
  var $morePosts = $('.columns.load a');
  if ($morePosts.length) {
    $morePosts.on('click', function (e) {
      e.preventDefault();
      var firstHiddenPost = $('.post-col:hidden').index();
      var revealNo = 9;
      if (window.innerWidth < 768) {
        revealNo = 3;
      }
      for (var i = firstHiddenPost; i < firstHiddenPost + revealNo || i < $posts.length; i++) {
        $posts.eq(i).show();
      }
      if (!$('.post-col:hidden').length) {
        $('.columns.load').hide();
      }
    });
  }
});

// $.fn.scrollAcrossTable = function(scrollParent) {

//   $(this).on('click', function() {

//     let offset = 0

//     if (scrollParent.scrollLeft() === 0) {
//       offset = scrollParent.find('thead tr th').first().innerWidth() - 20
//     }

//     scrollParent.animate({ scrollLeft: scrollParent.find('thead tr th').eq(2).innerWidth() + scrollParent.scrollLeft() + offset
//     }, 'medium')
//   });

//   return this

// }

// $(".comparison-table__scroller").scrollAcrossTable($('#comparison-table-scroller'))

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/*
  STICKYBITS 💉
  --------
  > a lightweight alternative to `position: sticky` polyfills 🍬
  --------
  - each method is documented above it our view the readme
  - Stickybits does not manage polymorphic functionality (position like properties)
  * polymorphic functionality: (in the context of describing Stickybits)
    means making things like `position: sticky` be loosely supported with position fixed.
    It also means that features like `useStickyClasses` takes on styles like `position: fixed`.
  --------
  defaults 🔌
  --------
  - version = `package.json` version
  - userAgent = viewer browser agent
  - target = DOM element selector
  - noStyles = boolean
  - offset = number
  - parentClass = 'string'
  - scrollEl = window || DOM element selector
  - stickyClass = 'string'
  - stuckClass = 'string'
  - useStickyClasses = boolean
  - verticalPosition = 'string'
  --------
  props🔌
  --------
  - p = props {object}
  --------
  instance note
  --------
  - stickybits parent methods return this
  - stickybits instance methods return an instance item
  --------
  nomenclature
  --------
  - target => el => e
  - props => o || p
  - instance => item => it
  --------
  methods
  --------
  - .definePosition = defines sticky or fixed
  - .addInstance = an array of objects for each Stickybits Target
  - .getClosestParent = gets the parent for non-window scroll
  - .computeScrollOffsets = computes scroll position
  - .toggleClasses = older browser toggler
  - .manageState = manages sticky state
  - .removeClass = older browser support class remover
  - .removeInstance = removes an instance
  - .cleanup = removes all Stickybits instances and cleans up dom from stickybits
*/
function Stickybits(target, obj) {
  var o = typeof obj !== 'undefined' ? obj : {};
  this.version = '2.1.1';
  this.userAgent = window.navigator.userAgent || 'no `userAgent` provided by the browser';
  this.props = {
    noStyles: o.noStyles || false,
    stickyBitStickyOffset: o.stickyBitStickyOffset || 0,
    parentClass: o.parentClass || 'js-stickybit-parent',
    scrollEl: o.scrollEl || window,
    stickyClass: o.stickyClass || 'js-is-sticky',
    stuckClass: o.stuckClass || 'js-is-stuck',
    useStickyClasses: o.useStickyClasses || false,
    verticalPosition: o.verticalPosition || 'top'
  };
  var p = this.props;
  /*
    define positionVal
    ----
    -  uses a computed (`.definePosition()`)
    -  defined the position
  */
  p.positionVal = this.definePosition() || 'fixed';
  var vp = p.verticalPosition;
  var ns = p.noStyles;
  var pv = p.positionVal;
  this.els = typeof target === 'string' ? document.querySelectorAll(target) : target;
  if (!('length' in this.els)) this.els = [this.els];
  this.instances = [];
  for (var i = 0; i < this.els.length; i += 1) {
    var el = this.els[i];
    var styles = el.style;
    if (vp === 'top' && !ns) styles[vp] = p.stickyBitStickyOffset + 'px';
    if (pv !== 'fixed' && p.useStickyClasses === false) {
      styles.position = pv;
    } else if (pv !== 'fixed') {
      // const stickyManager = new ManageSticky(el, p)
      styles.position = pv;
    }
    var instance = this.addInstance(el, p);
    // instances are an array of objects
    this.instances.push(instance);
  }
  return this;
}

/*
  setStickyPosition ✔️
  --------
  —  most basic thing stickybits does
  => checks to see if position sticky is supported
  => defined the position to be used
  => stickybits works accordingly
*/
Stickybits.prototype.definePosition = function () {
  var prefix = ['', '-o-', '-webkit-', '-moz-', '-ms-'];
  var test = document.head.style;
  for (var i = 0; i < prefix.length; i += 1) {
    test.position = prefix[i] + 'sticky';
  }
  var stickyProp = 'fixed';
  if (typeof test.position !== 'undefined') stickyProp = test.position;
  test.position = '';
  return stickyProp;
};

/*
  addInstance ✔️
  --------
  — manages instances of items
  - takes in an el and props
  - returns an item object
  ---
  - target = el
  - o = {object} = props
    - scrollEl = 'string'
    - verticalPosition = number
    - off = boolean
    - parentClass = 'string'
    - stickyClass = 'string'
    - stuckClass = 'string'
  ---
  - defined later
    - parent = dom element
    - state = 'string'
    - offset = number
    - stickyStart = number
    - stickyStop = number
  - returns an instance object
*/
Stickybits.prototype.addInstance = function addInstance(el, props) {
  var _this = this;

  var item = {
    el: el,
    parent: el.parentNode,
    props: props
  };
  var p = item.props;
  item.parent.className += ' ' + props.parentClass;
  var se = p.scrollEl;
  item.isWin = se === window;
  if (!item.isWin) se = this.getClosestParent(item.el, se);
  this.computeScrollOffsets(item);
  item.state = 'default';
  item.stateContainer = function () {
    _this.manageState(item);
  };
  se.addEventListener('scroll', item.stateContainer);
  return item;
};

/*
  --------
  getParent 👨‍
  --------
  - a helper function that gets the target element's parent selected el
  - only used for non `window` scroll elements
  - supports older browsers
*/
Stickybits.prototype.getClosestParent = function getClosestParent(el, matchSelector) {
  // p = parent element
  var p = document.querySelector(matchSelector);
  var e = el;
  if (e.parentElement === p) return p;
  // traverse up the dom tree until we get to the parent
  while (e.parentElement !== p) {
    e = e.parentElement;
  } // return parent element
  return p;
};

/*
  computeScrollOffsets 📊
  ---
  computeScrollOffsets for Stickybits
  - defines
    - offset
    - start
    - stop
*/
Stickybits.prototype.computeScrollOffsets = function computeScrollOffsets(item) {
  var it = item;
  var p = it.props;
  var parent = it.parent;
  var iw = it.isWin;
  var scrollElOffset = 0;
  var stickyStart = parent.getBoundingClientRect().top;
  if (!iw && p.positionVal === 'fixed') {
    scrollElOffset = p.scrollEl.getBoundingClientRect().top;
    stickyStart = parent.getBoundingClientRect().top - scrollElOffset;
  }
  it.offset = scrollElOffset + p.stickyBitStickyOffset;
  if (p.verticalPosition !== 'bottom') {
    it.stickyStart = stickyStart - it.offset;
    it.stickyStop = stickyStart + parent.offsetHeight - (it.el.offsetHeight + it.offset);
  } else {
    it.stickyStart = 0;
    it.stickyStop = stickyStart + parent.offsetHeight;
  }
  return it;
};

/*
  toggleClasses ⚖️
  ---
  toggles classes (for older browser support)
  r = removed class
  a = added class
*/
Stickybits.prototype.toggleClasses = function toggleClasses(el, r, a) {
  var e = el;
  var cArray = e.className.split(' ');
  if (a && cArray.indexOf(a) === -1) cArray.push(a);
  var rItem = cArray.indexOf(r);
  if (rItem !== -1) cArray.splice(rItem, 1);
  e.className = cArray.join(' ');
};

/*
  manageState 📝
  ---
  - defines the state
    - normal
    - sticky
    - stuck
*/
Stickybits.prototype.manageState = function manageState(item) {
  // cache object
  var it = item;
  var e = it.el;
  var p = it.props;
  var state = it.state;
  var start = it.stickyStart;
  var stop = it.stickyStop;
  var stl = e.style;
  // cache props
  var ns = p.noStyles;
  var pv = p.positionVal;
  var se = p.scrollEl;
  var sticky = p.stickyClass;
  var stuck = p.stuckClass;
  var vp = p.verticalPosition;
  /*
    requestAnimationFrame
    ---
    - use rAF
    - or stub rAF
  */
  var rAF = se.requestAnimationFrame;
  if (!it.isWin || typeof rAF === 'undefined') {
    rAF = function rAFDummy(f) {
      f();
    };
  }
  /*
    define scroll vars
    ---
    - scroll
    - notSticky
    - isSticky
    - isStuck
  */
  var tC = this.toggleClasses;
  var scroll = it.isWin ? se.scrollY || se.pageYOffset : se.scrollTop;
  var notSticky = scroll > start && scroll < stop && (state === 'default' || state === 'stuck');
  var isSticky = scroll <= start && state === 'sticky';
  var isStuck = scroll >= stop && state === 'sticky';
  /*
    Unnamed arrow functions within this block
    ---
    - help wanted or discussion
    - view test.stickybits.js
      - `stickybits .manageState  `position: fixed` interface` for more awareness 👀
  */
  if (notSticky) {
    it.state = 'sticky';
    rAF(function () {
      tC(e, stuck, sticky);
      stl.position = pv;
      if (ns) return;
      stl.bottom = '';
      stl[vp] = p.stickyBitStickyOffset + 'px';
    });
  } else if (isSticky) {
    it.state = 'default';
    rAF(function () {
      tC(e, sticky);
      if (pv === 'fixed') stl.position = '';
    });
  } else if (isStuck) {
    it.state = 'stuck';
    rAF(function () {
      tC(e, sticky, stuck);
      if (pv !== 'fixed' || ns) return;
      stl.top = '';
      stl.bottom = '0';
      stl.position = 'absolute';
    });
  }
  return it;
};

/*
  removes an instance 👋
  --------
  - cleanup instance
*/
Stickybits.prototype.removeInstance = function removeInstance(instance) {
  var e = instance.el;
  var p = instance.props;
  var tC = this.toggleClasses;
  e.style.position = '';
  e.style[p.verticalPosition] = '';
  tC(e, p.stickyClass);
  tC(e, p.stuckClass);
  tC(e.parentNode, p.parentClass);
};

/*
  cleanup 🛁
  --------
  - cleans up each instance
  - clears instance
*/
Stickybits.prototype.cleanup = function cleanup() {
  for (var i = 0; i < this.instances.length; i += 1) {
    var instance = this.instances[i];
    instance.props.scrollEl.removeEventListener('scroll', instance.stateContainer);
    this.removeInstance(instance);
  }
  this.manageState = false;
  this.instances = [];
};

/*
  export
  --------
  exports StickBits to be used 🏁
*/
function stickybits(target, o) {
  return new Stickybits(target, o);
}

/* harmony default export */ __webpack_exports__["a"] = (stickybits);

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

// ------------------------------------------
// Rellax.js
// Buttery smooth parallax library
// Copyright (c) 2016 Moe Amaya (@moeamaya)
// MIT license
//
// Thanks to Paraxify.js and Jaime Cabllero
// for parallax concepts
// ------------------------------------------

(function (root, factory) {
  if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory();
  } else {
    // Browser globals (root is window)
    root.Rellax = factory();
  }
})(this, function () {
  var Rellax = function Rellax(el, options) {
    "use strict";

    var self = Object.create(Rellax.prototype);

    var posY = 0;
    var screenY = 0;
    var posX = 0;
    var screenX = 0;
    var blocks = [];
    var pause = true;

    // check what requestAnimationFrame to use, and if
    // it's not supported, use the onscroll event
    var loop = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || function (callback) {
      setTimeout(callback, 1000 / 60);
    };

    // check which transform property to use
    var transformProp = window.transformProp || function () {
      var testEl = document.createElement('div');
      if (testEl.style.transform === null) {
        var vendors = ['Webkit', 'Moz', 'ms'];
        for (var vendor in vendors) {
          if (testEl.style[vendors[vendor] + 'Transform'] !== undefined) {
            return vendors[vendor] + 'Transform';
          }
        }
      }
      return 'transform';
    }();

    // Default Settings
    self.options = {
      speed: -2,
      center: false,
      wrapper: null,
      round: true,
      vertical: true,
      horizontal: false,
      callback: function callback() {}
    };

    // User defined options (might have more in the future)
    if (options) {
      Object.keys(options).forEach(function (key) {
        self.options[key] = options[key];
      });
    }

    // By default, rellax class
    if (!el) {
      el = '.rellax';
    }

    // check if el is a className or a node
    var elements = typeof el === 'string' ? document.querySelectorAll(el) : [el];

    // Now query selector
    if (elements.length > 0) {
      self.elems = elements;
    }

    // The elements don't exist
    else {
        throw new Error("The elements you're trying to select don't exist.");
      }

    // Has a wrapper and it exists
    if (self.options.wrapper) {
      if (!self.options.wrapper.nodeType) {
        var wrapper = document.querySelector(self.options.wrapper);

        if (wrapper) {
          self.options.wrapper = wrapper;
        } else {
          throw new Error("The wrapper you're trying to use don't exist.");
        }
      }
    }

    // Get and cache initial position of all elements
    var cacheBlocks = function cacheBlocks() {
      for (var i = 0; i < self.elems.length; i++) {
        var block = createBlock(self.elems[i]);
        blocks.push(block);
      }
    };

    // Let's kick this script off
    // Build array for cached element values
    var init = function init() {
      for (var i = 0; i < blocks.length; i++) {
        self.elems[i].style.cssText = blocks[i].style;
      }

      blocks = [];

      screenY = window.innerHeight;
      screenX = window.innerWidth;
      setPosition();

      cacheBlocks();

      // If paused, unpause and set listener for window resizing events
      if (pause) {
        window.addEventListener('resize', init);
        pause = false;
      }
      animate();
    };

    // We want to cache the parallax blocks'
    // values: base, top, height, speed
    // el: is dom object, return: el cache values
    var createBlock = function createBlock(el) {
      var dataPercentage = el.getAttribute('data-rellax-percentage');
      var dataSpeed = el.getAttribute('data-rellax-speed');
      var dataZindex = el.getAttribute('data-rellax-zindex') || 0;

      // initializing at scrollY = 0 (top of browser), scrollX = 0 (left of browser)
      // ensures elements are positioned based on HTML layout.
      //
      // If the element has the percentage attribute, the posY and posX needs to be
      // the current scroll position's value, so that the elements are still positioned based on HTML layout
      var wrapperPosY = self.options.wrapper ? self.options.wrapper.scrollTop : window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop;
      var posY = self.options.vertical ? dataPercentage || self.options.center ? wrapperPosY : 0 : 0;
      var posX = self.options.horizontal ? dataPercentage || self.options.center ? window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft : 0 : 0;

      var blockTop = posY + el.getBoundingClientRect().top;
      var blockHeight = el.clientHeight || el.offsetHeight || el.scrollHeight;

      var blockLeft = posX + el.getBoundingClientRect().left;
      var blockWidth = el.clientWidth || el.offsetWidth || el.scrollWidth;

      // apparently parallax equation everyone uses
      var percentageY = dataPercentage ? dataPercentage : (posY - blockTop + screenY) / (blockHeight + screenY);
      var percentageX = dataPercentage ? dataPercentage : (posX - blockLeft + screenX) / (blockWidth + screenX);
      if (self.options.center) {
        percentageX = 0.5;percentageY = 0.5;
      }

      // Optional individual block speed as data attr, otherwise global speed
      var speed = dataSpeed ? dataSpeed : self.options.speed;

      var bases = updatePosition(percentageX, percentageY, speed);

      // ~~Store non-translate3d transforms~~
      // Store inline styles and extract transforms
      var style = el.style.cssText;
      var transform = '';

      // Check if there's an inline styled transform
      if (style.indexOf('transform') >= 0) {
        // Get the index of the transform
        var index = style.indexOf('transform');

        // Trim the style to the transform point and get the following semi-colon index
        var trimmedStyle = style.slice(index);
        var delimiter = trimmedStyle.indexOf(';');

        // Remove "transform" string and save the attribute
        if (delimiter) {
          transform = " " + trimmedStyle.slice(11, delimiter).replace(/\s/g, '');
        } else {
          transform = " " + trimmedStyle.slice(11).replace(/\s/g, '');
        }
      }

      return {
        baseX: bases.x,
        baseY: bases.y,
        top: blockTop,
        left: blockLeft,
        height: blockHeight,
        width: blockWidth,
        speed: speed,
        style: style,
        transform: transform,
        zindex: dataZindex
      };
    };

    // set scroll position (posY, posX)
    // side effect method is not ideal, but okay for now
    // returns true if the scroll changed, false if nothing happened
    var setPosition = function setPosition() {
      var oldY = posY;
      var oldX = posX;

      posY = self.options.wrapper ? self.options.wrapper.scrollTop : (document.documentElement || document.body.parentNode || document.body).scrollTop || window.pageYOffset;
      posX = self.options.wrapper ? self.options.wrapper.scrollLeft : (document.documentElement || document.body.parentNode || document.body).scrollLeft || window.pageXOffset;

      if (oldY != posY && self.options.vertical) {
        // scroll changed, return true
        return true;
      }

      if (oldX != posX && self.options.horizontal) {
        // scroll changed, return true
        return true;
      }

      // scroll did not change
      return false;
    };

    // Ahh a pure function, gets new transform value
    // based on scrollPosition and speed
    // Allow for decimal pixel values
    var updatePosition = function updatePosition(percentageX, percentageY, speed) {
      var result = {};
      var valueX = speed * (100 * (1 - percentageX));
      var valueY = speed * (100 * (1 - percentageY));

      result.x = self.options.round ? Math.round(valueX) : Math.round(valueX * 100) / 100;
      result.y = self.options.round ? Math.round(valueY) : Math.round(valueY * 100) / 100;

      return result;
    };

    // Loop
    var update = function update() {
      if (setPosition() && pause === false) {
        animate();
      }

      // loop again
      loop(update);
    };

    // Transform3d on parallax element
    var animate = function animate() {
      var positions;
      for (var i = 0; i < self.elems.length; i++) {
        var percentageY = (posY - blocks[i].top + screenY) / (blocks[i].height + screenY);
        var percentageX = (posX - blocks[i].left + screenX) / (blocks[i].width + screenX);

        // Subtracting initialize value, so element stays in same spot as HTML
        positions = updatePosition(percentageX, percentageY, blocks[i].speed); // - blocks[i].baseX;
        var positionY = positions.y - blocks[i].baseY;
        var positionX = positions.x - blocks[i].baseX;

        var zindex = blocks[i].zindex;

        // Move that element
        // (Set the new translation and append initial inline transforms.)
        var translate = 'translate3d(' + (self.options.horizontal ? positionX : '0') + 'px,' + (self.options.vertical ? positionY : '0') + 'px,' + zindex + 'px) ' + blocks[i].transform;
        self.elems[i].style[transformProp] = translate;
      }
      self.options.callback(positions);
    };

    self.destroy = function () {
      for (var i = 0; i < self.elems.length; i++) {
        self.elems[i].style.cssText = blocks[i].style;
      }

      // Remove resize event listener if not pause, and pause
      if (!pause) {
        window.removeEventListener('resize', init);
        pause = true;
      }
    };

    // Init
    init();

    // Start the loop
    update();

    // Allow to recalculate the initial values whenever we want
    self.refresh = init;

    return self;
  };
  return Rellax;
});

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * jQuery JavaScript Library v3.2.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2017-03-20T18:59Z
 */
(function (global, factory) {

	"use strict";

	if (( false ? "undefined" : _typeof(module)) === "object" && _typeof(module.exports) === "object") {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ? factory(global, true) : function (w) {
			if (!w.document) {
				throw new Error("jQuery requires a window with a document");
			}
			return factory(w);
		};
	} else {
		factory(global);
	}

	// Pass this if window is not defined yet
})(typeof window !== "undefined" ? window : this, function (window, noGlobal) {

	// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
	// enough that all such attempts are guarded in a try block.
	"use strict";

	var arr = [];

	var document = window.document;

	var getProto = Object.getPrototypeOf;

	var _slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var fnToString = hasOwn.toString;

	var ObjectFunctionString = fnToString.call(Object);

	var support = {};

	function DOMEval(code, doc) {
		doc = doc || document;

		var script = doc.createElement("script");

		script.text = code;
		doc.head.appendChild(script).parentNode.removeChild(script);
	}
	/* global Symbol */
	// Defining this global in .eslintrc.json would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module


	var version = "3.2.1",


	// Define a local copy of jQuery
	jQuery = function jQuery(selector, context) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init(selector, context);
	},


	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,


	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	    rdashAlpha = /-([a-z])/g,


	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function fcamelCase(all, letter) {
		return letter.toUpperCase();
	};

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function toArray() {
			return _slice.call(this);
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function get(num) {

			// Return all the elements in a clean array
			if (num == null) {
				return _slice.call(this);
			}

			// Return just the one element from the set
			return num < 0 ? this[num + this.length] : this[num];
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function pushStack(elems) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge(this.constructor(), elems);

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function each(callback) {
			return jQuery.each(this, callback);
		},

		map: function map(callback) {
			return this.pushStack(jQuery.map(this, function (elem, i) {
				return callback.call(elem, i, elem);
			}));
		},

		slice: function slice() {
			return this.pushStack(_slice.apply(this, arguments));
		},

		first: function first() {
			return this.eq(0);
		},

		last: function last() {
			return this.eq(-1);
		},

		eq: function eq(i) {
			var len = this.length,
			    j = +i + (i < 0 ? len : 0);
			return this.pushStack(j >= 0 && j < len ? [this[j]] : []);
		},

		end: function end() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function () {
		var options,
		    name,
		    src,
		    copy,
		    copyIsArray,
		    clone,
		    target = arguments[0] || {},
		    i = 1,
		    length = arguments.length,
		    deep = false;

		// Handle a deep copy situation
		if (typeof target === "boolean") {
			deep = target;

			// Skip the boolean and the target
			target = arguments[i] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ((typeof target === "undefined" ? "undefined" : _typeof(target)) !== "object" && !jQuery.isFunction(target)) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if (i === length) {
			target = this;
			i--;
		}

		for (; i < length; i++) {

			// Only deal with non-null/undefined values
			if ((options = arguments[i]) != null) {

				// Extend the base object
				for (name in options) {
					src = target[name];
					copy = options[name];

					// Prevent never-ending loop
					if (target === copy) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if (deep && copy && (jQuery.isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {

						if (copyIsArray) {
							copyIsArray = false;
							clone = src && Array.isArray(src) ? src : [];
						} else {
							clone = src && jQuery.isPlainObject(src) ? src : {};
						}

						// Never move original objects, clone them
						target[name] = jQuery.extend(deep, clone, copy);

						// Don't bring in undefined values
					} else if (copy !== undefined) {
						target[name] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend({

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + (version + Math.random()).replace(/\D/g, ""),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function error(msg) {
			throw new Error(msg);
		},

		noop: function noop() {},

		isFunction: function isFunction(obj) {
			return jQuery.type(obj) === "function";
		},

		isWindow: function isWindow(obj) {
			return obj != null && obj === obj.window;
		},

		isNumeric: function isNumeric(obj) {

			// As of jQuery 3.0, isNumeric is limited to
			// strings and numbers (primitives or objects)
			// that can be coerced to finite numbers (gh-2662)
			var type = jQuery.type(obj);
			return (type === "number" || type === "string") &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN(obj - parseFloat(obj));
		},

		isPlainObject: function isPlainObject(obj) {
			var proto, Ctor;

			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if (!obj || toString.call(obj) !== "[object Object]") {
				return false;
			}

			proto = getProto(obj);

			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if (!proto) {
				return true;
			}

			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call(proto, "constructor") && proto.constructor;
			return typeof Ctor === "function" && fnToString.call(Ctor) === ObjectFunctionString;
		},

		isEmptyObject: function isEmptyObject(obj) {

			/* eslint-disable no-unused-vars */
			// See https://github.com/eslint/eslint/issues/6125
			var name;

			for (name in obj) {
				return false;
			}
			return true;
		},

		type: function type(obj) {
			if (obj == null) {
				return obj + "";
			}

			// Support: Android <=2.3 only (functionish RegExp)
			return (typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object" || typeof obj === "function" ? class2type[toString.call(obj)] || "object" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
		},

		// Evaluates a script in a global context
		globalEval: function globalEval(code) {
			DOMEval(code);
		},

		// Convert dashed to camelCase; used by the css and data modules
		// Support: IE <=9 - 11, Edge 12 - 13
		// Microsoft forgot to hump their vendor prefix (#9572)
		camelCase: function camelCase(string) {
			return string.replace(rmsPrefix, "ms-").replace(rdashAlpha, fcamelCase);
		},

		each: function each(obj, callback) {
			var length,
			    i = 0;

			if (isArrayLike(obj)) {
				length = obj.length;
				for (; i < length; i++) {
					if (callback.call(obj[i], i, obj[i]) === false) {
						break;
					}
				}
			} else {
				for (i in obj) {
					if (callback.call(obj[i], i, obj[i]) === false) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android <=4.0 only
		trim: function trim(text) {
			return text == null ? "" : (text + "").replace(rtrim, "");
		},

		// results is for internal usage only
		makeArray: function makeArray(arr, results) {
			var ret = results || [];

			if (arr != null) {
				if (isArrayLike(Object(arr))) {
					jQuery.merge(ret, typeof arr === "string" ? [arr] : arr);
				} else {
					push.call(ret, arr);
				}
			}

			return ret;
		},

		inArray: function inArray(elem, arr, i) {
			return arr == null ? -1 : indexOf.call(arr, elem, i);
		},

		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function merge(first, second) {
			var len = +second.length,
			    j = 0,
			    i = first.length;

			for (; j < len; j++) {
				first[i++] = second[j];
			}

			first.length = i;

			return first;
		},

		grep: function grep(elems, callback, invert) {
			var callbackInverse,
			    matches = [],
			    i = 0,
			    length = elems.length,
			    callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for (; i < length; i++) {
				callbackInverse = !callback(elems[i], i);
				if (callbackInverse !== callbackExpect) {
					matches.push(elems[i]);
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function map(elems, callback, arg) {
			var length,
			    value,
			    i = 0,
			    ret = [];

			// Go through the array, translating each of the items to their new values
			if (isArrayLike(elems)) {
				length = elems.length;
				for (; i < length; i++) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}

				// Go through every key on the object,
			} else {
				for (i in elems) {
					value = callback(elems[i], i, arg);

					if (value != null) {
						ret.push(value);
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply([], ret);
		},

		// A global GUID counter for objects
		guid: 1,

		// Bind a function to a context, optionally partially applying any
		// arguments.
		proxy: function proxy(fn, context) {
			var tmp, args, proxy;

			if (typeof context === "string") {
				tmp = fn[context];
				context = fn;
				fn = tmp;
			}

			// Quick check to determine if target is callable, in the spec
			// this throws a TypeError, but we will just return undefined.
			if (!jQuery.isFunction(fn)) {
				return undefined;
			}

			// Simulated bind
			args = _slice.call(arguments, 2);
			proxy = function proxy() {
				return fn.apply(context || this, args.concat(_slice.call(arguments)));
			};

			// Set the guid of unique handler to the same of original handler, so it can be removed
			proxy.guid = fn.guid = fn.guid || jQuery.guid++;

			return proxy;
		},

		now: Date.now,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	});

	if (typeof Symbol === "function") {
		jQuery.fn[Symbol.iterator] = arr[Symbol.iterator];
	}

	// Populate the class2type map
	jQuery.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "), function (i, name) {
		class2type["[object " + name + "]"] = name.toLowerCase();
	});

	function isArrayLike(obj) {

		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
		    type = jQuery.type(obj);

		if (type === "function" || jQuery.isWindow(obj)) {
			return false;
		}

		return type === "array" || length === 0 || typeof length === "number" && length > 0 && length - 1 in obj;
	}
	var Sizzle =
	/*!
  * Sizzle CSS Selector Engine v2.3.3
  * https://sizzlejs.com/
  *
  * Copyright jQuery Foundation and other contributors
  * Released under the MIT license
  * http://jquery.org/license
  *
  * Date: 2016-08-08
  */
	function (window) {

		var i,
		    support,
		    Expr,
		    getText,
		    isXML,
		    tokenize,
		    compile,
		    select,
		    outermostContext,
		    sortInput,
		    hasDuplicate,


		// Local document vars
		setDocument,
		    document,
		    docElem,
		    documentIsHTML,
		    rbuggyQSA,
		    rbuggyMatches,
		    matches,
		    contains,


		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		    preferredDoc = window.document,
		    dirruns = 0,
		    done = 0,
		    classCache = createCache(),
		    tokenCache = createCache(),
		    compilerCache = createCache(),
		    sortOrder = function sortOrder(a, b) {
			if (a === b) {
				hasDuplicate = true;
			}
			return 0;
		},


		// Instance methods
		hasOwn = {}.hasOwnProperty,
		    arr = [],
		    pop = arr.pop,
		    push_native = arr.push,
		    push = arr.push,
		    slice = arr.slice,

		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function indexOf(list, elem) {
			var i = 0,
			    len = list.length;
			for (; i < len; i++) {
				if (list[i] === elem) {
					return i;
				}
			}
			return -1;
		},
		    booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",


		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",


		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",


		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace + "*\\]",
		    pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" + ")\\)|)",


		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp(whitespace + "+", "g"),
		    rtrim = new RegExp("^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g"),
		    rcomma = new RegExp("^" + whitespace + "*," + whitespace + "*"),
		    rcombinators = new RegExp("^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*"),
		    rattributeQuotes = new RegExp("=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g"),
		    rpseudo = new RegExp(pseudos),
		    ridentifier = new RegExp("^" + identifier + "$"),
		    matchExpr = {
			"ID": new RegExp("^#(" + identifier + ")"),
			"CLASS": new RegExp("^\\.(" + identifier + ")"),
			"TAG": new RegExp("^(" + identifier + "|[*])"),
			"ATTR": new RegExp("^" + attributes),
			"PSEUDO": new RegExp("^" + pseudos),
			"CHILD": new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace + "*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace + "*(\\d+)|))" + whitespace + "*\\)|)", "i"),
			"bool": new RegExp("^(?:" + booleans + ")$", "i"),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp("^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i")
		},
		    rinputs = /^(?:input|select|textarea|button)$/i,
		    rheader = /^h\d$/i,
		    rnative = /^[^{]+\{\s*\[native \w/,


		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,
		    rsibling = /[+~]/,


		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp("\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig"),
		    funescape = function funescape(_, escaped, escapedWhitespace) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ? escaped : high < 0 ?
			// BMP codepoint
			String.fromCharCode(high + 0x10000) :
			// Supplemental Plane codepoint (surrogate pair)
			String.fromCharCode(high >> 10 | 0xD800, high & 0x3FF | 0xDC00);
		},


		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
		    fcssescape = function fcssescape(ch, asCodePoint) {
			if (asCodePoint) {

				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if (ch === "\0") {
					return "\uFFFD";
				}

				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice(0, -1) + "\\" + ch.charCodeAt(ch.length - 1).toString(16) + " ";
			}

			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},


		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function unloadHandler() {
			setDocument();
		},
		    disabledAncestor = addCombinator(function (elem) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		}, { dir: "parentNode", next: "legend" });

		// Optimize for push.apply( _, NodeList )
		try {
			push.apply(arr = slice.call(preferredDoc.childNodes), preferredDoc.childNodes);
			// Support: Android<4.0
			// Detect silently failing push.apply
			arr[preferredDoc.childNodes.length].nodeType;
		} catch (e) {
			push = { apply: arr.length ?

				// Leverage slice if possible
				function (target, els) {
					push_native.apply(target, slice.call(els));
				} :

				// Support: IE<9
				// Otherwise append directly
				function (target, els) {
					var j = target.length,
					    i = 0;
					// Can't trust NodeList.length
					while (target[j++] = els[i++]) {}
					target.length = j - 1;
				}
			};
		}

		function Sizzle(selector, context, results, seed) {
			var m,
			    i,
			    elem,
			    nid,
			    match,
			    groups,
			    newSelector,
			    newContext = context && context.ownerDocument,


			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

			results = results || [];

			// Return early from calls with invalid selector or context
			if (typeof selector !== "string" || !selector || nodeType !== 1 && nodeType !== 9 && nodeType !== 11) {

				return results;
			}

			// Try to shortcut find operations (as opposed to filters) in HTML documents
			if (!seed) {

				if ((context ? context.ownerDocument || context : preferredDoc) !== document) {
					setDocument(context);
				}
				context = context || document;

				if (documentIsHTML) {

					// If the selector is sufficiently simple, try using a "get*By*" DOM method
					// (excepting DocumentFragment context, where the methods don't exist)
					if (nodeType !== 11 && (match = rquickExpr.exec(selector))) {

						// ID selector
						if (m = match[1]) {

							// Document context
							if (nodeType === 9) {
								if (elem = context.getElementById(m)) {

									// Support: IE, Opera, Webkit
									// TODO: identify versions
									// getElementById can match elements by name instead of ID
									if (elem.id === m) {
										results.push(elem);
										return results;
									}
								} else {
									return results;
								}

								// Element context
							} else {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if (newContext && (elem = newContext.getElementById(m)) && contains(context, elem) && elem.id === m) {

									results.push(elem);
									return results;
								}
							}

							// Type selector
						} else if (match[2]) {
							push.apply(results, context.getElementsByTagName(selector));
							return results;

							// Class selector
						} else if ((m = match[3]) && support.getElementsByClassName && context.getElementsByClassName) {

							push.apply(results, context.getElementsByClassName(m));
							return results;
						}
					}

					// Take advantage of querySelectorAll
					if (support.qsa && !compilerCache[selector + " "] && (!rbuggyQSA || !rbuggyQSA.test(selector))) {

						if (nodeType !== 1) {
							newContext = context;
							newSelector = selector;

							// qSA looks outside Element context, which is not what we want
							// Thanks to Andrew Dupont for this workaround technique
							// Support: IE <=8
							// Exclude object elements
						} else if (context.nodeName.toLowerCase() !== "object") {

							// Capture the context ID, setting it first if necessary
							if (nid = context.getAttribute("id")) {
								nid = nid.replace(rcssescape, fcssescape);
							} else {
								context.setAttribute("id", nid = expando);
							}

							// Prefix every selector in the list
							groups = tokenize(selector);
							i = groups.length;
							while (i--) {
								groups[i] = "#" + nid + " " + toSelector(groups[i]);
							}
							newSelector = groups.join(",");

							// Expand context for sibling selectors
							newContext = rsibling.test(selector) && testContext(context.parentNode) || context;
						}

						if (newSelector) {
							try {
								push.apply(results, newContext.querySelectorAll(newSelector));
								return results;
							} catch (qsaError) {} finally {
								if (nid === expando) {
									context.removeAttribute("id");
								}
							}
						}
					}
				}
			}

			// All others
			return select(selector.replace(rtrim, "$1"), context, results, seed);
		}

		/**
   * Create key-value caches of limited size
   * @returns {function(string, object)} Returns the Object data after storing it on itself with
   *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
   *	deleting the oldest entry
   */
		function createCache() {
			var keys = [];

			function cache(key, value) {
				// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
				if (keys.push(key + " ") > Expr.cacheLength) {
					// Only keep the most recent entries
					delete cache[keys.shift()];
				}
				return cache[key + " "] = value;
			}
			return cache;
		}

		/**
   * Mark a function for special use by Sizzle
   * @param {Function} fn The function to mark
   */
		function markFunction(fn) {
			fn[expando] = true;
			return fn;
		}

		/**
   * Support testing using an element
   * @param {Function} fn Passed the created element and returns a boolean result
   */
		function assert(fn) {
			var el = document.createElement("fieldset");

			try {
				return !!fn(el);
			} catch (e) {
				return false;
			} finally {
				// Remove from its parent by default
				if (el.parentNode) {
					el.parentNode.removeChild(el);
				}
				// release memory in IE
				el = null;
			}
		}

		/**
   * Adds the same handler for all of the specified attrs
   * @param {String} attrs Pipe-separated list of attributes
   * @param {Function} handler The method that will be applied
   */
		function addHandle(attrs, handler) {
			var arr = attrs.split("|"),
			    i = arr.length;

			while (i--) {
				Expr.attrHandle[arr[i]] = handler;
			}
		}

		/**
   * Checks document order of two siblings
   * @param {Element} a
   * @param {Element} b
   * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
   */
		function siblingCheck(a, b) {
			var cur = b && a,
			    diff = cur && a.nodeType === 1 && b.nodeType === 1 && a.sourceIndex - b.sourceIndex;

			// Use IE sourceIndex if available on both nodes
			if (diff) {
				return diff;
			}

			// Check if b follows a
			if (cur) {
				while (cur = cur.nextSibling) {
					if (cur === b) {
						return -1;
					}
				}
			}

			return a ? 1 : -1;
		}

		/**
   * Returns a function to use in pseudos for input types
   * @param {String} type
   */
		function createInputPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === type;
			};
		}

		/**
   * Returns a function to use in pseudos for buttons
   * @param {String} type
   */
		function createButtonPseudo(type) {
			return function (elem) {
				var name = elem.nodeName.toLowerCase();
				return (name === "input" || name === "button") && elem.type === type;
			};
		}

		/**
   * Returns a function to use in pseudos for :enabled/:disabled
   * @param {Boolean} disabled true for :disabled; false for :enabled
   */
		function createDisabledPseudo(disabled) {

			// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
			return function (elem) {

				// Only certain elements can match :enabled or :disabled
				// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
				// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
				if ("form" in elem) {

					// Check for inherited disabledness on relevant non-disabled elements:
					// * listed form-associated elements in a disabled fieldset
					//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
					//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
					// * option elements in a disabled optgroup
					//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
					// All such elements have a "form" property.
					if (elem.parentNode && elem.disabled === false) {

						// Option elements defer to a parent optgroup if present
						if ("label" in elem) {
							if ("label" in elem.parentNode) {
								return elem.parentNode.disabled === disabled;
							} else {
								return elem.disabled === disabled;
							}
						}

						// Support: IE 6 - 11
						// Use the isDisabled shortcut property to check for disabled fieldset ancestors
						return elem.isDisabled === disabled ||

						// Where there is no isDisabled, check manually
						/* jshint -W018 */
						elem.isDisabled !== !disabled && disabledAncestor(elem) === disabled;
					}

					return elem.disabled === disabled;

					// Try to winnow out elements that can't be disabled before trusting the disabled property.
					// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
					// even exist on them, let alone have a boolean value.
				} else if ("label" in elem) {
					return elem.disabled === disabled;
				}

				// Remaining elements are neither :enabled nor :disabled
				return false;
			};
		}

		/**
   * Returns a function to use in pseudos for positionals
   * @param {Function} fn
   */
		function createPositionalPseudo(fn) {
			return markFunction(function (argument) {
				argument = +argument;
				return markFunction(function (seed, matches) {
					var j,
					    matchIndexes = fn([], seed.length, argument),
					    i = matchIndexes.length;

					// Match elements found at the specified indexes
					while (i--) {
						if (seed[j = matchIndexes[i]]) {
							seed[j] = !(matches[j] = seed[j]);
						}
					}
				});
			});
		}

		/**
   * Checks a node for validity as a Sizzle context
   * @param {Element|Object=} context
   * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
   */
		function testContext(context) {
			return context && typeof context.getElementsByTagName !== "undefined" && context;
		}

		// Expose support vars for convenience
		support = Sizzle.support = {};

		/**
   * Detects XML nodes
   * @param {Element|Object} elem An element or a document
   * @returns {Boolean} True iff elem is a non-HTML XML node
   */
		isXML = Sizzle.isXML = function (elem) {
			// documentElement is verified for cases where it doesn't yet exist
			// (such as loading iframes in IE - #4833)
			var documentElement = elem && (elem.ownerDocument || elem).documentElement;
			return documentElement ? documentElement.nodeName !== "HTML" : false;
		};

		/**
   * Sets document-related variables once based on the current document
   * @param {Element|Object} [doc] An element or document object to use to set the document
   * @returns {Object} Returns the current document
   */
		setDocument = Sizzle.setDocument = function (node) {
			var hasCompare,
			    subWindow,
			    doc = node ? node.ownerDocument || node : preferredDoc;

			// Return early if doc is invalid or already selected
			if (doc === document || doc.nodeType !== 9 || !doc.documentElement) {
				return document;
			}

			// Update global variables
			document = doc;
			docElem = document.documentElement;
			documentIsHTML = !isXML(document);

			// Support: IE 9-11, Edge
			// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
			if (preferredDoc !== document && (subWindow = document.defaultView) && subWindow.top !== subWindow) {

				// Support: IE 11, Edge
				if (subWindow.addEventListener) {
					subWindow.addEventListener("unload", unloadHandler, false);

					// Support: IE 9 - 10 only
				} else if (subWindow.attachEvent) {
					subWindow.attachEvent("onunload", unloadHandler);
				}
			}

			/* Attributes
   ---------------------------------------------------------------------- */

			// Support: IE<8
			// Verify that getAttribute really returns attributes and not properties
			// (excepting IE8 booleans)
			support.attributes = assert(function (el) {
				el.className = "i";
				return !el.getAttribute("className");
			});

			/* getElement(s)By*
   ---------------------------------------------------------------------- */

			// Check if getElementsByTagName("*") returns only elements
			support.getElementsByTagName = assert(function (el) {
				el.appendChild(document.createComment(""));
				return !el.getElementsByTagName("*").length;
			});

			// Support: IE<9
			support.getElementsByClassName = rnative.test(document.getElementsByClassName);

			// Support: IE<10
			// Check if getElementById returns elements by name
			// The broken getElementById methods don't pick up programmatically-set names,
			// so use a roundabout getElementsByName test
			support.getById = assert(function (el) {
				docElem.appendChild(el).id = expando;
				return !document.getElementsByName || !document.getElementsByName(expando).length;
			});

			// ID filter and find
			if (support.getById) {
				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						return elem.getAttribute("id") === attrId;
					};
				};
				Expr.find["ID"] = function (id, context) {
					if (typeof context.getElementById !== "undefined" && documentIsHTML) {
						var elem = context.getElementById(id);
						return elem ? [elem] : [];
					}
				};
			} else {
				Expr.filter["ID"] = function (id) {
					var attrId = id.replace(runescape, funescape);
					return function (elem) {
						var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
						return node && node.value === attrId;
					};
				};

				// Support: IE 6 - 7 only
				// getElementById is not reliable as a find shortcut
				Expr.find["ID"] = function (id, context) {
					if (typeof context.getElementById !== "undefined" && documentIsHTML) {
						var node,
						    i,
						    elems,
						    elem = context.getElementById(id);

						if (elem) {

							// Verify the id attribute
							node = elem.getAttributeNode("id");
							if (node && node.value === id) {
								return [elem];
							}

							// Fall back on getElementsByName
							elems = context.getElementsByName(id);
							i = 0;
							while (elem = elems[i++]) {
								node = elem.getAttributeNode("id");
								if (node && node.value === id) {
									return [elem];
								}
							}
						}

						return [];
					}
				};
			}

			// Tag
			Expr.find["TAG"] = support.getElementsByTagName ? function (tag, context) {
				if (typeof context.getElementsByTagName !== "undefined") {
					return context.getElementsByTagName(tag);

					// DocumentFragment nodes don't have gEBTN
				} else if (support.qsa) {
					return context.querySelectorAll(tag);
				}
			} : function (tag, context) {
				var elem,
				    tmp = [],
				    i = 0,

				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName(tag);

				// Filter out possible comments
				if (tag === "*") {
					while (elem = results[i++]) {
						if (elem.nodeType === 1) {
							tmp.push(elem);
						}
					}

					return tmp;
				}
				return results;
			};

			// Class
			Expr.find["CLASS"] = support.getElementsByClassName && function (className, context) {
				if (typeof context.getElementsByClassName !== "undefined" && documentIsHTML) {
					return context.getElementsByClassName(className);
				}
			};

			/* QSA/matchesSelector
   ---------------------------------------------------------------------- */

			// QSA and matchesSelector support

			// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
			rbuggyMatches = [];

			// qSa(:focus) reports false when true (Chrome 21)
			// We allow this because of a bug in IE8/9 that throws an error
			// whenever `document.activeElement` is accessed on an iframe
			// So, we allow :focus to pass through QSA all the time to avoid the IE error
			// See https://bugs.jquery.com/ticket/13378
			rbuggyQSA = [];

			if (support.qsa = rnative.test(document.querySelectorAll)) {
				// Build QSA regex
				// Regex strategy adopted from Diego Perini
				assert(function (el) {
					// Select is set to empty string on purpose
					// This is to test IE's treatment of not explicitly
					// setting a boolean content attribute,
					// since its presence should be enough
					// https://bugs.jquery.com/ticket/12359
					docElem.appendChild(el).innerHTML = "<a id='" + expando + "'></a>" + "<select id='" + expando + "-\r\\' msallowcapture=''>" + "<option selected=''></option></select>";

					// Support: IE8, Opera 11-12.16
					// Nothing should be selected when empty strings follow ^= or $= or *=
					// The test attribute must be unknown in Opera but "safe" for WinRT
					// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
					if (el.querySelectorAll("[msallowcapture^='']").length) {
						rbuggyQSA.push("[*^$]=" + whitespace + "*(?:''|\"\")");
					}

					// Support: IE8
					// Boolean attributes and "value" are not treated correctly
					if (!el.querySelectorAll("[selected]").length) {
						rbuggyQSA.push("\\[" + whitespace + "*(?:value|" + booleans + ")");
					}

					// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
					if (!el.querySelectorAll("[id~=" + expando + "-]").length) {
						rbuggyQSA.push("~=");
					}

					// Webkit/Opera - :checked should return selected option elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					// IE8 throws error here and will not see later tests
					if (!el.querySelectorAll(":checked").length) {
						rbuggyQSA.push(":checked");
					}

					// Support: Safari 8+, iOS 8+
					// https://bugs.webkit.org/show_bug.cgi?id=136851
					// In-page `selector#id sibling-combinator selector` fails
					if (!el.querySelectorAll("a#" + expando + "+*").length) {
						rbuggyQSA.push(".#.+[+~]");
					}
				});

				assert(function (el) {
					el.innerHTML = "<a href='' disabled='disabled'></a>" + "<select disabled='disabled'><option/></select>";

					// Support: Windows 8 Native Apps
					// The type and name attributes are restricted during .innerHTML assignment
					var input = document.createElement("input");
					input.setAttribute("type", "hidden");
					el.appendChild(input).setAttribute("name", "D");

					// Support: IE8
					// Enforce case-sensitivity of name attribute
					if (el.querySelectorAll("[name=d]").length) {
						rbuggyQSA.push("name" + whitespace + "*[*^$|!~]?=");
					}

					// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
					// IE8 throws error here and will not see later tests
					if (el.querySelectorAll(":enabled").length !== 2) {
						rbuggyQSA.push(":enabled", ":disabled");
					}

					// Support: IE9-11+
					// IE's :disabled selector does not pick up the children of disabled fieldsets
					docElem.appendChild(el).disabled = true;
					if (el.querySelectorAll(":disabled").length !== 2) {
						rbuggyQSA.push(":enabled", ":disabled");
					}

					// Opera 10-11 does not throw on post-comma invalid pseudos
					el.querySelectorAll("*,:x");
					rbuggyQSA.push(",.*:");
				});
			}

			if (support.matchesSelector = rnative.test(matches = docElem.matches || docElem.webkitMatchesSelector || docElem.mozMatchesSelector || docElem.oMatchesSelector || docElem.msMatchesSelector)) {

				assert(function (el) {
					// Check to see if it's possible to do matchesSelector
					// on a disconnected node (IE 9)
					support.disconnectedMatch = matches.call(el, "*");

					// This should fail with an exception
					// Gecko does not error, returns false instead
					matches.call(el, "[s!='']:x");
					rbuggyMatches.push("!=", pseudos);
				});
			}

			rbuggyQSA = rbuggyQSA.length && new RegExp(rbuggyQSA.join("|"));
			rbuggyMatches = rbuggyMatches.length && new RegExp(rbuggyMatches.join("|"));

			/* Contains
   ---------------------------------------------------------------------- */
			hasCompare = rnative.test(docElem.compareDocumentPosition);

			// Element contains another
			// Purposefully self-exclusive
			// As in, an element does not contain itself
			contains = hasCompare || rnative.test(docElem.contains) ? function (a, b) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
				    bup = b && b.parentNode;
				return a === bup || !!(bup && bup.nodeType === 1 && (adown.contains ? adown.contains(bup) : a.compareDocumentPosition && a.compareDocumentPosition(bup) & 16));
			} : function (a, b) {
				if (b) {
					while (b = b.parentNode) {
						if (b === a) {
							return true;
						}
					}
				}
				return false;
			};

			/* Sorting
   ---------------------------------------------------------------------- */

			// Document order sorting
			sortOrder = hasCompare ? function (a, b) {

				// Flag for duplicate removal
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				// Sort on method existence if only one input has compareDocumentPosition
				var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
				if (compare) {
					return compare;
				}

				// Calculate position if both inputs belong to the same document
				compare = (a.ownerDocument || a) === (b.ownerDocument || b) ? a.compareDocumentPosition(b) :

				// Otherwise we know they are disconnected
				1;

				// Disconnected nodes
				if (compare & 1 || !support.sortDetached && b.compareDocumentPosition(a) === compare) {

					// Choose the first element that is related to our preferred document
					if (a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a)) {
						return -1;
					}
					if (b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b)) {
						return 1;
					}

					// Maintain original order
					return sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;
				}

				return compare & 4 ? -1 : 1;
			} : function (a, b) {
				// Exit early if the nodes are identical
				if (a === b) {
					hasDuplicate = true;
					return 0;
				}

				var cur,
				    i = 0,
				    aup = a.parentNode,
				    bup = b.parentNode,
				    ap = [a],
				    bp = [b];

				// Parentless nodes are either documents or disconnected
				if (!aup || !bup) {
					return a === document ? -1 : b === document ? 1 : aup ? -1 : bup ? 1 : sortInput ? indexOf(sortInput, a) - indexOf(sortInput, b) : 0;

					// If the nodes are siblings, we can do a quick check
				} else if (aup === bup) {
					return siblingCheck(a, b);
				}

				// Otherwise we need full lists of their ancestors for comparison
				cur = a;
				while (cur = cur.parentNode) {
					ap.unshift(cur);
				}
				cur = b;
				while (cur = cur.parentNode) {
					bp.unshift(cur);
				}

				// Walk down the tree looking for a discrepancy
				while (ap[i] === bp[i]) {
					i++;
				}

				return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck(ap[i], bp[i]) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 : bp[i] === preferredDoc ? 1 : 0;
			};

			return document;
		};

		Sizzle.matches = function (expr, elements) {
			return Sizzle(expr, null, null, elements);
		};

		Sizzle.matchesSelector = function (elem, expr) {
			// Set document vars if needed
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			// Make sure that attribute selectors are quoted
			expr = expr.replace(rattributeQuotes, "='$1']");

			if (support.matchesSelector && documentIsHTML && !compilerCache[expr + " "] && (!rbuggyMatches || !rbuggyMatches.test(expr)) && (!rbuggyQSA || !rbuggyQSA.test(expr))) {

				try {
					var ret = matches.call(elem, expr);

					// IE 9's matchesSelector returns false on disconnected nodes
					if (ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11) {
						return ret;
					}
				} catch (e) {}
			}

			return Sizzle(expr, document, null, [elem]).length > 0;
		};

		Sizzle.contains = function (context, elem) {
			// Set document vars if needed
			if ((context.ownerDocument || context) !== document) {
				setDocument(context);
			}
			return contains(context, elem);
		};

		Sizzle.attr = function (elem, name) {
			// Set document vars if needed
			if ((elem.ownerDocument || elem) !== document) {
				setDocument(elem);
			}

			var fn = Expr.attrHandle[name.toLowerCase()],

			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call(Expr.attrHandle, name.toLowerCase()) ? fn(elem, name, !documentIsHTML) : undefined;

			return val !== undefined ? val : support.attributes || !documentIsHTML ? elem.getAttribute(name) : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
		};

		Sizzle.escape = function (sel) {
			return (sel + "").replace(rcssescape, fcssescape);
		};

		Sizzle.error = function (msg) {
			throw new Error("Syntax error, unrecognized expression: " + msg);
		};

		/**
   * Document sorting and removing duplicates
   * @param {ArrayLike} results
   */
		Sizzle.uniqueSort = function (results) {
			var elem,
			    duplicates = [],
			    j = 0,
			    i = 0;

			// Unless we *know* we can detect duplicates, assume their presence
			hasDuplicate = !support.detectDuplicates;
			sortInput = !support.sortStable && results.slice(0);
			results.sort(sortOrder);

			if (hasDuplicate) {
				while (elem = results[i++]) {
					if (elem === results[i]) {
						j = duplicates.push(i);
					}
				}
				while (j--) {
					results.splice(duplicates[j], 1);
				}
			}

			// Clear input after sorting to release objects
			// See https://github.com/jquery/sizzle/pull/225
			sortInput = null;

			return results;
		};

		/**
   * Utility function for retrieving the text value of an array of DOM nodes
   * @param {Array|Element} elem
   */
		getText = Sizzle.getText = function (elem) {
			var node,
			    ret = "",
			    i = 0,
			    nodeType = elem.nodeType;

			if (!nodeType) {
				// If no nodeType, this is expected to be an array
				while (node = elem[i++]) {
					// Do not traverse comment nodes
					ret += getText(node);
				}
			} else if (nodeType === 1 || nodeType === 9 || nodeType === 11) {
				// Use textContent for elements
				// innerText usage removed for consistency of new lines (jQuery #11153)
				if (typeof elem.textContent === "string") {
					return elem.textContent;
				} else {
					// Traverse its children
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						ret += getText(elem);
					}
				}
			} else if (nodeType === 3 || nodeType === 4) {
				return elem.nodeValue;
			}
			// Do not include comment or processing instruction nodes

			return ret;
		};

		Expr = Sizzle.selectors = {

			// Can be adjusted by the user
			cacheLength: 50,

			createPseudo: markFunction,

			match: matchExpr,

			attrHandle: {},

			find: {},

			relative: {
				">": { dir: "parentNode", first: true },
				" ": { dir: "parentNode" },
				"+": { dir: "previousSibling", first: true },
				"~": { dir: "previousSibling" }
			},

			preFilter: {
				"ATTR": function ATTR(match) {
					match[1] = match[1].replace(runescape, funescape);

					// Move the given value to match[3] whether quoted or unquoted
					match[3] = (match[3] || match[4] || match[5] || "").replace(runescape, funescape);

					if (match[2] === "~=") {
						match[3] = " " + match[3] + " ";
					}

					return match.slice(0, 4);
				},

				"CHILD": function CHILD(match) {
					/* matches from matchExpr["CHILD"]
     	1 type (only|nth|...)
     	2 what (child|of-type)
     	3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
     	4 xn-component of xn+y argument ([+-]?\d*n|)
     	5 sign of xn-component
     	6 x of xn-component
     	7 sign of y-component
     	8 y of y-component
     */
					match[1] = match[1].toLowerCase();

					if (match[1].slice(0, 3) === "nth") {
						// nth-* requires argument
						if (!match[3]) {
							Sizzle.error(match[0]);
						}

						// numeric x and y parameters for Expr.filter.CHILD
						// remember that false/true cast respectively to 0/1
						match[4] = +(match[4] ? match[5] + (match[6] || 1) : 2 * (match[3] === "even" || match[3] === "odd"));
						match[5] = +(match[7] + match[8] || match[3] === "odd");

						// other types prohibit arguments
					} else if (match[3]) {
						Sizzle.error(match[0]);
					}

					return match;
				},

				"PSEUDO": function PSEUDO(match) {
					var excess,
					    unquoted = !match[6] && match[2];

					if (matchExpr["CHILD"].test(match[0])) {
						return null;
					}

					// Accept quoted arguments as-is
					if (match[3]) {
						match[2] = match[4] || match[5] || "";

						// Strip excess characters from unquoted arguments
					} else if (unquoted && rpseudo.test(unquoted) && (
					// Get excess from tokenize (recursively)
					excess = tokenize(unquoted, true)) && (
					// advance to the next closing parenthesis
					excess = unquoted.indexOf(")", unquoted.length - excess) - unquoted.length)) {

						// excess is a negative index
						match[0] = match[0].slice(0, excess);
						match[2] = unquoted.slice(0, excess);
					}

					// Return only captures needed by the pseudo filter method (type and argument)
					return match.slice(0, 3);
				}
			},

			filter: {

				"TAG": function TAG(nodeNameSelector) {
					var nodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
					return nodeNameSelector === "*" ? function () {
						return true;
					} : function (elem) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
				},

				"CLASS": function CLASS(className) {
					var pattern = classCache[className + " "];

					return pattern || (pattern = new RegExp("(^|" + whitespace + ")" + className + "(" + whitespace + "|$)")) && classCache(className, function (elem) {
						return pattern.test(typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "");
					});
				},

				"ATTR": function ATTR(name, operator, check) {
					return function (elem) {
						var result = Sizzle.attr(elem, name);

						if (result == null) {
							return operator === "!=";
						}
						if (!operator) {
							return true;
						}

						result += "";

						return operator === "=" ? result === check : operator === "!=" ? result !== check : operator === "^=" ? check && result.indexOf(check) === 0 : operator === "*=" ? check && result.indexOf(check) > -1 : operator === "$=" ? check && result.slice(-check.length) === check : operator === "~=" ? (" " + result.replace(rwhitespace, " ") + " ").indexOf(check) > -1 : operator === "|=" ? result === check || result.slice(0, check.length + 1) === check + "-" : false;
					};
				},

				"CHILD": function CHILD(type, what, argument, first, last) {
					var simple = type.slice(0, 3) !== "nth",
					    forward = type.slice(-4) !== "last",
					    ofType = what === "of-type";

					return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function (elem) {
						return !!elem.parentNode;
					} : function (elem, context, xml) {
						var cache,
						    uniqueCache,
						    outerCache,
						    node,
						    nodeIndex,
						    start,
						    dir = simple !== forward ? "nextSibling" : "previousSibling",
						    parent = elem.parentNode,
						    name = ofType && elem.nodeName.toLowerCase(),
						    useCache = !xml && !ofType,
						    diff = false;

						if (parent) {

							// :(first|last|only)-(child|of-type)
							if (simple) {
								while (dir) {
									node = elem;
									while (node = node[dir]) {
										if (ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [forward ? parent.firstChild : parent.lastChild];

							// non-xml :nth-child(...) stores cache data on `parent`
							if (forward && useCache) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[expando] || (node[expando] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

								cache = uniqueCache[type] || [];
								nodeIndex = cache[0] === dirruns && cache[1];
								diff = nodeIndex && cache[2];
								node = nodeIndex && parent.childNodes[nodeIndex];

								while (node = ++nodeIndex && node && node[dir] || (

								// Fallback to seeking `elem` from the start
								diff = nodeIndex = 0) || start.pop()) {

									// When found, cache indexes on `parent` and break
									if (node.nodeType === 1 && ++diff && node === elem) {
										uniqueCache[type] = [dirruns, nodeIndex, diff];
										break;
									}
								}
							} else {
								// Use previously-cached element index if available
								if (useCache) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[expando] || (node[expando] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

									cache = uniqueCache[type] || [];
									nodeIndex = cache[0] === dirruns && cache[1];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if (diff === false) {
									// Use the same loop as above to seek `elem` from the start
									while (node = ++nodeIndex && node && node[dir] || (diff = nodeIndex = 0) || start.pop()) {

										if ((ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1) && ++diff) {

											// Cache the index of each encountered element
											if (useCache) {
												outerCache = node[expando] || (node[expando] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[node.uniqueID] || (outerCache[node.uniqueID] = {});

												uniqueCache[type] = [dirruns, diff];
											}

											if (node === elem) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || diff % first === 0 && diff / first >= 0;
						}
					};
				},

				"PSEUDO": function PSEUDO(pseudo, argument) {
					// pseudo-class names are case-insensitive
					// http://www.w3.org/TR/selectors/#pseudo-classes
					// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
					// Remember that setFilters inherits from pseudos
					var args,
					    fn = Expr.pseudos[pseudo] || Expr.setFilters[pseudo.toLowerCase()] || Sizzle.error("unsupported pseudo: " + pseudo);

					// The user may use createPseudo to indicate that
					// arguments are needed to create the filter function
					// just as Sizzle does
					if (fn[expando]) {
						return fn(argument);
					}

					// But maintain support for old signatures
					if (fn.length > 1) {
						args = [pseudo, pseudo, "", argument];
						return Expr.setFilters.hasOwnProperty(pseudo.toLowerCase()) ? markFunction(function (seed, matches) {
							var idx,
							    matched = fn(seed, argument),
							    i = matched.length;
							while (i--) {
								idx = indexOf(seed, matched[i]);
								seed[idx] = !(matches[idx] = matched[i]);
							}
						}) : function (elem) {
							return fn(elem, 0, args);
						};
					}

					return fn;
				}
			},

			pseudos: {
				// Potentially complex pseudos
				"not": markFunction(function (selector) {
					// Trim the selector passed to compile
					// to avoid treating leading and trailing
					// spaces as combinators
					var input = [],
					    results = [],
					    matcher = compile(selector.replace(rtrim, "$1"));

					return matcher[expando] ? markFunction(function (seed, matches, context, xml) {
						var elem,
						    unmatched = matcher(seed, null, xml, []),
						    i = seed.length;

						// Match elements unmatched by `matcher`
						while (i--) {
							if (elem = unmatched[i]) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) : function (elem, context, xml) {
						input[0] = elem;
						matcher(input, null, xml, results);
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
				}),

				"has": markFunction(function (selector) {
					return function (elem) {
						return Sizzle(selector, elem).length > 0;
					};
				}),

				"contains": markFunction(function (text) {
					text = text.replace(runescape, funescape);
					return function (elem) {
						return (elem.textContent || elem.innerText || getText(elem)).indexOf(text) > -1;
					};
				}),

				// "Whether an element is represented by a :lang() selector
				// is based solely on the element's language value
				// being equal to the identifier C,
				// or beginning with the identifier C immediately followed by "-".
				// The matching of C against the element's language value is performed case-insensitively.
				// The identifier C does not have to be a valid language name."
				// http://www.w3.org/TR/selectors/#lang-pseudo
				"lang": markFunction(function (lang) {
					// lang value must be a valid identifier
					if (!ridentifier.test(lang || "")) {
						Sizzle.error("unsupported lang: " + lang);
					}
					lang = lang.replace(runescape, funescape).toLowerCase();
					return function (elem) {
						var elemLang;
						do {
							if (elemLang = documentIsHTML ? elem.lang : elem.getAttribute("xml:lang") || elem.getAttribute("lang")) {

								elemLang = elemLang.toLowerCase();
								return elemLang === lang || elemLang.indexOf(lang + "-") === 0;
							}
						} while ((elem = elem.parentNode) && elem.nodeType === 1);
						return false;
					};
				}),

				// Miscellaneous
				"target": function target(elem) {
					var hash = window.location && window.location.hash;
					return hash && hash.slice(1) === elem.id;
				},

				"root": function root(elem) {
					return elem === docElem;
				},

				"focus": function focus(elem) {
					return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
				},

				// Boolean properties
				"enabled": createDisabledPseudo(false),
				"disabled": createDisabledPseudo(true),

				"checked": function checked(elem) {
					// In CSS3, :checked should return both checked and selected elements
					// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
					var nodeName = elem.nodeName.toLowerCase();
					return nodeName === "input" && !!elem.checked || nodeName === "option" && !!elem.selected;
				},

				"selected": function selected(elem) {
					// Accessing this property makes selected-by-default
					// options in Safari work properly
					if (elem.parentNode) {
						elem.parentNode.selectedIndex;
					}

					return elem.selected === true;
				},

				// Contents
				"empty": function empty(elem) {
					// http://www.w3.org/TR/selectors/#empty-pseudo
					// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
					//   but not by others (comment: 8; processing instruction: 7; etc.)
					// nodeType < 6 works because attributes (2) do not appear as children
					for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
						if (elem.nodeType < 6) {
							return false;
						}
					}
					return true;
				},

				"parent": function parent(elem) {
					return !Expr.pseudos["empty"](elem);
				},

				// Element/input types
				"header": function header(elem) {
					return rheader.test(elem.nodeName);
				},

				"input": function input(elem) {
					return rinputs.test(elem.nodeName);
				},

				"button": function button(elem) {
					var name = elem.nodeName.toLowerCase();
					return name === "input" && elem.type === "button" || name === "button";
				},

				"text": function text(elem) {
					var attr;
					return elem.nodeName.toLowerCase() === "input" && elem.type === "text" && (

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					(attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text");
				},

				// Position-in-collection
				"first": createPositionalPseudo(function () {
					return [0];
				}),

				"last": createPositionalPseudo(function (matchIndexes, length) {
					return [length - 1];
				}),

				"eq": createPositionalPseudo(function (matchIndexes, length, argument) {
					return [argument < 0 ? argument + length : argument];
				}),

				"even": createPositionalPseudo(function (matchIndexes, length) {
					var i = 0;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"odd": createPositionalPseudo(function (matchIndexes, length) {
					var i = 1;
					for (; i < length; i += 2) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"lt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; --i >= 0;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				}),

				"gt": createPositionalPseudo(function (matchIndexes, length, argument) {
					var i = argument < 0 ? argument + length : argument;
					for (; ++i < length;) {
						matchIndexes.push(i);
					}
					return matchIndexes;
				})
			}
		};

		Expr.pseudos["nth"] = Expr.pseudos["eq"];

		// Add button/input type pseudos
		for (i in { radio: true, checkbox: true, file: true, password: true, image: true }) {
			Expr.pseudos[i] = createInputPseudo(i);
		}
		for (i in { submit: true, reset: true }) {
			Expr.pseudos[i] = createButtonPseudo(i);
		}

		// Easy API for creating new setFilters
		function setFilters() {}
		setFilters.prototype = Expr.filters = Expr.pseudos;
		Expr.setFilters = new setFilters();

		tokenize = Sizzle.tokenize = function (selector, parseOnly) {
			var matched,
			    match,
			    tokens,
			    type,
			    soFar,
			    groups,
			    preFilters,
			    cached = tokenCache[selector + " "];

			if (cached) {
				return parseOnly ? 0 : cached.slice(0);
			}

			soFar = selector;
			groups = [];
			preFilters = Expr.preFilter;

			while (soFar) {

				// Comma and first run
				if (!matched || (match = rcomma.exec(soFar))) {
					if (match) {
						// Don't consume trailing commas as valid
						soFar = soFar.slice(match[0].length) || soFar;
					}
					groups.push(tokens = []);
				}

				matched = false;

				// Combinators
				if (match = rcombinators.exec(soFar)) {
					matched = match.shift();
					tokens.push({
						value: matched,
						// Cast descendant combinators to space
						type: match[0].replace(rtrim, " ")
					});
					soFar = soFar.slice(matched.length);
				}

				// Filters
				for (type in Expr.filter) {
					if ((match = matchExpr[type].exec(soFar)) && (!preFilters[type] || (match = preFilters[type](match)))) {
						matched = match.shift();
						tokens.push({
							value: matched,
							type: type,
							matches: match
						});
						soFar = soFar.slice(matched.length);
					}
				}

				if (!matched) {
					break;
				}
			}

			// Return the length of the invalid excess
			// if we're just parsing
			// Otherwise, throw an error or return tokens
			return parseOnly ? soFar.length : soFar ? Sizzle.error(selector) :
			// Cache the tokens
			tokenCache(selector, groups).slice(0);
		};

		function toSelector(tokens) {
			var i = 0,
			    len = tokens.length,
			    selector = "";
			for (; i < len; i++) {
				selector += tokens[i].value;
			}
			return selector;
		}

		function addCombinator(matcher, combinator, base) {
			var dir = combinator.dir,
			    skip = combinator.next,
			    key = skip || dir,
			    checkNonElements = base && key === "parentNode",
			    doneName = done++;

			return combinator.first ?
			// Check against closest ancestor/preceding element
			function (elem, context, xml) {
				while (elem = elem[dir]) {
					if (elem.nodeType === 1 || checkNonElements) {
						return matcher(elem, context, xml);
					}
				}
				return false;
			} :

			// Check against all ancestor/preceding elements
			function (elem, context, xml) {
				var oldCache,
				    uniqueCache,
				    outerCache,
				    newCache = [dirruns, doneName];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if (xml) {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							if (matcher(elem, context, xml)) {
								return true;
							}
						}
					}
				} else {
					while (elem = elem[dir]) {
						if (elem.nodeType === 1 || checkNonElements) {
							outerCache = elem[expando] || (elem[expando] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[elem.uniqueID] || (outerCache[elem.uniqueID] = {});

							if (skip && skip === elem.nodeName.toLowerCase()) {
								elem = elem[dir] || elem;
							} else if ((oldCache = uniqueCache[key]) && oldCache[0] === dirruns && oldCache[1] === doneName) {

								// Assign to newCache so results back-propagate to previous elements
								return newCache[2] = oldCache[2];
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[key] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if (newCache[2] = matcher(elem, context, xml)) {
									return true;
								}
							}
						}
					}
				}
				return false;
			};
		}

		function elementMatcher(matchers) {
			return matchers.length > 1 ? function (elem, context, xml) {
				var i = matchers.length;
				while (i--) {
					if (!matchers[i](elem, context, xml)) {
						return false;
					}
				}
				return true;
			} : matchers[0];
		}

		function multipleContexts(selector, contexts, results) {
			var i = 0,
			    len = contexts.length;
			for (; i < len; i++) {
				Sizzle(selector, contexts[i], results);
			}
			return results;
		}

		function condense(unmatched, map, filter, context, xml) {
			var elem,
			    newUnmatched = [],
			    i = 0,
			    len = unmatched.length,
			    mapped = map != null;

			for (; i < len; i++) {
				if (elem = unmatched[i]) {
					if (!filter || filter(elem, context, xml)) {
						newUnmatched.push(elem);
						if (mapped) {
							map.push(i);
						}
					}
				}
			}

			return newUnmatched;
		}

		function setMatcher(preFilter, selector, matcher, postFilter, postFinder, postSelector) {
			if (postFilter && !postFilter[expando]) {
				postFilter = setMatcher(postFilter);
			}
			if (postFinder && !postFinder[expando]) {
				postFinder = setMatcher(postFinder, postSelector);
			}
			return markFunction(function (seed, results, context, xml) {
				var temp,
				    i,
				    elem,
				    preMap = [],
				    postMap = [],
				    preexisting = results.length,


				// Get initial elements from seed or context
				elems = seed || multipleContexts(selector || "*", context.nodeType ? [context] : context, []),


				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && (seed || !selector) ? condense(elems, preMap, preFilter, context, xml) : elems,
				    matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || (seed ? preFilter : preexisting || postFilter) ?

				// ...intermediate processing is necessary
				[] :

				// ...otherwise use results directly
				results : matcherIn;

				// Find primary matches
				if (matcher) {
					matcher(matcherIn, matcherOut, context, xml);
				}

				// Apply postFilter
				if (postFilter) {
					temp = condense(matcherOut, postMap);
					postFilter(temp, [], context, xml);

					// Un-match failing elements by moving them back to matcherIn
					i = temp.length;
					while (i--) {
						if (elem = temp[i]) {
							matcherOut[postMap[i]] = !(matcherIn[postMap[i]] = elem);
						}
					}
				}

				if (seed) {
					if (postFinder || preFilter) {
						if (postFinder) {
							// Get the final matcherOut by condensing this intermediate into postFinder contexts
							temp = [];
							i = matcherOut.length;
							while (i--) {
								if (elem = matcherOut[i]) {
									// Restore matcherIn since elem is not yet a final match
									temp.push(matcherIn[i] = elem);
								}
							}
							postFinder(null, matcherOut = [], temp, xml);
						}

						// Move matched elements from seed to results to keep them synchronized
						i = matcherOut.length;
						while (i--) {
							if ((elem = matcherOut[i]) && (temp = postFinder ? indexOf(seed, elem) : preMap[i]) > -1) {

								seed[temp] = !(results[temp] = elem);
							}
						}
					}

					// Add elements to results, through postFinder if defined
				} else {
					matcherOut = condense(matcherOut === results ? matcherOut.splice(preexisting, matcherOut.length) : matcherOut);
					if (postFinder) {
						postFinder(null, results, matcherOut, xml);
					} else {
						push.apply(results, matcherOut);
					}
				}
			});
		}

		function matcherFromTokens(tokens) {
			var checkContext,
			    matcher,
			    j,
			    len = tokens.length,
			    leadingRelative = Expr.relative[tokens[0].type],
			    implicitRelative = leadingRelative || Expr.relative[" "],
			    i = leadingRelative ? 1 : 0,


			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator(function (elem) {
				return elem === checkContext;
			}, implicitRelative, true),
			    matchAnyContext = addCombinator(function (elem) {
				return indexOf(checkContext, elem) > -1;
			}, implicitRelative, true),
			    matchers = [function (elem, context, xml) {
				var ret = !leadingRelative && (xml || context !== outermostContext) || ((checkContext = context).nodeType ? matchContext(elem, context, xml) : matchAnyContext(elem, context, xml));
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			}];

			for (; i < len; i++) {
				if (matcher = Expr.relative[tokens[i].type]) {
					matchers = [addCombinator(elementMatcher(matchers), matcher)];
				} else {
					matcher = Expr.filter[tokens[i].type].apply(null, tokens[i].matches);

					// Return special upon seeing a positional matcher
					if (matcher[expando]) {
						// Find the next relative operator (if any) for proper handling
						j = ++i;
						for (; j < len; j++) {
							if (Expr.relative[tokens[j].type]) {
								break;
							}
						}
						return setMatcher(i > 1 && elementMatcher(matchers), i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice(0, i - 1).concat({ value: tokens[i - 2].type === " " ? "*" : "" })).replace(rtrim, "$1"), matcher, i < j && matcherFromTokens(tokens.slice(i, j)), j < len && matcherFromTokens(tokens = tokens.slice(j)), j < len && toSelector(tokens));
					}
					matchers.push(matcher);
				}
			}

			return elementMatcher(matchers);
		}

		function matcherFromGroupMatchers(elementMatchers, setMatchers) {
			var bySet = setMatchers.length > 0,
			    byElement = elementMatchers.length > 0,
			    superMatcher = function superMatcher(seed, context, xml, results, outermost) {
				var elem,
				    j,
				    matcher,
				    matchedCount = 0,
				    i = "0",
				    unmatched = seed && [],
				    setMatched = [],
				    contextBackup = outermostContext,

				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]("*", outermost),

				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = dirruns += contextBackup == null ? 1 : Math.random() || 0.1,
				    len = elems.length;

				if (outermost) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for (; i !== len && (elem = elems[i]) != null; i++) {
					if (byElement && elem) {
						j = 0;
						if (!context && elem.ownerDocument !== document) {
							setDocument(elem);
							xml = !documentIsHTML;
						}
						while (matcher = elementMatchers[j++]) {
							if (matcher(elem, context || document, xml)) {
								results.push(elem);
								break;
							}
						}
						if (outermost) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if (bySet) {
						// They will have gone through all possible matchers
						if (elem = !matcher && elem) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if (seed) {
							unmatched.push(elem);
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if (bySet && i !== matchedCount) {
					j = 0;
					while (matcher = setMatchers[j++]) {
						matcher(unmatched, setMatched, context, xml);
					}

					if (seed) {
						// Reintegrate element matches to eliminate the need for sorting
						if (matchedCount > 0) {
							while (i--) {
								if (!(unmatched[i] || setMatched[i])) {
									setMatched[i] = pop.call(results);
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense(setMatched);
					}

					// Add matches to results
					push.apply(results, setMatched);

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if (outermost && !seed && setMatched.length > 0 && matchedCount + setMatchers.length > 1) {

						Sizzle.uniqueSort(results);
					}
				}

				// Override manipulation of globals by nested matchers
				if (outermost) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

			return bySet ? markFunction(superMatcher) : superMatcher;
		}

		compile = Sizzle.compile = function (selector, match /* Internal Use Only */) {
			var i,
			    setMatchers = [],
			    elementMatchers = [],
			    cached = compilerCache[selector + " "];

			if (!cached) {
				// Generate a function of recursive functions that can be used to check each element
				if (!match) {
					match = tokenize(selector);
				}
				i = match.length;
				while (i--) {
					cached = matcherFromTokens(match[i]);
					if (cached[expando]) {
						setMatchers.push(cached);
					} else {
						elementMatchers.push(cached);
					}
				}

				// Cache the compiled function
				cached = compilerCache(selector, matcherFromGroupMatchers(elementMatchers, setMatchers));

				// Save selector and tokenization
				cached.selector = selector;
			}
			return cached;
		};

		/**
   * A low-level selection function that works with Sizzle's compiled
   *  selector functions
   * @param {String|Function} selector A selector or a pre-compiled
   *  selector function built with Sizzle.compile
   * @param {Element} context
   * @param {Array} [results]
   * @param {Array} [seed] A set of elements to match against
   */
		select = Sizzle.select = function (selector, context, results, seed) {
			var i,
			    tokens,
			    token,
			    type,
			    find,
			    compiled = typeof selector === "function" && selector,
			    match = !seed && tokenize(selector = compiled.selector || selector);

			results = results || [];

			// Try to minimize operations if there is only one selector in the list and no seed
			// (the latter of which guarantees us context)
			if (match.length === 1) {

				// Reduce context if the leading compound selector is an ID
				tokens = match[0] = match[0].slice(0);
				if (tokens.length > 2 && (token = tokens[0]).type === "ID" && context.nodeType === 9 && documentIsHTML && Expr.relative[tokens[1].type]) {

					context = (Expr.find["ID"](token.matches[0].replace(runescape, funescape), context) || [])[0];
					if (!context) {
						return results;

						// Precompiled matchers will still verify ancestry, so step up a level
					} else if (compiled) {
						context = context.parentNode;
					}

					selector = selector.slice(tokens.shift().value.length);
				}

				// Fetch a seed set for right-to-left matching
				i = matchExpr["needsContext"].test(selector) ? 0 : tokens.length;
				while (i--) {
					token = tokens[i];

					// Abort if we hit a combinator
					if (Expr.relative[type = token.type]) {
						break;
					}
					if (find = Expr.find[type]) {
						// Search, expanding context for leading sibling combinators
						if (seed = find(token.matches[0].replace(runescape, funescape), rsibling.test(tokens[0].type) && testContext(context.parentNode) || context)) {

							// If seed is empty or no tokens remain, we can return early
							tokens.splice(i, 1);
							selector = seed.length && toSelector(tokens);
							if (!selector) {
								push.apply(results, seed);
								return results;
							}

							break;
						}
					}
				}
			}

			// Compile and execute a filtering function if one is not provided
			// Provide `match` to avoid retokenization if we modified the selector above
			(compiled || compile(selector, match))(seed, context, !documentIsHTML, results, !context || rsibling.test(selector) && testContext(context.parentNode) || context);
			return results;
		};

		// One-time assignments

		// Sort stability
		support.sortStable = expando.split("").sort(sortOrder).join("") === expando;

		// Support: Chrome 14-35+
		// Always assume duplicates if they aren't passed to the comparison function
		support.detectDuplicates = !!hasDuplicate;

		// Initialize against the default document
		setDocument();

		// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
		// Detached nodes confoundingly follow *each other*
		support.sortDetached = assert(function (el) {
			// Should return 1, but returns 4 (following)
			return el.compareDocumentPosition(document.createElement("fieldset")) & 1;
		});

		// Support: IE<8
		// Prevent attribute/property "interpolation"
		// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
		if (!assert(function (el) {
			el.innerHTML = "<a href='#'></a>";
			return el.firstChild.getAttribute("href") === "#";
		})) {
			addHandle("type|href|height|width", function (elem, name, isXML) {
				if (!isXML) {
					return elem.getAttribute(name, name.toLowerCase() === "type" ? 1 : 2);
				}
			});
		}

		// Support: IE<9
		// Use defaultValue in place of getAttribute("value")
		if (!support.attributes || !assert(function (el) {
			el.innerHTML = "<input/>";
			el.firstChild.setAttribute("value", "");
			return el.firstChild.getAttribute("value") === "";
		})) {
			addHandle("value", function (elem, name, isXML) {
				if (!isXML && elem.nodeName.toLowerCase() === "input") {
					return elem.defaultValue;
				}
			});
		}

		// Support: IE<9
		// Use getAttributeNode to fetch booleans when getAttribute lies
		if (!assert(function (el) {
			return el.getAttribute("disabled") == null;
		})) {
			addHandle(booleans, function (elem, name, isXML) {
				var val;
				if (!isXML) {
					return elem[name] === true ? name.toLowerCase() : (val = elem.getAttributeNode(name)) && val.specified ? val.value : null;
				}
			});
		}

		return Sizzle;
	}(window);

	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;

	// Deprecated
	jQuery.expr[":"] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;

	var dir = function dir(elem, _dir, until) {
		var matched = [],
		    truncate = until !== undefined;

		while ((elem = elem[_dir]) && elem.nodeType !== 9) {
			if (elem.nodeType === 1) {
				if (truncate && jQuery(elem).is(until)) {
					break;
				}
				matched.push(elem);
			}
		}
		return matched;
	};

	var _siblings = function _siblings(n, elem) {
		var matched = [];

		for (; n; n = n.nextSibling) {
			if (n.nodeType === 1 && n !== elem) {
				matched.push(n);
			}
		}

		return matched;
	};

	var rneedsContext = jQuery.expr.match.needsContext;

	function nodeName(elem, name) {

		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	};
	var rsingleTag = /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;

	var risSimple = /^.[^:#\[\.,]*$/;

	// Implement the identical functionality for filter and not
	function winnow(elements, qualifier, not) {
		if (jQuery.isFunction(qualifier)) {
			return jQuery.grep(elements, function (elem, i) {
				return !!qualifier.call(elem, i, elem) !== not;
			});
		}

		// Single element
		if (qualifier.nodeType) {
			return jQuery.grep(elements, function (elem) {
				return elem === qualifier !== not;
			});
		}

		// Arraylike of elements (jQuery, arguments, Array)
		if (typeof qualifier !== "string") {
			return jQuery.grep(elements, function (elem) {
				return indexOf.call(qualifier, elem) > -1 !== not;
			});
		}

		// Simple selector that can be filtered directly, removing non-Elements
		if (risSimple.test(qualifier)) {
			return jQuery.filter(qualifier, elements, not);
		}

		// Complex selector, compare the two sets, removing non-Elements
		qualifier = jQuery.filter(qualifier, elements);
		return jQuery.grep(elements, function (elem) {
			return indexOf.call(qualifier, elem) > -1 !== not && elem.nodeType === 1;
		});
	}

	jQuery.filter = function (expr, elems, not) {
		var elem = elems[0];

		if (not) {
			expr = ":not(" + expr + ")";
		}

		if (elems.length === 1 && elem.nodeType === 1) {
			return jQuery.find.matchesSelector(elem, expr) ? [elem] : [];
		}

		return jQuery.find.matches(expr, jQuery.grep(elems, function (elem) {
			return elem.nodeType === 1;
		}));
	};

	jQuery.fn.extend({
		find: function find(selector) {
			var i,
			    ret,
			    len = this.length,
			    self = this;

			if (typeof selector !== "string") {
				return this.pushStack(jQuery(selector).filter(function () {
					for (i = 0; i < len; i++) {
						if (jQuery.contains(self[i], this)) {
							return true;
						}
					}
				}));
			}

			ret = this.pushStack([]);

			for (i = 0; i < len; i++) {
				jQuery.find(selector, self[i], ret);
			}

			return len > 1 ? jQuery.uniqueSort(ret) : ret;
		},
		filter: function filter(selector) {
			return this.pushStack(winnow(this, selector || [], false));
		},
		not: function not(selector) {
			return this.pushStack(winnow(this, selector || [], true));
		},
		is: function is(selector) {
			return !!winnow(this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test(selector) ? jQuery(selector) : selector || [], false).length;
		}
	});

	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,


	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,
	    init = jQuery.fn.init = function (selector, context, root) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if (!selector) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if (typeof selector === "string") {
			if (selector[0] === "<" && selector[selector.length - 1] === ">" && selector.length >= 3) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [null, selector, null];
			} else {
				match = rquickExpr.exec(selector);
			}

			// Match html or make sure no context is specified for #id
			if (match && (match[1] || !context)) {

				// HANDLE: $(html) -> $(array)
				if (match[1]) {
					context = context instanceof jQuery ? context[0] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge(this, jQuery.parseHTML(match[1], context && context.nodeType ? context.ownerDocument || context : document, true));

					// HANDLE: $(html, props)
					if (rsingleTag.test(match[1]) && jQuery.isPlainObject(context)) {
						for (match in context) {

							// Properties of context are called as methods if possible
							if (jQuery.isFunction(this[match])) {
								this[match](context[match]);

								// ...and otherwise set as attributes
							} else {
								this.attr(match, context[match]);
							}
						}
					}

					return this;

					// HANDLE: $(#id)
				} else {
					elem = document.getElementById(match[2]);

					if (elem) {

						// Inject the element directly into the jQuery object
						this[0] = elem;
						this.length = 1;
					}
					return this;
				}

				// HANDLE: $(expr, $(...))
			} else if (!context || context.jquery) {
				return (context || root).find(selector);

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor(context).find(selector);
			}

			// HANDLE: $(DOMElement)
		} else if (selector.nodeType) {
			this[0] = selector;
			this.length = 1;
			return this;

			// HANDLE: $(function)
			// Shortcut for document ready
		} else if (jQuery.isFunction(selector)) {
			return root.ready !== undefined ? root.ready(selector) :

			// Execute immediately if ready is not present
			selector(jQuery);
		}

		return jQuery.makeArray(selector, this);
	};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery(document);

	var rparentsprev = /^(?:parents|prev(?:Until|All))/,


	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

	jQuery.fn.extend({
		has: function has(target) {
			var targets = jQuery(target, this),
			    l = targets.length;

			return this.filter(function () {
				var i = 0;
				for (; i < l; i++) {
					if (jQuery.contains(this, targets[i])) {
						return true;
					}
				}
			});
		},

		closest: function closest(selectors, context) {
			var cur,
			    i = 0,
			    l = this.length,
			    matched = [],
			    targets = typeof selectors !== "string" && jQuery(selectors);

			// Positional selectors never match, since there's no _selection_ context
			if (!rneedsContext.test(selectors)) {
				for (; i < l; i++) {
					for (cur = this[i]; cur && cur !== context; cur = cur.parentNode) {

						// Always skip document fragments
						if (cur.nodeType < 11 && (targets ? targets.index(cur) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 && jQuery.find.matchesSelector(cur, selectors))) {

							matched.push(cur);
							break;
						}
					}
				}
			}

			return this.pushStack(matched.length > 1 ? jQuery.uniqueSort(matched) : matched);
		},

		// Determine the position of an element within the set
		index: function index(elem) {

			// No argument, return index in parent
			if (!elem) {
				return this[0] && this[0].parentNode ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if (typeof elem === "string") {
				return indexOf.call(jQuery(elem), this[0]);
			}

			// Locate the position of the desired element
			return indexOf.call(this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem);
		},

		add: function add(selector, context) {
			return this.pushStack(jQuery.uniqueSort(jQuery.merge(this.get(), jQuery(selector, context))));
		},

		addBack: function addBack(selector) {
			return this.add(selector == null ? this.prevObject : this.prevObject.filter(selector));
		}
	});

	function sibling(cur, dir) {
		while ((cur = cur[dir]) && cur.nodeType !== 1) {}
		return cur;
	}

	jQuery.each({
		parent: function parent(elem) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function parents(elem) {
			return dir(elem, "parentNode");
		},
		parentsUntil: function parentsUntil(elem, i, until) {
			return dir(elem, "parentNode", until);
		},
		next: function next(elem) {
			return sibling(elem, "nextSibling");
		},
		prev: function prev(elem) {
			return sibling(elem, "previousSibling");
		},
		nextAll: function nextAll(elem) {
			return dir(elem, "nextSibling");
		},
		prevAll: function prevAll(elem) {
			return dir(elem, "previousSibling");
		},
		nextUntil: function nextUntil(elem, i, until) {
			return dir(elem, "nextSibling", until);
		},
		prevUntil: function prevUntil(elem, i, until) {
			return dir(elem, "previousSibling", until);
		},
		siblings: function siblings(elem) {
			return _siblings((elem.parentNode || {}).firstChild, elem);
		},
		children: function children(elem) {
			return _siblings(elem.firstChild);
		},
		contents: function contents(elem) {
			if (nodeName(elem, "iframe")) {
				return elem.contentDocument;
			}

			// Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
			// Treat the template element as a regular one in browsers that
			// don't support it.
			if (nodeName(elem, "template")) {
				elem = elem.content || elem;
			}

			return jQuery.merge([], elem.childNodes);
		}
	}, function (name, fn) {
		jQuery.fn[name] = function (until, selector) {
			var matched = jQuery.map(this, fn, until);

			if (name.slice(-5) !== "Until") {
				selector = until;
			}

			if (selector && typeof selector === "string") {
				matched = jQuery.filter(selector, matched);
			}

			if (this.length > 1) {

				// Remove duplicates
				if (!guaranteedUnique[name]) {
					jQuery.uniqueSort(matched);
				}

				// Reverse order for parents* and prev-derivatives
				if (rparentsprev.test(name)) {
					matched.reverse();
				}
			}

			return this.pushStack(matched);
		};
	});
	var rnothtmlwhite = /[^\x20\t\r\n\f]+/g;

	// Convert String-formatted options into Object-formatted ones
	function createOptions(options) {
		var object = {};
		jQuery.each(options.match(rnothtmlwhite) || [], function (_, flag) {
			object[flag] = true;
		});
		return object;
	}

	/*
  * Create a callback list using the following parameters:
  *
  *	options: an optional list of space-separated options that will change how
  *			the callback list behaves or a more traditional option object
  *
  * By default a callback list will act like an event callback list and can be
  * "fired" multiple times.
  *
  * Possible options:
  *
  *	once:			will ensure the callback list can only be fired once (like a Deferred)
  *
  *	memory:			will keep track of previous values and will call any callback added
  *					after the list has been fired right away with the latest "memorized"
  *					values (like a Deferred)
  *
  *	unique:			will ensure a callback can only be added once (no duplicate in the list)
  *
  *	stopOnFalse:	interrupt callings when a callback returns false
  *
  */
	jQuery.Callbacks = function (options) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ? createOptions(options) : jQuery.extend({}, options);

		var // Flag to know if list is currently firing
		firing,


		// Last fire value for non-forgettable lists
		memory,


		// Flag to know if list was already fired
		_fired,


		// Flag to prevent firing
		_locked,


		// Actual callback list
		list = [],


		// Queue of execution data for repeatable lists
		queue = [],


		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,


		// Fire callbacks
		fire = function fire() {

			// Enforce single-firing
			_locked = _locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			_fired = firing = true;
			for (; queue.length; firingIndex = -1) {
				memory = queue.shift();
				while (++firingIndex < list.length) {

					// Run callback and check for early termination
					if (list[firingIndex].apply(memory[0], memory[1]) === false && options.stopOnFalse) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if (!options.memory) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if (_locked) {

				// Keep an empty list if we have data for future add calls
				if (memory) {
					list = [];

					// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},


		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function add() {
				if (list) {

					// If we have memory from a past run, we should fire after adding
					if (memory && !firing) {
						firingIndex = list.length - 1;
						queue.push(memory);
					}

					(function add(args) {
						jQuery.each(args, function (_, arg) {
							if (jQuery.isFunction(arg)) {
								if (!options.unique || !self.has(arg)) {
									list.push(arg);
								}
							} else if (arg && arg.length && jQuery.type(arg) !== "string") {

								// Inspect recursively
								add(arg);
							}
						});
					})(arguments);

					if (memory && !firing) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function remove() {
				jQuery.each(arguments, function (_, arg) {
					var index;
					while ((index = jQuery.inArray(arg, list, index)) > -1) {
						list.splice(index, 1);

						// Handle firing indexes
						if (index <= firingIndex) {
							firingIndex--;
						}
					}
				});
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function has(fn) {
				return fn ? jQuery.inArray(fn, list) > -1 : list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function empty() {
				if (list) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function disable() {
				_locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function disabled() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function lock() {
				_locked = queue = [];
				if (!memory && !firing) {
					list = memory = "";
				}
				return this;
			},
			locked: function locked() {
				return !!_locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function fireWith(context, args) {
				if (!_locked) {
					args = args || [];
					args = [context, args.slice ? args.slice() : args];
					queue.push(args);
					if (!firing) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function fire() {
				self.fireWith(this, arguments);
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function fired() {
				return !!_fired;
			}
		};

		return self;
	};

	function Identity(v) {
		return v;
	}
	function Thrower(ex) {
		throw ex;
	}

	function adoptValue(value, resolve, reject, noValue) {
		var method;

		try {

			// Check for promise aspect first to privilege synchronous behavior
			if (value && jQuery.isFunction(method = value.promise)) {
				method.call(value).done(resolve).fail(reject);

				// Other thenables
			} else if (value && jQuery.isFunction(method = value.then)) {
				method.call(value, resolve, reject);

				// Other non-thenables
			} else {

				// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
				// * false: [ value ].slice( 0 ) => resolve( value )
				// * true: [ value ].slice( 1 ) => resolve()
				resolve.apply(undefined, [value].slice(noValue));
			}

			// For Promises/A+, convert exceptions into rejections
			// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
			// Deferred#then to conditionally suppress rejection.
		} catch (value) {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.apply(undefined, [value]);
		}
	}

	jQuery.extend({

		Deferred: function Deferred(func) {
			var tuples = [

			// action, add listener, callbacks,
			// ... .then handlers, argument index, [final state]
			["notify", "progress", jQuery.Callbacks("memory"), jQuery.Callbacks("memory"), 2], ["resolve", "done", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 0, "resolved"], ["reject", "fail", jQuery.Callbacks("once memory"), jQuery.Callbacks("once memory"), 1, "rejected"]],
			    _state = "pending",
			    _promise = {
				state: function state() {
					return _state;
				},
				always: function always() {
					deferred.done(arguments).fail(arguments);
					return this;
				},
				"catch": function _catch(fn) {
					return _promise.then(null, fn);
				},

				// Keep pipe for back-compat
				pipe: function pipe() /* fnDone, fnFail, fnProgress */{
					var fns = arguments;

					return jQuery.Deferred(function (newDefer) {
						jQuery.each(tuples, function (i, tuple) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = jQuery.isFunction(fns[tuple[4]]) && fns[tuple[4]];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[tuple[1]](function () {
								var returned = fn && fn.apply(this, arguments);
								if (returned && jQuery.isFunction(returned.promise)) {
									returned.promise().progress(newDefer.notify).done(newDefer.resolve).fail(newDefer.reject);
								} else {
									newDefer[tuple[0] + "With"](this, fn ? [returned] : arguments);
								}
							});
						});
						fns = null;
					}).promise();
				},
				then: function then(onFulfilled, onRejected, onProgress) {
					var maxDepth = 0;
					function resolve(depth, deferred, handler, special) {
						return function () {
							var that = this,
							    args = arguments,
							    mightThrow = function mightThrow() {
								var returned, then;

								// Support: Promises/A+ section 2.3.3.3.3
								// https://promisesaplus.com/#point-59
								// Ignore double-resolution attempts
								if (depth < maxDepth) {
									return;
								}

								returned = handler.apply(that, args);

								// Support: Promises/A+ section 2.3.1
								// https://promisesaplus.com/#point-48
								if (returned === deferred.promise()) {
									throw new TypeError("Thenable self-resolution");
								}

								// Support: Promises/A+ sections 2.3.3.1, 3.5
								// https://promisesaplus.com/#point-54
								// https://promisesaplus.com/#point-75
								// Retrieve `then` only once
								then = returned && (

								// Support: Promises/A+ section 2.3.4
								// https://promisesaplus.com/#point-64
								// Only check objects and functions for thenability
								(typeof returned === "undefined" ? "undefined" : _typeof(returned)) === "object" || typeof returned === "function") && returned.then;

								// Handle a returned thenable
								if (jQuery.isFunction(then)) {

									// Special processors (notify) just wait for resolution
									if (special) {
										then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special));

										// Normal processors (resolve) also hook into progress
									} else {

										// ...and disregard older resolution values
										maxDepth++;

										then.call(returned, resolve(maxDepth, deferred, Identity, special), resolve(maxDepth, deferred, Thrower, special), resolve(maxDepth, deferred, Identity, deferred.notifyWith));
									}

									// Handle all other returned values
								} else {

									// Only substitute handlers pass on context
									// and multiple values (non-spec behavior)
									if (handler !== Identity) {
										that = undefined;
										args = [returned];
									}

									// Process the value(s)
									// Default process is resolve
									(special || deferred.resolveWith)(that, args);
								}
							},


							// Only normal processors (resolve) catch and reject exceptions
							process = special ? mightThrow : function () {
								try {
									mightThrow();
								} catch (e) {

									if (jQuery.Deferred.exceptionHook) {
										jQuery.Deferred.exceptionHook(e, process.stackTrace);
									}

									// Support: Promises/A+ section 2.3.3.3.4.1
									// https://promisesaplus.com/#point-61
									// Ignore post-resolution exceptions
									if (depth + 1 >= maxDepth) {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if (handler !== Thrower) {
											that = undefined;
											args = [e];
										}

										deferred.rejectWith(that, args);
									}
								}
							};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if (depth) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if (jQuery.Deferred.getStackHook) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout(process);
							}
						};
					}

					return jQuery.Deferred(function (newDefer) {

						// progress_handlers.add( ... )
						tuples[0][3].add(resolve(0, newDefer, jQuery.isFunction(onProgress) ? onProgress : Identity, newDefer.notifyWith));

						// fulfilled_handlers.add( ... )
						tuples[1][3].add(resolve(0, newDefer, jQuery.isFunction(onFulfilled) ? onFulfilled : Identity));

						// rejected_handlers.add( ... )
						tuples[2][3].add(resolve(0, newDefer, jQuery.isFunction(onRejected) ? onRejected : Thrower));
					}).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function promise(obj) {
					return obj != null ? jQuery.extend(obj, _promise) : _promise;
				}
			},
			    deferred = {};

			// Add list-specific methods
			jQuery.each(tuples, function (i, tuple) {
				var list = tuple[2],
				    stateString = tuple[5];

				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				_promise[tuple[1]] = list.add;

				// Handle state
				if (stateString) {
					list.add(function () {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						_state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[3 - i][2].disable,

					// progress_callbacks.lock
					tuples[0][2].lock);
				}

				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add(tuple[3].fire);

				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[tuple[0]] = function () {
					deferred[tuple[0] + "With"](this === deferred ? undefined : this, arguments);
					return this;
				};

				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[tuple[0] + "With"] = list.fireWith;
			});

			// Make the deferred a promise
			_promise.promise(deferred);

			// Call given func if any
			if (func) {
				func.call(deferred, deferred);
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function when(singleValue) {
			var

			// count of uncompleted subordinates
			remaining = arguments.length,


			// count of unprocessed arguments
			i = remaining,


			// subordinate fulfillment data
			resolveContexts = Array(i),
			    resolveValues = _slice.call(arguments),


			// the master Deferred
			master = jQuery.Deferred(),


			// subordinate callback factory
			updateFunc = function updateFunc(i) {
				return function (value) {
					resolveContexts[i] = this;
					resolveValues[i] = arguments.length > 1 ? _slice.call(arguments) : value;
					if (! --remaining) {
						master.resolveWith(resolveContexts, resolveValues);
					}
				};
			};

			// Single- and empty arguments are adopted like Promise.resolve
			if (remaining <= 1) {
				adoptValue(singleValue, master.done(updateFunc(i)).resolve, master.reject, !remaining);

				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if (master.state() === "pending" || jQuery.isFunction(resolveValues[i] && resolveValues[i].then)) {

					return master.then();
				}
			}

			// Multiple arguments are aggregated like Promise.all array elements
			while (i--) {
				adoptValue(resolveValues[i], updateFunc(i), master.reject);
			}

			return master.promise();
		}
	});

	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

	jQuery.Deferred.exceptionHook = function (error, stack) {

		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
			window.console.warn("jQuery.Deferred exception: " + error.message, error.stack, stack);
		}
	};

	jQuery.readyException = function (error) {
		window.setTimeout(function () {
			throw error;
		});
	};

	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();

	jQuery.fn.ready = function (fn) {

		readyList.then(fn)

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch(function (error) {
			jQuery.readyException(error);
		});

		return this;
	};

	jQuery.extend({

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Handle when the DOM is ready
		ready: function ready(wait) {

			// Abort if there are pending holds or we're already ready
			if (wait === true ? --jQuery.readyWait : jQuery.isReady) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if (wait !== true && --jQuery.readyWait > 0) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith(document, [jQuery]);
		}
	});

	jQuery.ready.then = readyList.then;

	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener("DOMContentLoaded", completed);
		window.removeEventListener("load", completed);
		jQuery.ready();
	}

	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if (document.readyState === "complete" || document.readyState !== "loading" && !document.documentElement.doScroll) {

		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout(jQuery.ready);
	} else {

		// Use the handy event callback
		document.addEventListener("DOMContentLoaded", completed);

		// A fallback to window.onload, that will always work
		window.addEventListener("load", completed);
	}

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function access(elems, fn, key, value, chainable, emptyGet, raw) {
		var i = 0,
		    len = elems.length,
		    bulk = key == null;

		// Sets many values
		if (jQuery.type(key) === "object") {
			chainable = true;
			for (i in key) {
				access(elems, fn, i, key[i], true, emptyGet, raw);
			}

			// Sets one value
		} else if (value !== undefined) {
			chainable = true;

			if (!jQuery.isFunction(value)) {
				raw = true;
			}

			if (bulk) {

				// Bulk operations run against the entire set
				if (raw) {
					fn.call(elems, value);
					fn = null;

					// ...except when executing function values
				} else {
					bulk = fn;
					fn = function fn(elem, key, value) {
						return bulk.call(jQuery(elem), value);
					};
				}
			}

			if (fn) {
				for (; i < len; i++) {
					fn(elems[i], key, raw ? value : value.call(elems[i], i, fn(elems[i], key)));
				}
			}
		}

		if (chainable) {
			return elems;
		}

		// Gets
		if (bulk) {
			return fn.call(elems);
		}

		return len ? fn(elems[0], key) : emptyGet;
	};
	var acceptData = function acceptData(owner) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !+owner.nodeType;
	};

	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		cache: function cache(owner) {

			// Check if the owner object already has a cache
			var value = owner[this.expando];

			// If not, create one
			if (!value) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if (acceptData(owner)) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if (owner.nodeType) {
						owner[this.expando] = value;

						// Otherwise secure it in a non-enumerable property
						// configurable must be true to allow the property to be
						// deleted when data is removed
					} else {
						Object.defineProperty(owner, this.expando, {
							value: value,
							configurable: true
						});
					}
				}
			}

			return value;
		},
		set: function set(owner, data, value) {
			var prop,
			    cache = this.cache(owner);

			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if (typeof data === "string") {
				cache[jQuery.camelCase(data)] = value;

				// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for (prop in data) {
					cache[jQuery.camelCase(prop)] = data[prop];
				}
			}
			return cache;
		},
		get: function get(owner, key) {
			return key === undefined ? this.cache(owner) :

			// Always use camelCase key (gh-2257)
			owner[this.expando] && owner[this.expando][jQuery.camelCase(key)];
		},
		access: function access(owner, key, value) {

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if (key === undefined || key && typeof key === "string" && value === undefined) {

				return this.get(owner, key);
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set(owner, key, value);

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function remove(owner, key) {
			var i,
			    cache = owner[this.expando];

			if (cache === undefined) {
				return;
			}

			if (key !== undefined) {

				// Support array or space separated string of keys
				if (Array.isArray(key)) {

					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map(jQuery.camelCase);
				} else {
					key = jQuery.camelCase(key);

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ? [key] : key.match(rnothtmlwhite) || [];
				}

				i = key.length;

				while (i--) {
					delete cache[key[i]];
				}
			}

			// Remove the expando if there's no more data
			if (key === undefined || jQuery.isEmptyObject(cache)) {

				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if (owner.nodeType) {
					owner[this.expando] = undefined;
				} else {
					delete owner[this.expando];
				}
			}
		},
		hasData: function hasData(owner) {
			var cache = owner[this.expando];
			return cache !== undefined && !jQuery.isEmptyObject(cache);
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();

	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	    rmultiDash = /[A-Z]/g;

	function getData(data) {
		if (data === "true") {
			return true;
		}

		if (data === "false") {
			return false;
		}

		if (data === "null") {
			return null;
		}

		// Only convert to a number if it doesn't change the string
		if (data === +data + "") {
			return +data;
		}

		if (rbrace.test(data)) {
			return JSON.parse(data);
		}

		return data;
	}

	function dataAttr(elem, key, data) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if (data === undefined && elem.nodeType === 1) {
			name = "data-" + key.replace(rmultiDash, "-$&").toLowerCase();
			data = elem.getAttribute(name);

			if (typeof data === "string") {
				try {
					data = getData(data);
				} catch (e) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set(elem, key, data);
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend({
		hasData: function hasData(elem) {
			return dataUser.hasData(elem) || dataPriv.hasData(elem);
		},

		data: function data(elem, name, _data) {
			return dataUser.access(elem, name, _data);
		},

		removeData: function removeData(elem, name) {
			dataUser.remove(elem, name);
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function _data(elem, name, data) {
			return dataPriv.access(elem, name, data);
		},

		_removeData: function _removeData(elem, name) {
			dataPriv.remove(elem, name);
		}
	});

	jQuery.fn.extend({
		data: function data(key, value) {
			var i,
			    name,
			    data,
			    elem = this[0],
			    attrs = elem && elem.attributes;

			// Gets all values
			if (key === undefined) {
				if (this.length) {
					data = dataUser.get(elem);

					if (elem.nodeType === 1 && !dataPriv.get(elem, "hasDataAttrs")) {
						i = attrs.length;
						while (i--) {

							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if (attrs[i]) {
								name = attrs[i].name;
								if (name.indexOf("data-") === 0) {
									name = jQuery.camelCase(name.slice(5));
									dataAttr(elem, name, data[name]);
								}
							}
						}
						dataPriv.set(elem, "hasDataAttrs", true);
					}
				}

				return data;
			}

			// Sets multiple values
			if ((typeof key === "undefined" ? "undefined" : _typeof(key)) === "object") {
				return this.each(function () {
					dataUser.set(this, key);
				});
			}

			return access(this, function (value) {
				var data;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if (elem && value === undefined) {

					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get(elem, key);
					if (data !== undefined) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr(elem, key);
					if (data !== undefined) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each(function () {

					// We always store the camelCased key
					dataUser.set(this, key, value);
				});
			}, null, value, arguments.length > 1, null, true);
		},

		removeData: function removeData(key) {
			return this.each(function () {
				dataUser.remove(this, key);
			});
		}
	});

	jQuery.extend({
		queue: function queue(elem, type, data) {
			var queue;

			if (elem) {
				type = (type || "fx") + "queue";
				queue = dataPriv.get(elem, type);

				// Speed up dequeue by getting out quickly if this is just a lookup
				if (data) {
					if (!queue || Array.isArray(data)) {
						queue = dataPriv.access(elem, type, jQuery.makeArray(data));
					} else {
						queue.push(data);
					}
				}
				return queue || [];
			}
		},

		dequeue: function dequeue(elem, type) {
			type = type || "fx";

			var queue = jQuery.queue(elem, type),
			    startLength = queue.length,
			    fn = queue.shift(),
			    hooks = jQuery._queueHooks(elem, type),
			    next = function next() {
				jQuery.dequeue(elem, type);
			};

			// If the fx queue is dequeued, always remove the progress sentinel
			if (fn === "inprogress") {
				fn = queue.shift();
				startLength--;
			}

			if (fn) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if (type === "fx") {
					queue.unshift("inprogress");
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call(elem, next, hooks);
			}

			if (!startLength && hooks) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function _queueHooks(elem, type) {
			var key = type + "queueHooks";
			return dataPriv.get(elem, key) || dataPriv.access(elem, key, {
				empty: jQuery.Callbacks("once memory").add(function () {
					dataPriv.remove(elem, [type + "queue", key]);
				})
			});
		}
	});

	jQuery.fn.extend({
		queue: function queue(type, data) {
			var setter = 2;

			if (typeof type !== "string") {
				data = type;
				type = "fx";
				setter--;
			}

			if (arguments.length < setter) {
				return jQuery.queue(this[0], type);
			}

			return data === undefined ? this : this.each(function () {
				var queue = jQuery.queue(this, type, data);

				// Ensure a hooks for this queue
				jQuery._queueHooks(this, type);

				if (type === "fx" && queue[0] !== "inprogress") {
					jQuery.dequeue(this, type);
				}
			});
		},
		dequeue: function dequeue(type) {
			return this.each(function () {
				jQuery.dequeue(this, type);
			});
		},
		clearQueue: function clearQueue(type) {
			return this.queue(type || "fx", []);
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function promise(type, obj) {
			var tmp,
			    count = 1,
			    defer = jQuery.Deferred(),
			    elements = this,
			    i = this.length,
			    resolve = function resolve() {
				if (! --count) {
					defer.resolveWith(elements, [elements]);
				}
			};

			if (typeof type !== "string") {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while (i--) {
				tmp = dataPriv.get(elements[i], type + "queueHooks");
				if (tmp && tmp.empty) {
					count++;
					tmp.empty.add(resolve);
				}
			}
			resolve();
			return defer.promise(obj);
		}
	});
	var pnum = /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source;

	var rcssNum = new RegExp("^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i");

	var cssExpand = ["Top", "Right", "Bottom", "Left"];

	var isHiddenWithinTree = function isHiddenWithinTree(elem, el) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" || elem.style.display === "" &&

		// Otherwise, check computed style
		// Support: Firefox <=43 - 45
		// Disconnected elements can have computed display: none, so first confirm that elem is
		// in the document.
		jQuery.contains(elem.ownerDocument, elem) && jQuery.css(elem, "display") === "none";
	};

	var swap = function swap(elem, options, callback, args) {
		var ret,
		    name,
		    old = {};

		// Remember the old values, and insert the new ones
		for (name in options) {
			old[name] = elem.style[name];
			elem.style[name] = options[name];
		}

		ret = callback.apply(elem, args || []);

		// Revert the old values
		for (name in options) {
			elem.style[name] = old[name];
		}

		return ret;
	};

	function adjustCSS(elem, prop, valueParts, tween) {
		var adjusted,
		    scale = 1,
		    maxIterations = 20,
		    currentValue = tween ? function () {
			return tween.cur();
		} : function () {
			return jQuery.css(elem, prop, "");
		},
		    initial = currentValue(),
		    unit = valueParts && valueParts[3] || (jQuery.cssNumber[prop] ? "" : "px"),


		// Starting value computation is required for potential unit mismatches
		initialInUnit = (jQuery.cssNumber[prop] || unit !== "px" && +initial) && rcssNum.exec(jQuery.css(elem, prop));

		if (initialInUnit && initialInUnit[3] !== unit) {

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[3];

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			do {

				// If previous iteration zeroed out, double until we get *something*.
				// Use string for doubling so we don't accidentally see scale as unchanged below
				scale = scale || ".5";

				// Adjust and apply
				initialInUnit = initialInUnit / scale;
				jQuery.style(elem, prop, initialInUnit + unit);

				// Update scale, tolerating zero or NaN from tween.cur()
				// Break the loop if scale is unchanged or perfect, or if we've just had enough.
			} while (scale !== (scale = currentValue() / initial) && scale !== 1 && --maxIterations);
		}

		if (valueParts) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[1] ? initialInUnit + (valueParts[1] + 1) * valueParts[2] : +valueParts[2];
			if (tween) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}

	var defaultDisplayMap = {};

	function getDefaultDisplay(elem) {
		var temp,
		    doc = elem.ownerDocument,
		    nodeName = elem.nodeName,
		    display = defaultDisplayMap[nodeName];

		if (display) {
			return display;
		}

		temp = doc.body.appendChild(doc.createElement(nodeName));
		display = jQuery.css(temp, "display");

		temp.parentNode.removeChild(temp);

		if (display === "none") {
			display = "block";
		}
		defaultDisplayMap[nodeName] = display;

		return display;
	}

	function showHide(elements, show) {
		var display,
		    elem,
		    values = [],
		    index = 0,
		    length = elements.length;

		// Determine new display value for elements that need to change
		for (; index < length; index++) {
			elem = elements[index];
			if (!elem.style) {
				continue;
			}

			display = elem.style.display;
			if (show) {

				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if (display === "none") {
					values[index] = dataPriv.get(elem, "display") || null;
					if (!values[index]) {
						elem.style.display = "";
					}
				}
				if (elem.style.display === "" && isHiddenWithinTree(elem)) {
					values[index] = getDefaultDisplay(elem);
				}
			} else {
				if (display !== "none") {
					values[index] = "none";

					// Remember what we're overwriting
					dataPriv.set(elem, "display", display);
				}
			}
		}

		// Set the display of the elements in a second loop to avoid constant reflow
		for (index = 0; index < length; index++) {
			if (values[index] != null) {
				elements[index].style.display = values[index];
			}
		}

		return elements;
	}

	jQuery.fn.extend({
		show: function show() {
			return showHide(this, true);
		},
		hide: function hide() {
			return showHide(this);
		},
		toggle: function toggle(state) {
			if (typeof state === "boolean") {
				return state ? this.show() : this.hide();
			}

			return this.each(function () {
				if (isHiddenWithinTree(this)) {
					jQuery(this).show();
				} else {
					jQuery(this).hide();
				}
			});
		}
	});
	var rcheckableType = /^(?:checkbox|radio)$/i;

	var rtagName = /<([a-z][^\/\0>\x20\t\r\n\f]+)/i;

	var rscriptType = /^$|\/(?:java|ecma)script/i;

	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE <=9 only
		option: [1, "<select multiple='multiple'>", "</select>"],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [1, "<table>", "</table>"],
		col: [2, "<table><colgroup>", "</colgroup></table>"],
		tr: [2, "<table><tbody>", "</tbody></table>"],
		td: [3, "<table><tbody><tr>", "</tr></tbody></table>"],

		_default: [0, "", ""]
	};

	// Support: IE <=9 only
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;

	function getAll(context, tag) {

		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret;

		if (typeof context.getElementsByTagName !== "undefined") {
			ret = context.getElementsByTagName(tag || "*");
		} else if (typeof context.querySelectorAll !== "undefined") {
			ret = context.querySelectorAll(tag || "*");
		} else {
			ret = [];
		}

		if (tag === undefined || tag && nodeName(context, tag)) {
			return jQuery.merge([context], ret);
		}

		return ret;
	}

	// Mark scripts as having already been evaluated
	function setGlobalEval(elems, refElements) {
		var i = 0,
		    l = elems.length;

		for (; i < l; i++) {
			dataPriv.set(elems[i], "globalEval", !refElements || dataPriv.get(refElements[i], "globalEval"));
		}
	}

	var rhtml = /<|&#?\w+;/;

	function buildFragment(elems, context, scripts, selection, ignored) {
		var elem,
		    tmp,
		    tag,
		    wrap,
		    contains,
		    j,
		    fragment = context.createDocumentFragment(),
		    nodes = [],
		    i = 0,
		    l = elems.length;

		for (; i < l; i++) {
			elem = elems[i];

			if (elem || elem === 0) {

				// Add nodes directly
				if (jQuery.type(elem) === "object") {

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge(nodes, elem.nodeType ? [elem] : elem);

					// Convert non-html into a text node
				} else if (!rhtml.test(elem)) {
					nodes.push(context.createTextNode(elem));

					// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild(context.createElement("div"));

					// Deserialize a standard representation
					tag = (rtagName.exec(elem) || ["", ""])[1].toLowerCase();
					wrap = wrapMap[tag] || wrapMap._default;
					tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

					// Descend through wrappers to the right content
					j = wrap[0];
					while (j--) {
						tmp = tmp.lastChild;
					}

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge(nodes, tmp.childNodes);

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while (elem = nodes[i++]) {

			// Skip elements already in the context collection (trac-4087)
			if (selection && jQuery.inArray(elem, selection) > -1) {
				if (ignored) {
					ignored.push(elem);
				}
				continue;
			}

			contains = jQuery.contains(elem.ownerDocument, elem);

			// Append to fragment
			tmp = getAll(fragment.appendChild(elem), "script");

			// Preserve script evaluation history
			if (contains) {
				setGlobalEval(tmp);
			}

			// Capture executables
			if (scripts) {
				j = 0;
				while (elem = tmp[j++]) {
					if (rscriptType.test(elem.type || "")) {
						scripts.push(elem);
					}
				}
			}
		}

		return fragment;
	}

	(function () {
		var fragment = document.createDocumentFragment(),
		    div = fragment.appendChild(document.createElement("div")),
		    input = document.createElement("input");

		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute("type", "radio");
		input.setAttribute("checked", "checked");
		input.setAttribute("name", "t");

		div.appendChild(input);

		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode(true).lastChild.defaultValue;
	})();
	var documentElement = document.documentElement;

	var rkeyEvent = /^key/,
	    rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	    rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE <=9 only
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch (err) {}
	}

	function _on(elem, types, selector, data, fn, one) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {

			// ( types-Object, selector, data )
			if (typeof selector !== "string") {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for (type in types) {
				_on(elem, type, selector, data, types[type], one);
			}
			return elem;
		}

		if (data == null && fn == null) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if (fn == null) {
			if (typeof selector === "string") {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if (fn === false) {
			fn = returnFalse;
		} else if (!fn) {
			return elem;
		}

		if (one === 1) {
			origFn = fn;
			fn = function fn(event) {

				// Can use an empty set, since event contains the info
				jQuery().off(event);
				return origFn.apply(this, arguments);
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || (origFn.guid = jQuery.guid++);
		}
		return elem.each(function () {
			jQuery.event.add(this, types, fn, data, selector);
		});
	}

	/*
  * Helper functions for managing events -- not part of the public interface.
  * Props to Dean Edwards' addEvent library for many of the ideas.
  */
	jQuery.event = {

		global: {},

		add: function add(elem, types, handler, data, selector) {

			var handleObjIn,
			    eventHandle,
			    tmp,
			    events,
			    t,
			    handleObj,
			    special,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = dataPriv.get(elem);

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if (!elemData) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if (handler.handler) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if (selector) {
				jQuery.find.matchesSelector(documentElement, selector);
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if (!handler.guid) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if (!(events = elemData.events)) {
				events = elemData.events = {};
			}
			if (!(eventHandle = elemData.handle)) {
				eventHandle = elemData.handle = function (e) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ? jQuery.event.dispatch.apply(elem, arguments) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = (types || "").match(rnothtmlwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				// There *must* be a type, no attaching namespace-only handlers
				if (!type) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[type] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = (selector ? special.delegateType : special.bindType) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[type] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend({
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test(selector),
					namespace: namespaces.join(".")
				}, handleObjIn);

				// Init the event handler queue if we're the first
				if (!(handlers = events[type])) {
					handlers = events[type] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if (!special.setup || special.setup.call(elem, data, namespaces, eventHandle) === false) {

						if (elem.addEventListener) {
							elem.addEventListener(type, eventHandle);
						}
					}
				}

				if (special.add) {
					special.add.call(elem, handleObj);

					if (!handleObj.handler.guid) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if (selector) {
					handlers.splice(handlers.delegateCount++, 0, handleObj);
				} else {
					handlers.push(handleObj);
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[type] = true;
			}
		},

		// Detach an event or set of events from an element
		remove: function remove(elem, types, handler, selector, mappedTypes) {

			var j,
			    origCount,
			    tmp,
			    events,
			    t,
			    handleObj,
			    special,
			    handlers,
			    type,
			    namespaces,
			    origType,
			    elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

			if (!elemData || !(events = elemData.events)) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = (types || "").match(rnothtmlwhite) || [""];
			t = types.length;
			while (t--) {
				tmp = rtypenamespace.exec(types[t]) || [];
				type = origType = tmp[1];
				namespaces = (tmp[2] || "").split(".").sort();

				// Unbind all events (on this namespace, if provided) for the element
				if (!type) {
					for (type in events) {
						jQuery.event.remove(elem, type + types[t], handler, selector, true);
					}
					continue;
				}

				special = jQuery.event.special[type] || {};
				type = (selector ? special.delegateType : special.bindType) || type;
				handlers = events[type] || [];
				tmp = tmp[2] && new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)");

				// Remove matching events
				origCount = j = handlers.length;
				while (j--) {
					handleObj = handlers[j];

					if ((mappedTypes || origType === handleObj.origType) && (!handler || handler.guid === handleObj.guid) && (!tmp || tmp.test(handleObj.namespace)) && (!selector || selector === handleObj.selector || selector === "**" && handleObj.selector)) {
						handlers.splice(j, 1);

						if (handleObj.selector) {
							handlers.delegateCount--;
						}
						if (special.remove) {
							special.remove.call(elem, handleObj);
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if (origCount && !handlers.length) {
					if (!special.teardown || special.teardown.call(elem, namespaces, elemData.handle) === false) {

						jQuery.removeEvent(elem, type, elemData.handle);
					}

					delete events[type];
				}
			}

			// Remove data and the expando if it's no longer used
			if (jQuery.isEmptyObject(events)) {
				dataPriv.remove(elem, "handle events");
			}
		},

		dispatch: function dispatch(nativeEvent) {

			// Make a writable jQuery.Event from the native event object
			var event = jQuery.event.fix(nativeEvent);

			var i,
			    j,
			    ret,
			    matched,
			    handleObj,
			    handlerQueue,
			    args = new Array(arguments.length),
			    handlers = (dataPriv.get(this, "events") || {})[event.type] || [],
			    special = jQuery.event.special[event.type] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[0] = event;

			for (i = 1; i < arguments.length; i++) {
				args[i] = arguments[i];
			}

			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if (special.preDispatch && special.preDispatch.call(this, event) === false) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call(this, event, handlers);

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ((matched = handlerQueue[i++]) && !event.isPropagationStopped()) {
				event.currentTarget = matched.elem;

				j = 0;
				while ((handleObj = matched.handlers[j++]) && !event.isImmediatePropagationStopped()) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if (!event.rnamespace || event.rnamespace.test(handleObj.namespace)) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ((jQuery.event.special[handleObj.origType] || {}).handle || handleObj.handler).apply(matched.elem, args);

						if (ret !== undefined) {
							if ((event.result = ret) === false) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if (special.postDispatch) {
				special.postDispatch.call(this, event);
			}

			return event.result;
		},

		handlers: function handlers(event, _handlers) {
			var i,
			    handleObj,
			    sel,
			    matchedHandlers,
			    matchedSelectors,
			    handlerQueue = [],
			    delegateCount = _handlers.delegateCount,
			    cur = event.target;

			// Find delegate handlers
			if (delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!(event.type === "click" && event.button >= 1)) {

				for (; cur !== this; cur = cur.parentNode || this) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if (cur.nodeType === 1 && !(event.type === "click" && cur.disabled === true)) {
						matchedHandlers = [];
						matchedSelectors = {};
						for (i = 0; i < delegateCount; i++) {
							handleObj = _handlers[i];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if (matchedSelectors[sel] === undefined) {
								matchedSelectors[sel] = handleObj.needsContext ? jQuery(sel, this).index(cur) > -1 : jQuery.find(sel, this, null, [cur]).length;
							}
							if (matchedSelectors[sel]) {
								matchedHandlers.push(handleObj);
							}
						}
						if (matchedHandlers.length) {
							handlerQueue.push({ elem: cur, handlers: matchedHandlers });
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			cur = this;
			if (delegateCount < _handlers.length) {
				handlerQueue.push({ elem: cur, handlers: _handlers.slice(delegateCount) });
			}

			return handlerQueue;
		},

		addProp: function addProp(name, hook) {
			Object.defineProperty(jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,

				get: jQuery.isFunction(hook) ? function () {
					if (this.originalEvent) {
						return hook(this.originalEvent);
					}
				} : function () {
					if (this.originalEvent) {
						return this.originalEvent[name];
					}
				},

				set: function set(value) {
					Object.defineProperty(this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					});
				}
			});
		},

		fix: function fix(originalEvent) {
			return originalEvent[jQuery.expando] ? originalEvent : new jQuery.Event(originalEvent);
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function trigger() {
					if (this !== safeActiveElement() && this.focus) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function trigger() {
					if (this === safeActiveElement() && this.blur) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function trigger() {
					if (this.type === "checkbox" && this.click && nodeName(this, "input")) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function _default(event) {
					return nodeName(event.target, "a");
				}
			},

			beforeunload: {
				postDispatch: function postDispatch(event) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if (event.result !== undefined && event.originalEvent) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function (elem, type, handle) {

		// This "if" is needed for plain objects
		if (elem.removeEventListener) {
			elem.removeEventListener(type, handle);
		}
	};

	jQuery.Event = function (src, props) {

		// Allow instantiation without the 'new' keyword
		if (!(this instanceof jQuery.Event)) {
			return new jQuery.Event(src, props);
		}

		// Event object
		if (src && src.type) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented || src.defaultPrevented === undefined &&

			// Support: Android <=2.3 only
			src.returnValue === false ? returnTrue : returnFalse;

			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = src.target && src.target.nodeType === 3 ? src.target.parentNode : src.target;

			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;

			// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if (props) {
			jQuery.extend(this, props);
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || jQuery.now();

		// Mark it as fixed
		this[jQuery.expando] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,

		preventDefault: function preventDefault() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if (e && !this.isSimulated) {
				e.preventDefault();
			}
		},
		stopPropagation: function stopPropagation() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if (e && !this.isSimulated) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function stopImmediatePropagation() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if (e && !this.isSimulated) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each({
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,

		which: function which(event) {
			var button = event.button;

			// Add which for key events
			if (event.which == null && rkeyEvent.test(event.type)) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			if (!event.which && button !== undefined && rmouseEvent.test(event.type)) {
				if (button & 1) {
					return 1;
				}

				if (button & 2) {
					return 3;
				}

				if (button & 4) {
					return 2;
				}

				return 0;
			}

			return event.which;
		}
	}, jQuery.event.addProp);

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each({
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function (orig, fix) {
		jQuery.event.special[orig] = {
			delegateType: fix,
			bindType: fix,

			handle: function handle(event) {
				var ret,
				    target = this,
				    related = event.relatedTarget,
				    handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if (!related || related !== target && !jQuery.contains(target, related)) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply(this, arguments);
					event.type = fix;
				}
				return ret;
			}
		};
	});

	jQuery.fn.extend({

		on: function on(types, selector, data, fn) {
			return _on(this, types, selector, data, fn);
		},
		one: function one(types, selector, data, fn) {
			return _on(this, types, selector, data, fn, 1);
		},
		off: function off(types, selector, fn) {
			var handleObj, type;
			if (types && types.preventDefault && types.handleObj) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery(types.delegateTarget).off(handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType, handleObj.selector, handleObj.handler);
				return this;
			}
			if ((typeof types === "undefined" ? "undefined" : _typeof(types)) === "object") {

				// ( types-object [, selector] )
				for (type in types) {
					this.off(type, selector, types[type]);
				}
				return this;
			}
			if (selector === false || typeof selector === "function") {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if (fn === false) {
				fn = returnFalse;
			}
			return this.each(function () {
				jQuery.event.remove(this, types, fn, selector);
			});
		}
	});

	var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,


	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,


	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	    rscriptTypeMasked = /^true\/(.*)/,
	    rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	// Prefer a tbody over its parent table for containing new rows
	function manipulationTarget(elem, content) {
		if (nodeName(elem, "table") && nodeName(content.nodeType !== 11 ? content : content.firstChild, "tr")) {

			return jQuery(">tbody", elem)[0] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript(elem) {
		elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
		return elem;
	}
	function restoreScript(elem) {
		var match = rscriptTypeMasked.exec(elem.type);

		if (match) {
			elem.type = match[1];
		} else {
			elem.removeAttribute("type");
		}

		return elem;
	}

	function cloneCopyEvent(src, dest) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if (dest.nodeType !== 1) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if (dataPriv.hasData(src)) {
			pdataOld = dataPriv.access(src);
			pdataCur = dataPriv.set(dest, pdataOld);
			events = pdataOld.events;

			if (events) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for (type in events) {
					for (i = 0, l = events[type].length; i < l; i++) {
						jQuery.event.add(dest, type, events[type][i]);
					}
				}
			}
		}

		// 2. Copy user data
		if (dataUser.hasData(src)) {
			udataOld = dataUser.access(src);
			udataCur = jQuery.extend({}, udataOld);

			dataUser.set(dest, udataCur);
		}
	}

	// Fix IE bugs, see support tests
	function fixInput(src, dest) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if (nodeName === "input" && rcheckableType.test(src.type)) {
			dest.checked = src.checked;

			// Fails to return the selected option to the default selected state when cloning options
		} else if (nodeName === "input" || nodeName === "textarea") {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip(collection, args, callback, ignored) {

		// Flatten any nested arrays
		args = concat.apply([], args);

		var fragment,
		    first,
		    scripts,
		    hasScripts,
		    node,
		    doc,
		    i = 0,
		    l = collection.length,
		    iNoClone = l - 1,
		    value = args[0],
		    isFunction = jQuery.isFunction(value);

		// We can't cloneNode fragments that contain checked, in WebKit
		if (isFunction || l > 1 && typeof value === "string" && !support.checkClone && rchecked.test(value)) {
			return collection.each(function (index) {
				var self = collection.eq(index);
				if (isFunction) {
					args[0] = value.call(this, index, self.html());
				}
				domManip(self, args, callback, ignored);
			});
		}

		if (l) {
			fragment = buildFragment(args, collection[0].ownerDocument, false, collection, ignored);
			first = fragment.firstChild;

			if (fragment.childNodes.length === 1) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if (first || ignored) {
				scripts = jQuery.map(getAll(fragment, "script"), disableScript);
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for (; i < l; i++) {
					node = fragment;

					if (i !== iNoClone) {
						node = jQuery.clone(node, true, true);

						// Keep references to cloned scripts for later restoration
						if (hasScripts) {

							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge(scripts, getAll(node, "script"));
						}
					}

					callback.call(collection[i], node, i);
				}

				if (hasScripts) {
					doc = scripts[scripts.length - 1].ownerDocument;

					// Reenable scripts
					jQuery.map(scripts, restoreScript);

					// Evaluate executable scripts on first document insertion
					for (i = 0; i < hasScripts; i++) {
						node = scripts[i];
						if (rscriptType.test(node.type || "") && !dataPriv.access(node, "globalEval") && jQuery.contains(doc, node)) {

							if (node.src) {

								// Optional AJAX dependency, but won't run scripts if not present
								if (jQuery._evalUrl) {
									jQuery._evalUrl(node.src);
								}
							} else {
								DOMEval(node.textContent.replace(rcleanScript, ""), doc);
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function _remove(elem, selector, keepData) {
		var node,
		    nodes = selector ? jQuery.filter(selector, elem) : elem,
		    i = 0;

		for (; (node = nodes[i]) != null; i++) {
			if (!keepData && node.nodeType === 1) {
				jQuery.cleanData(getAll(node));
			}

			if (node.parentNode) {
				if (keepData && jQuery.contains(node.ownerDocument, node)) {
					setGlobalEval(getAll(node, "script"));
				}
				node.parentNode.removeChild(node);
			}
		}

		return elem;
	}

	jQuery.extend({
		htmlPrefilter: function htmlPrefilter(html) {
			return html.replace(rxhtmlTag, "<$1></$2>");
		},

		clone: function clone(elem, dataAndEvents, deepDataAndEvents) {
			var i,
			    l,
			    srcElements,
			    destElements,
			    clone = elem.cloneNode(true),
			    inPage = jQuery.contains(elem.ownerDocument, elem);

			// Fix IE cloning issues
			if (!support.noCloneChecked && (elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem)) {

				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll(clone);
				srcElements = getAll(elem);

				for (i = 0, l = srcElements.length; i < l; i++) {
					fixInput(srcElements[i], destElements[i]);
				}
			}

			// Copy the events from the original to the clone
			if (dataAndEvents) {
				if (deepDataAndEvents) {
					srcElements = srcElements || getAll(elem);
					destElements = destElements || getAll(clone);

					for (i = 0, l = srcElements.length; i < l; i++) {
						cloneCopyEvent(srcElements[i], destElements[i]);
					}
				} else {
					cloneCopyEvent(elem, clone);
				}
			}

			// Preserve script evaluation history
			destElements = getAll(clone, "script");
			if (destElements.length > 0) {
				setGlobalEval(destElements, !inPage && getAll(elem, "script"));
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function cleanData(elems) {
			var data,
			    elem,
			    type,
			    special = jQuery.event.special,
			    i = 0;

			for (; (elem = elems[i]) !== undefined; i++) {
				if (acceptData(elem)) {
					if (data = elem[dataPriv.expando]) {
						if (data.events) {
							for (type in data.events) {
								if (special[type]) {
									jQuery.event.remove(elem, type);

									// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent(elem, type, data.handle);
								}
							}
						}

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[dataPriv.expando] = undefined;
					}
					if (elem[dataUser.expando]) {

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[dataUser.expando] = undefined;
					}
				}
			}
		}
	});

	jQuery.fn.extend({
		detach: function detach(selector) {
			return _remove(this, selector, true);
		},

		remove: function remove(selector) {
			return _remove(this, selector);
		},

		text: function text(value) {
			return access(this, function (value) {
				return value === undefined ? jQuery.text(this) : this.empty().each(function () {
					if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
						this.textContent = value;
					}
				});
			}, null, value, arguments.length);
		},

		append: function append() {
			return domManip(this, arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.appendChild(elem);
				}
			});
		},

		prepend: function prepend() {
			return domManip(this, arguments, function (elem) {
				if (this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9) {
					var target = manipulationTarget(this, elem);
					target.insertBefore(elem, target.firstChild);
				}
			});
		},

		before: function before() {
			return domManip(this, arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this);
				}
			});
		},

		after: function after() {
			return domManip(this, arguments, function (elem) {
				if (this.parentNode) {
					this.parentNode.insertBefore(elem, this.nextSibling);
				}
			});
		},

		empty: function empty() {
			var elem,
			    i = 0;

			for (; (elem = this[i]) != null; i++) {
				if (elem.nodeType === 1) {

					// Prevent memory leaks
					jQuery.cleanData(getAll(elem, false));

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function clone(dataAndEvents, deepDataAndEvents) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map(function () {
				return jQuery.clone(this, dataAndEvents, deepDataAndEvents);
			});
		},

		html: function html(value) {
			return access(this, function (value) {
				var elem = this[0] || {},
				    i = 0,
				    l = this.length;

				if (value === undefined && elem.nodeType === 1) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if (typeof value === "string" && !rnoInnerhtml.test(value) && !wrapMap[(rtagName.exec(value) || ["", ""])[1].toLowerCase()]) {

					value = jQuery.htmlPrefilter(value);

					try {
						for (; i < l; i++) {
							elem = this[i] || {};

							// Remove element nodes and prevent memory leaks
							if (elem.nodeType === 1) {
								jQuery.cleanData(getAll(elem, false));
								elem.innerHTML = value;
							}
						}

						elem = 0;

						// If using innerHTML throws an exception, use the fallback method
					} catch (e) {}
				}

				if (elem) {
					this.empty().append(value);
				}
			}, null, value, arguments.length);
		},

		replaceWith: function replaceWith() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip(this, arguments, function (elem) {
				var parent = this.parentNode;

				if (jQuery.inArray(this, ignored) < 0) {
					jQuery.cleanData(getAll(this));
					if (parent) {
						parent.replaceChild(elem, this);
					}
				}

				// Force callback invocation
			}, ignored);
		}
	});

	jQuery.each({
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function (name, original) {
		jQuery.fn[name] = function (selector) {
			var elems,
			    ret = [],
			    insert = jQuery(selector),
			    last = insert.length - 1,
			    i = 0;

			for (; i <= last; i++) {
				elems = i === last ? this : this.clone(true);
				jQuery(insert[i])[original](elems);

				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply(ret, elems.get());
			}

			return this.pushStack(ret);
		};
	});
	var rmargin = /^margin/;

	var rnumnonpx = new RegExp("^(" + pnum + ")(?!px)[a-z%]+$", "i");

	var getStyles = function getStyles(elem) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if (!view || !view.opener) {
			view = window;
		}

		return view.getComputedStyle(elem);
	};

	(function () {

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {

			// This is a singleton, we need to execute it only once
			if (!div) {
				return;
			}

			div.style.cssText = "box-sizing:border-box;" + "position:relative;display:block;" + "margin:auto;border:1px;padding:1px;" + "top:1%;width:50%";
			div.innerHTML = "";
			documentElement.appendChild(container);

			var divStyle = window.getComputedStyle(div);
			pixelPositionVal = divStyle.top !== "1%";

			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = divStyle.marginLeft === "2px";
			boxSizingReliableVal = divStyle.width === "4px";

			// Support: Android 4.0 - 4.3 only
			// Some styles come back with percentage values, even though they shouldn't
			div.style.marginRight = "50%";
			pixelMarginRightVal = divStyle.marginRight === "4px";

			documentElement.removeChild(container);

			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}

		var pixelPositionVal,
		    boxSizingReliableVal,
		    pixelMarginRightVal,
		    reliableMarginLeftVal,
		    container = document.createElement("div"),
		    div = document.createElement("div");

		// Finish early in limited (non-browser) environments
		if (!div.style) {
			return;
		}

		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode(true).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		container.style.cssText = "border:0;width:8px;height:0;top:0;left:-9999px;" + "padding:0;margin-top:1px;position:absolute";
		container.appendChild(div);

		jQuery.extend(support, {
			pixelPosition: function pixelPosition() {
				computeStyleTests();
				return pixelPositionVal;
			},
			boxSizingReliable: function boxSizingReliable() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelMarginRight: function pixelMarginRight() {
				computeStyleTests();
				return pixelMarginRightVal;
			},
			reliableMarginLeft: function reliableMarginLeft() {
				computeStyleTests();
				return reliableMarginLeftVal;
			}
		});
	})();

	function curCSS(elem, name, computed) {
		var width,
		    minWidth,
		    maxWidth,
		    ret,


		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

		computed = computed || getStyles(elem);

		// getPropertyValue is needed for:
		//   .css('filter') (IE 9 only, #12537)
		//   .css('--customProperty) (#3144)
		if (computed) {
			ret = computed.getPropertyValue(name) || computed[name];

			if (ret === "" && !jQuery.contains(elem.ownerDocument, elem)) {
				ret = jQuery.style(elem, name);
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if (!support.pixelMarginRight() && rnumnonpx.test(ret) && rmargin.test(name)) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" : ret;
	}

	function addGetHookIf(conditionFn, hookFn) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function get() {
				if (conditionFn()) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return (this.get = hookFn).apply(this, arguments);
			}
		};
	}

	var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	    rcustomProp = /^--/,
	    cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	    cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},
	    cssPrefixes = ["Webkit", "Moz", "ms"],
	    emptyStyle = document.createElement("div").style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName(name) {

		// Shortcut for names that are not vendor prefixed
		if (name in emptyStyle) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[0].toUpperCase() + name.slice(1),
		    i = cssPrefixes.length;

		while (i--) {
			name = cssPrefixes[i] + capName;
			if (name in emptyStyle) {
				return name;
			}
		}
	}

	// Return a property mapped along what jQuery.cssProps suggests or to
	// a vendor prefixed property.
	function finalPropName(name) {
		var ret = jQuery.cssProps[name];
		if (!ret) {
			ret = jQuery.cssProps[name] = vendorPropName(name) || name;
		}
		return ret;
	}

	function setPositiveNumber(elem, value, subtract) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec(value);
		return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max(0, matches[2] - (subtract || 0)) + (matches[3] || "px") : value;
	}

	function augmentWidthOrHeight(elem, name, extra, isBorderBox, styles) {
		var i,
		    val = 0;

		// If we already have the right measurement, avoid augmentation
		if (extra === (isBorderBox ? "border" : "content")) {
			i = 4;

			// Otherwise initialize for horizontal or vertical properties
		} else {
			i = name === "width" ? 1 : 0;
		}

		for (; i < 4; i += 2) {

			// Both box models exclude margin, so add it if we want it
			if (extra === "margin") {
				val += jQuery.css(elem, extra + cssExpand[i], true, styles);
			}

			if (isBorderBox) {

				// border-box includes padding, so remove it if we want content
				if (extra === "content") {
					val -= jQuery.css(elem, "padding" + cssExpand[i], true, styles);
				}

				// At this point, extra isn't border nor margin, so remove border
				if (extra !== "margin") {
					val -= jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			} else {

				// At this point, extra isn't content, so add padding
				val += jQuery.css(elem, "padding" + cssExpand[i], true, styles);

				// At this point, extra isn't content nor padding, so add border
				if (extra !== "padding") {
					val += jQuery.css(elem, "border" + cssExpand[i] + "Width", true, styles);
				}
			}
		}

		return val;
	}

	function getWidthOrHeight(elem, name, extra) {

		// Start with computed style
		var valueIsBorderBox,
		    styles = getStyles(elem),
		    val = curCSS(elem, name, styles),
		    isBorderBox = jQuery.css(elem, "boxSizing", false, styles) === "border-box";

		// Computed unit is not pixels. Stop here and return.
		if (rnumnonpx.test(val)) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && (support.boxSizingReliable() || val === elem.style[name]);

		// Fall back to offsetWidth/Height when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		if (val === "auto") {
			val = elem["offset" + name[0].toUpperCase() + name.slice(1)];
		}

		// Normalize "", auto, and prepare for extra
		val = parseFloat(val) || 0;

		// Use the active box-sizing model to add/subtract irrelevant styles
		return val + augmentWidthOrHeight(elem, name, extra || (isBorderBox ? "border" : "content"), valueIsBorderBox, styles) + "px";
	}

	jQuery.extend({

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function get(elem, computed) {
					if (computed) {

						// We should always get a number back from opacity
						var ret = curCSS(elem, "opacity");
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {
			"float": "cssFloat"
		},

		// Get and set the style property on a DOM Node
		style: function style(elem, name, value, extra) {

			// Don't set styles on text and comment nodes
			if (!elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style) {
				return;
			}

			// Make sure that we're working with the right name
			var ret,
			    type,
			    hooks,
			    origName = jQuery.camelCase(name),
			    isCustomProp = rcustomProp.test(name),
			    style = elem.style;

			// Make sure that we're working with the right name. We don't
			// want to query the value if it is a CSS custom property
			// since they are user-defined.
			if (!isCustomProp) {
				name = finalPropName(origName);
			}

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// Check if we're setting a value
			if (value !== undefined) {
				type = typeof value === "undefined" ? "undefined" : _typeof(value);

				// Convert "+=" or "-=" to relative numbers (#7345)
				if (type === "string" && (ret = rcssNum.exec(value)) && ret[1]) {
					value = adjustCSS(elem, name, ret);

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if (value == null || value !== value) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if (type === "number") {
					value += ret && ret[3] || (jQuery.cssNumber[origName] ? "" : "px");
				}

				// background-* props affect original clone's values
				if (!support.clearCloneStyle && value === "" && name.indexOf("background") === 0) {
					style[name] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if (!hooks || !("set" in hooks) || (value = hooks.set(elem, value, extra)) !== undefined) {

					if (isCustomProp) {
						style.setProperty(name, value);
					} else {
						style[name] = value;
					}
				}
			} else {

				// If a hook was provided get the non-computed value from there
				if (hooks && "get" in hooks && (ret = hooks.get(elem, false, extra)) !== undefined) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[name];
			}
		},

		css: function css(elem, name, extra, styles) {
			var val,
			    num,
			    hooks,
			    origName = jQuery.camelCase(name),
			    isCustomProp = rcustomProp.test(name);

			// Make sure that we're working with the right name. We don't
			// want to modify the value if it is a CSS custom property
			// since they are user-defined.
			if (!isCustomProp) {
				name = finalPropName(origName);
			}

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[name] || jQuery.cssHooks[origName];

			// If a hook was provided get the computed value from there
			if (hooks && "get" in hooks) {
				val = hooks.get(elem, true, extra);
			}

			// Otherwise, if a way to get the computed value exists, use that
			if (val === undefined) {
				val = curCSS(elem, name, styles);
			}

			// Convert "normal" to computed value
			if (val === "normal" && name in cssNormalTransform) {
				val = cssNormalTransform[name];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if (extra === "" || extra) {
				num = parseFloat(val);
				return extra === true || isFinite(num) ? num || 0 : val;
			}

			return val;
		}
	});

	jQuery.each(["height", "width"], function (i, name) {
		jQuery.cssHooks[name] = {
			get: function get(elem, computed, extra) {
				if (computed) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test(jQuery.css(elem, "display")) && (

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					!elem.getClientRects().length || !elem.getBoundingClientRect().width) ? swap(elem, cssShow, function () {
						return getWidthOrHeight(elem, name, extra);
					}) : getWidthOrHeight(elem, name, extra);
				}
			},

			set: function set(elem, value, extra) {
				var matches,
				    styles = extra && getStyles(elem),
				    subtract = extra && augmentWidthOrHeight(elem, name, extra, jQuery.css(elem, "boxSizing", false, styles) === "border-box", styles);

				// Convert to pixels if value adjustment is needed
				if (subtract && (matches = rcssNum.exec(value)) && (matches[3] || "px") !== "px") {

					elem.style[name] = value;
					value = jQuery.css(elem, name);
				}

				return setPositiveNumber(elem, value, subtract);
			}
		};
	});

	jQuery.cssHooks.marginLeft = addGetHookIf(support.reliableMarginLeft, function (elem, computed) {
		if (computed) {
			return (parseFloat(curCSS(elem, "marginLeft")) || elem.getBoundingClientRect().left - swap(elem, { marginLeft: 0 }, function () {
				return elem.getBoundingClientRect().left;
			})) + "px";
		}
	});

	// These hooks are used by animate to expand properties
	jQuery.each({
		margin: "",
		padding: "",
		border: "Width"
	}, function (prefix, suffix) {
		jQuery.cssHooks[prefix + suffix] = {
			expand: function expand(value) {
				var i = 0,
				    expanded = {},


				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [value];

				for (; i < 4; i++) {
					expanded[prefix + cssExpand[i] + suffix] = parts[i] || parts[i - 2] || parts[0];
				}

				return expanded;
			}
		};

		if (!rmargin.test(prefix)) {
			jQuery.cssHooks[prefix + suffix].set = setPositiveNumber;
		}
	});

	jQuery.fn.extend({
		css: function css(name, value) {
			return access(this, function (elem, name, value) {
				var styles,
				    len,
				    map = {},
				    i = 0;

				if (Array.isArray(name)) {
					styles = getStyles(elem);
					len = name.length;

					for (; i < len; i++) {
						map[name[i]] = jQuery.css(elem, name[i], false, styles);
					}

					return map;
				}

				return value !== undefined ? jQuery.style(elem, name, value) : jQuery.css(elem, name);
			}, name, value, arguments.length > 1);
		}
	});

	function Tween(elem, options, prop, end, easing) {
		return new Tween.prototype.init(elem, options, prop, end, easing);
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function init(elem, options, prop, end, easing, unit) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || (jQuery.cssNumber[prop] ? "" : "px");
		},
		cur: function cur() {
			var hooks = Tween.propHooks[this.prop];

			return hooks && hooks.get ? hooks.get(this) : Tween.propHooks._default.get(this);
		},
		run: function run(percent) {
			var eased,
			    hooks = Tween.propHooks[this.prop];

			if (this.options.duration) {
				this.pos = eased = jQuery.easing[this.easing](percent, this.options.duration * percent, 0, 1, this.options.duration);
			} else {
				this.pos = eased = percent;
			}
			this.now = (this.end - this.start) * eased + this.start;

			if (this.options.step) {
				this.options.step.call(this.elem, this.now, this);
			}

			if (hooks && hooks.set) {
				hooks.set(this);
			} else {
				Tween.propHooks._default.set(this);
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function get(tween) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if (tween.elem.nodeType !== 1 || tween.elem[tween.prop] != null && tween.elem.style[tween.prop] == null) {
					return tween.elem[tween.prop];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css(tween.elem, tween.prop, "");

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function set(tween) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if (jQuery.fx.step[tween.prop]) {
					jQuery.fx.step[tween.prop](tween);
				} else if (tween.elem.nodeType === 1 && (tween.elem.style[jQuery.cssProps[tween.prop]] != null || jQuery.cssHooks[tween.prop])) {
					jQuery.style(tween.elem, tween.prop, tween.now + tween.unit);
				} else {
					tween.elem[tween.prop] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function set(tween) {
			if (tween.elem.nodeType && tween.elem.parentNode) {
				tween.elem[tween.prop] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function linear(p) {
			return p;
		},
		swing: function swing(p) {
			return 0.5 - Math.cos(p * Math.PI) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back compat <1.8 extension point
	jQuery.fx.step = {};

	var fxNow,
	    inProgress,
	    rfxtypes = /^(?:toggle|show|hide)$/,
	    rrun = /queueHooks$/;

	function schedule() {
		if (inProgress) {
			if (document.hidden === false && window.requestAnimationFrame) {
				window.requestAnimationFrame(schedule);
			} else {
				window.setTimeout(schedule, jQuery.fx.interval);
			}

			jQuery.fx.tick();
		}
	}

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout(function () {
			fxNow = undefined;
		});
		return fxNow = jQuery.now();
	}

	// Generate parameters to create a standard animation
	function genFx(type, includeWidth) {
		var which,
		    i = 0,
		    attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for (; i < 4; i += 2 - includeWidth) {
			which = cssExpand[i];
			attrs["margin" + which] = attrs["padding" + which] = type;
		}

		if (includeWidth) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween(value, prop, animation) {
		var tween,
		    collection = (Animation.tweeners[prop] || []).concat(Animation.tweeners["*"]),
		    index = 0,
		    length = collection.length;
		for (; index < length; index++) {
			if (tween = collection[index].call(animation, prop, value)) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter(elem, props, opts) {
		var prop,
		    value,
		    toggle,
		    hooks,
		    oldfire,
		    propTween,
		    restoreDisplay,
		    display,
		    isBox = "width" in props || "height" in props,
		    anim = this,
		    orig = {},
		    style = elem.style,
		    hidden = elem.nodeType && isHiddenWithinTree(elem),
		    dataShow = dataPriv.get(elem, "fxshow");

		// Queue-skipping animations hijack the fx hooks
		if (!opts.queue) {
			hooks = jQuery._queueHooks(elem, "fx");
			if (hooks.unqueued == null) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function () {
					if (!hooks.unqueued) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always(function () {

				// Ensure the complete handler is called before this completes
				anim.always(function () {
					hooks.unqueued--;
					if (!jQuery.queue(elem, "fx").length) {
						hooks.empty.fire();
					}
				});
			});
		}

		// Detect show/hide animations
		for (prop in props) {
			value = props[prop];
			if (rfxtypes.test(value)) {
				delete props[prop];
				toggle = toggle || value === "toggle";
				if (value === (hidden ? "hide" : "show")) {

					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if (value === "show" && dataShow && dataShow[prop] !== undefined) {
						hidden = true;

						// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[prop] = dataShow && dataShow[prop] || jQuery.style(elem, prop);
			}
		}

		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject(props);
		if (!propTween && jQuery.isEmptyObject(orig)) {
			return;
		}

		// Restrict "overflow" and "display" styles during box animations
		if (isBox && elem.nodeType === 1) {

			// Support: IE <=9 - 11, Edge 12 - 13
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY
			opts.overflow = [style.overflow, style.overflowX, style.overflowY];

			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if (restoreDisplay == null) {
				restoreDisplay = dataPriv.get(elem, "display");
			}
			display = jQuery.css(elem, "display");
			if (display === "none") {
				if (restoreDisplay) {
					display = restoreDisplay;
				} else {

					// Get nonempty value(s) by temporarily forcing visibility
					showHide([elem], true);
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css(elem, "display");
					showHide([elem]);
				}
			}

			// Animate inline elements as inline-block
			if (display === "inline" || display === "inline-block" && restoreDisplay != null) {
				if (jQuery.css(elem, "float") === "none") {

					// Restore the original display value at the end of pure show/hide animations
					if (!propTween) {
						anim.done(function () {
							style.display = restoreDisplay;
						});
						if (restoreDisplay == null) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}

		if (opts.overflow) {
			style.overflow = "hidden";
			anim.always(function () {
				style.overflow = opts.overflow[0];
				style.overflowX = opts.overflow[1];
				style.overflowY = opts.overflow[2];
			});
		}

		// Implement show/hide animations
		propTween = false;
		for (prop in orig) {

			// General show/hide setup for this element animation
			if (!propTween) {
				if (dataShow) {
					if ("hidden" in dataShow) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access(elem, "fxshow", { display: restoreDisplay });
				}

				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if (toggle) {
					dataShow.hidden = !hidden;
				}

				// Show elements before animating them
				if (hidden) {
					showHide([elem], true);
				}

				/* eslint-disable no-loop-func */

				anim.done(function () {

					/* eslint-enable no-loop-func */

					// The final step of a "hide" animation is actually hiding the element
					if (!hidden) {
						showHide([elem]);
					}
					dataPriv.remove(elem, "fxshow");
					for (prop in orig) {
						jQuery.style(elem, prop, orig[prop]);
					}
				});
			}

			// Per-property setup
			propTween = createTween(hidden ? dataShow[prop] : 0, prop, anim);
			if (!(prop in dataShow)) {
				dataShow[prop] = propTween.start;
				if (hidden) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}

	function propFilter(props, specialEasing) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for (index in props) {
			name = jQuery.camelCase(index);
			easing = specialEasing[name];
			value = props[index];
			if (Array.isArray(value)) {
				easing = value[1];
				value = props[index] = value[0];
			}

			if (index !== name) {
				props[name] = value;
				delete props[index];
			}

			hooks = jQuery.cssHooks[name];
			if (hooks && "expand" in hooks) {
				value = hooks.expand(value);
				delete props[name];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for (index in value) {
					if (!(index in props)) {
						props[index] = value[index];
						specialEasing[index] = easing;
					}
				}
			} else {
				specialEasing[name] = easing;
			}
		}
	}

	function Animation(elem, properties, options) {
		var result,
		    stopped,
		    index = 0,
		    length = Animation.prefilters.length,
		    deferred = jQuery.Deferred().always(function () {

			// Don't match elem in the :animated selector
			delete tick.elem;
		}),
		    tick = function tick() {
			if (stopped) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
			    remaining = Math.max(0, animation.startTime + animation.duration - currentTime),


			// Support: Android 2.3 only
			// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
			temp = remaining / animation.duration || 0,
			    percent = 1 - temp,
			    index = 0,
			    length = animation.tweens.length;

			for (; index < length; index++) {
				animation.tweens[index].run(percent);
			}

			deferred.notifyWith(elem, [animation, percent, remaining]);

			// If there's more to do, yield
			if (percent < 1 && length) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if (!length) {
				deferred.notifyWith(elem, [animation, 1, 0]);
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith(elem, [animation]);
			return false;
		},
		    animation = deferred.promise({
			elem: elem,
			props: jQuery.extend({}, properties),
			opts: jQuery.extend(true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function createTween(prop, end) {
				var tween = jQuery.Tween(elem, animation.opts, prop, end, animation.opts.specialEasing[prop] || animation.opts.easing);
				animation.tweens.push(tween);
				return tween;
			},
			stop: function stop(gotoEnd) {
				var index = 0,


				// If we are going to the end, we want to run all the tweens
				// otherwise we skip this part
				length = gotoEnd ? animation.tweens.length : 0;
				if (stopped) {
					return this;
				}
				stopped = true;
				for (; index < length; index++) {
					animation.tweens[index].run(1);
				}

				// Resolve when we played the last frame; otherwise, reject
				if (gotoEnd) {
					deferred.notifyWith(elem, [animation, 1, 0]);
					deferred.resolveWith(elem, [animation, gotoEnd]);
				} else {
					deferred.rejectWith(elem, [animation, gotoEnd]);
				}
				return this;
			}
		}),
		    props = animation.props;

		propFilter(props, animation.opts.specialEasing);

		for (; index < length; index++) {
			result = Animation.prefilters[index].call(animation, elem, props, animation.opts);
			if (result) {
				if (jQuery.isFunction(result.stop)) {
					jQuery._queueHooks(animation.elem, animation.opts.queue).stop = jQuery.proxy(result.stop, result);
				}
				return result;
			}
		}

		jQuery.map(props, createTween, animation);

		if (jQuery.isFunction(animation.opts.start)) {
			animation.opts.start.call(elem, animation);
		}

		// Attach callbacks from options
		animation.progress(animation.opts.progress).done(animation.opts.done, animation.opts.complete).fail(animation.opts.fail).always(animation.opts.always);

		jQuery.fx.timer(jQuery.extend(tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		}));

		return animation;
	}

	jQuery.Animation = jQuery.extend(Animation, {

		tweeners: {
			"*": [function (prop, value) {
				var tween = this.createTween(prop, value);
				adjustCSS(tween.elem, prop, rcssNum.exec(value), tween);
				return tween;
			}]
		},

		tweener: function tweener(props, callback) {
			if (jQuery.isFunction(props)) {
				callback = props;
				props = ["*"];
			} else {
				props = props.match(rnothtmlwhite);
			}

			var prop,
			    index = 0,
			    length = props.length;

			for (; index < length; index++) {
				prop = props[index];
				Animation.tweeners[prop] = Animation.tweeners[prop] || [];
				Animation.tweeners[prop].unshift(callback);
			}
		},

		prefilters: [defaultPrefilter],

		prefilter: function prefilter(callback, prepend) {
			if (prepend) {
				Animation.prefilters.unshift(callback);
			} else {
				Animation.prefilters.push(callback);
			}
		}
	});

	jQuery.speed = function (speed, easing, fn) {
		var opt = speed && (typeof speed === "undefined" ? "undefined" : _typeof(speed)) === "object" ? jQuery.extend({}, speed) : {
			complete: fn || !fn && easing || jQuery.isFunction(speed) && speed,
			duration: speed,
			easing: fn && easing || easing && !jQuery.isFunction(easing) && easing
		};

		// Go to the end state if fx are off
		if (jQuery.fx.off) {
			opt.duration = 0;
		} else {
			if (typeof opt.duration !== "number") {
				if (opt.duration in jQuery.fx.speeds) {
					opt.duration = jQuery.fx.speeds[opt.duration];
				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}

		// Normalize opt.queue - true/undefined/null -> "fx"
		if (opt.queue == null || opt.queue === true) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function () {
			if (jQuery.isFunction(opt.old)) {
				opt.old.call(this);
			}

			if (opt.queue) {
				jQuery.dequeue(this, opt.queue);
			}
		};

		return opt;
	};

	jQuery.fn.extend({
		fadeTo: function fadeTo(speed, to, easing, callback) {

			// Show any hidden elements after setting opacity to 0
			return this.filter(isHiddenWithinTree).css("opacity", 0).show()

			// Animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback);
		},
		animate: function animate(prop, speed, easing, callback) {
			var empty = jQuery.isEmptyObject(prop),
			    optall = jQuery.speed(speed, easing, callback),
			    doAnimation = function doAnimation() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation(this, jQuery.extend({}, prop), optall);

				// Empty animations, or finishing resolves immediately
				if (empty || dataPriv.get(this, "finish")) {
					anim.stop(true);
				}
			};
			doAnimation.finish = doAnimation;

			return empty || optall.queue === false ? this.each(doAnimation) : this.queue(optall.queue, doAnimation);
		},
		stop: function stop(type, clearQueue, gotoEnd) {
			var stopQueue = function stopQueue(hooks) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop(gotoEnd);
			};

			if (typeof type !== "string") {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if (clearQueue && type !== false) {
				this.queue(type || "fx", []);
			}

			return this.each(function () {
				var dequeue = true,
				    index = type != null && type + "queueHooks",
				    timers = jQuery.timers,
				    data = dataPriv.get(this);

				if (index) {
					if (data[index] && data[index].stop) {
						stopQueue(data[index]);
					}
				} else {
					for (index in data) {
						if (data[index] && data[index].stop && rrun.test(index)) {
							stopQueue(data[index]);
						}
					}
				}

				for (index = timers.length; index--;) {
					if (timers[index].elem === this && (type == null || timers[index].queue === type)) {

						timers[index].anim.stop(gotoEnd);
						dequeue = false;
						timers.splice(index, 1);
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if (dequeue || !gotoEnd) {
					jQuery.dequeue(this, type);
				}
			});
		},
		finish: function finish(type) {
			if (type !== false) {
				type = type || "fx";
			}
			return this.each(function () {
				var index,
				    data = dataPriv.get(this),
				    queue = data[type + "queue"],
				    hooks = data[type + "queueHooks"],
				    timers = jQuery.timers,
				    length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue(this, type, []);

				if (hooks && hooks.stop) {
					hooks.stop.call(this, true);
				}

				// Look for any active animations, and finish them
				for (index = timers.length; index--;) {
					if (timers[index].elem === this && timers[index].queue === type) {
						timers[index].anim.stop(true);
						timers.splice(index, 1);
					}
				}

				// Look for any animations in the old queue and finish them
				for (index = 0; index < length; index++) {
					if (queue[index] && queue[index].finish) {
						queue[index].finish.call(this);
					}
				}

				// Turn off finishing flag
				delete data.finish;
			});
		}
	});

	jQuery.each(["toggle", "show", "hide"], function (i, name) {
		var cssFn = jQuery.fn[name];
		jQuery.fn[name] = function (speed, easing, callback) {
			return speed == null || typeof speed === "boolean" ? cssFn.apply(this, arguments) : this.animate(genFx(name, true), speed, easing, callback);
		};
	});

	// Generate shortcuts for custom animations
	jQuery.each({
		slideDown: genFx("show"),
		slideUp: genFx("hide"),
		slideToggle: genFx("toggle"),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function (name, props) {
		jQuery.fn[name] = function (speed, easing, callback) {
			return this.animate(props, speed, easing, callback);
		};
	});

	jQuery.timers = [];
	jQuery.fx.tick = function () {
		var timer,
		    i = 0,
		    timers = jQuery.timers;

		fxNow = jQuery.now();

		for (; i < timers.length; i++) {
			timer = timers[i];

			// Run the timer and safely remove it when done (allowing for external removal)
			if (!timer() && timers[i] === timer) {
				timers.splice(i--, 1);
			}
		}

		if (!timers.length) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function (timer) {
		jQuery.timers.push(timer);
		jQuery.fx.start();
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function () {
		if (inProgress) {
			return;
		}

		inProgress = true;
		schedule();
	};

	jQuery.fx.stop = function () {
		inProgress = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};

	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function (time, type) {
		time = jQuery.fx ? jQuery.fx.speeds[time] || time : time;
		type = type || "fx";

		return this.queue(type, function (next, hooks) {
			var timeout = window.setTimeout(next, time);
			hooks.stop = function () {
				window.clearTimeout(timeout);
			};
		});
	};

	(function () {
		var input = document.createElement("input"),
		    select = document.createElement("select"),
		    opt = select.appendChild(document.createElement("option"));

		input.type = "checkbox";

		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement("input");
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	})();

	var boolHook,
	    attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend({
		attr: function attr(name, value) {
			return access(this, jQuery.attr, name, value, arguments.length > 1);
		},

		removeAttr: function removeAttr(name) {
			return this.each(function () {
				jQuery.removeAttr(this, name);
			});
		}
	});

	jQuery.extend({
		attr: function attr(elem, name, value) {
			var ret,
			    hooks,
			    nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if (nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if (typeof elem.getAttribute === "undefined") {
				return jQuery.prop(elem, name, value);
			}

			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if (nType !== 1 || !jQuery.isXMLDoc(elem)) {
				hooks = jQuery.attrHooks[name.toLowerCase()] || (jQuery.expr.match.bool.test(name) ? boolHook : undefined);
			}

			if (value !== undefined) {
				if (value === null) {
					jQuery.removeAttr(elem, name);
					return;
				}

				if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;
				}

				elem.setAttribute(name, value + "");
				return value;
			}

			if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
				return ret;
			}

			ret = jQuery.find.attr(elem, name);

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function set(elem, value) {
					if (!support.radioValue && value === "radio" && nodeName(elem, "input")) {
						var val = elem.value;
						elem.setAttribute("type", value);
						if (val) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function removeAttr(elem, value) {
			var name,
			    i = 0,


			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match(rnothtmlwhite);

			if (attrNames && elem.nodeType === 1) {
				while (name = attrNames[i++]) {
					elem.removeAttribute(name);
				}
			}
		}
	});

	// Hooks for boolean attributes
	boolHook = {
		set: function set(elem, value, name) {
			if (value === false) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr(elem, name);
			} else {
				elem.setAttribute(name, name);
			}
			return name;
		}
	};

	jQuery.each(jQuery.expr.match.bool.source.match(/\w+/g), function (i, name) {
		var getter = attrHandle[name] || jQuery.find.attr;

		attrHandle[name] = function (elem, name, isXML) {
			var ret,
			    handle,
			    lowercaseName = name.toLowerCase();

			if (!isXML) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[lowercaseName];
				attrHandle[lowercaseName] = ret;
				ret = getter(elem, name, isXML) != null ? lowercaseName : null;
				attrHandle[lowercaseName] = handle;
			}
			return ret;
		};
	});

	var rfocusable = /^(?:input|select|textarea|button)$/i,
	    rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend({
		prop: function prop(name, value) {
			return access(this, jQuery.prop, name, value, arguments.length > 1);
		},

		removeProp: function removeProp(name) {
			return this.each(function () {
				delete this[jQuery.propFix[name] || name];
			});
		}
	});

	jQuery.extend({
		prop: function prop(elem, name, value) {
			var ret,
			    hooks,
			    nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if (nType === 3 || nType === 8 || nType === 2) {
				return;
			}

			if (nType !== 1 || !jQuery.isXMLDoc(elem)) {

				// Fix name and attach hooks
				name = jQuery.propFix[name] || name;
				hooks = jQuery.propHooks[name];
			}

			if (value !== undefined) {
				if (hooks && "set" in hooks && (ret = hooks.set(elem, value, name)) !== undefined) {
					return ret;
				}

				return elem[name] = value;
			}

			if (hooks && "get" in hooks && (ret = hooks.get(elem, name)) !== null) {
				return ret;
			}

			return elem[name];
		},

		propHooks: {
			tabIndex: {
				get: function get(elem) {

					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr(elem, "tabindex");

					if (tabindex) {
						return parseInt(tabindex, 10);
					}

					if (rfocusable.test(elem.nodeName) || rclickable.test(elem.nodeName) && elem.href) {
						return 0;
					}

					return -1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	});

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	// eslint rule "no-unused-expressions" is disabled for this code
	// since it considers such accessions noop
	if (!support.optSelected) {
		jQuery.propHooks.selected = {
			get: function get(elem) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if (parent && parent.parentNode) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function set(elem) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if (parent) {
					parent.selectedIndex;

					if (parent.parentNode) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each(["tabIndex", "readOnly", "maxLength", "cellSpacing", "cellPadding", "rowSpan", "colSpan", "useMap", "frameBorder", "contentEditable"], function () {
		jQuery.propFix[this.toLowerCase()] = this;
	});

	// Strip and collapse whitespace according to HTML spec
	// https://html.spec.whatwg.org/multipage/infrastructure.html#strip-and-collapse-whitespace
	function stripAndCollapse(value) {
		var tokens = value.match(rnothtmlwhite) || [];
		return tokens.join(" ");
	}

	function getClass(elem) {
		return elem.getAttribute && elem.getAttribute("class") || "";
	}

	jQuery.fn.extend({
		addClass: function addClass(value) {
			var classes,
			    elem,
			    cur,
			    curValue,
			    clazz,
			    j,
			    finalValue,
			    i = 0;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).addClass(value.call(this, j, getClass(this)));
				});
			}

			if (typeof value === "string" && value) {
				classes = value.match(rnothtmlwhite) || [];

				while (elem = this[i++]) {
					curValue = getClass(elem);
					cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {
							if (cur.indexOf(" " + clazz + " ") < 0) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse(cur);
						if (curValue !== finalValue) {
							elem.setAttribute("class", finalValue);
						}
					}
				}
			}

			return this;
		},

		removeClass: function removeClass(value) {
			var classes,
			    elem,
			    cur,
			    curValue,
			    clazz,
			    j,
			    finalValue,
			    i = 0;

			if (jQuery.isFunction(value)) {
				return this.each(function (j) {
					jQuery(this).removeClass(value.call(this, j, getClass(this)));
				});
			}

			if (!arguments.length) {
				return this.attr("class", "");
			}

			if (typeof value === "string" && value) {
				classes = value.match(rnothtmlwhite) || [];

				while (elem = this[i++]) {
					curValue = getClass(elem);

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && " " + stripAndCollapse(curValue) + " ";

					if (cur) {
						j = 0;
						while (clazz = classes[j++]) {

							// Remove *all* instances
							while (cur.indexOf(" " + clazz + " ") > -1) {
								cur = cur.replace(" " + clazz + " ", " ");
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse(cur);
						if (curValue !== finalValue) {
							elem.setAttribute("class", finalValue);
						}
					}
				}
			}

			return this;
		},

		toggleClass: function toggleClass(value, stateVal) {
			var type = typeof value === "undefined" ? "undefined" : _typeof(value);

			if (typeof stateVal === "boolean" && type === "string") {
				return stateVal ? this.addClass(value) : this.removeClass(value);
			}

			if (jQuery.isFunction(value)) {
				return this.each(function (i) {
					jQuery(this).toggleClass(value.call(this, i, getClass(this), stateVal), stateVal);
				});
			}

			return this.each(function () {
				var className, i, self, classNames;

				if (type === "string") {

					// Toggle individual class names
					i = 0;
					self = jQuery(this);
					classNames = value.match(rnothtmlwhite) || [];

					while (className = classNames[i++]) {

						// Check each className given, space separated list
						if (self.hasClass(className)) {
							self.removeClass(className);
						} else {
							self.addClass(className);
						}
					}

					// Toggle whole class name
				} else if (value === undefined || type === "boolean") {
					className = getClass(this);
					if (className) {

						// Store className if set
						dataPriv.set(this, "__className__", className);
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if (this.setAttribute) {
						this.setAttribute("class", className || value === false ? "" : dataPriv.get(this, "__className__") || "");
					}
				}
			});
		},

		hasClass: function hasClass(selector) {
			var className,
			    elem,
			    i = 0;

			className = " " + selector + " ";
			while (elem = this[i++]) {
				if (elem.nodeType === 1 && (" " + stripAndCollapse(getClass(elem)) + " ").indexOf(className) > -1) {
					return true;
				}
			}

			return false;
		}
	});

	var rreturn = /\r/g;

	jQuery.fn.extend({
		val: function val(value) {
			var hooks,
			    ret,
			    isFunction,
			    elem = this[0];

			if (!arguments.length) {
				if (elem) {
					hooks = jQuery.valHooks[elem.type] || jQuery.valHooks[elem.nodeName.toLowerCase()];

					if (hooks && "get" in hooks && (ret = hooks.get(elem, "value")) !== undefined) {
						return ret;
					}

					ret = elem.value;

					// Handle most common string cases
					if (typeof ret === "string") {
						return ret.replace(rreturn, "");
					}

					// Handle cases where value is null/undef or number
					return ret == null ? "" : ret;
				}

				return;
			}

			isFunction = jQuery.isFunction(value);

			return this.each(function (i) {
				var val;

				if (this.nodeType !== 1) {
					return;
				}

				if (isFunction) {
					val = value.call(this, i, jQuery(this).val());
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if (val == null) {
					val = "";
				} else if (typeof val === "number") {
					val += "";
				} else if (Array.isArray(val)) {
					val = jQuery.map(val, function (value) {
						return value == null ? "" : value + "";
					});
				}

				hooks = jQuery.valHooks[this.type] || jQuery.valHooks[this.nodeName.toLowerCase()];

				// If set returns undefined, fall back to normal setting
				if (!hooks || !("set" in hooks) || hooks.set(this, val, "value") === undefined) {
					this.value = val;
				}
			});
		}
	});

	jQuery.extend({
		valHooks: {
			option: {
				get: function get(elem) {

					var val = jQuery.find.attr(elem, "value");
					return val != null ? val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse(jQuery.text(elem));
				}
			},
			select: {
				get: function get(elem) {
					var value,
					    option,
					    i,
					    options = elem.options,
					    index = elem.selectedIndex,
					    one = elem.type === "select-one",
					    values = one ? null : [],
					    max = one ? index + 1 : options.length;

					if (index < 0) {
						i = max;
					} else {
						i = one ? index : 0;
					}

					// Loop through all the selected options
					for (; i < max; i++) {
						option = options[i];

						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ((option.selected || i === index) &&

						// Don't return options that are disabled or in a disabled optgroup
						!option.disabled && (!option.parentNode.disabled || !nodeName(option.parentNode, "optgroup"))) {

							// Get the specific value for the option
							value = jQuery(option).val();

							// We don't need an array for one selects
							if (one) {
								return value;
							}

							// Multi-Selects return an array
							values.push(value);
						}
					}

					return values;
				},

				set: function set(elem, value) {
					var optionSet,
					    option,
					    options = elem.options,
					    values = jQuery.makeArray(value),
					    i = options.length;

					while (i--) {
						option = options[i];

						/* eslint-disable no-cond-assign */

						if (option.selected = jQuery.inArray(jQuery.valHooks.option.get(option), values) > -1) {
							optionSet = true;
						}

						/* eslint-enable no-cond-assign */
					}

					// Force browsers to behave consistently when non-matching value is set
					if (!optionSet) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	});

	// Radios and checkboxes getter/setter
	jQuery.each(["radio", "checkbox"], function () {
		jQuery.valHooks[this] = {
			set: function set(elem, value) {
				if (Array.isArray(value)) {
					return elem.checked = jQuery.inArray(jQuery(elem).val(), value) > -1;
				}
			}
		};
		if (!support.checkOn) {
			jQuery.valHooks[this].get = function (elem) {
				return elem.getAttribute("value") === null ? "on" : elem.value;
			};
		}
	});

	// Return jQuery for attributes-only inclusion


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/;

	jQuery.extend(jQuery.event, {

		trigger: function trigger(event, data, elem, onlyHandlers) {

			var i,
			    cur,
			    tmp,
			    bubbleType,
			    ontype,
			    handle,
			    special,
			    eventPath = [elem || document],
			    type = hasOwn.call(event, "type") ? event.type : event,
			    namespaces = hasOwn.call(event, "namespace") ? event.namespace.split(".") : [];

			cur = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if (elem.nodeType === 3 || elem.nodeType === 8) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if (rfocusMorph.test(type + jQuery.event.triggered)) {
				return;
			}

			if (type.indexOf(".") > -1) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split(".");
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf(":") < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[jQuery.expando] ? event : new jQuery.Event(type, (typeof event === "undefined" ? "undefined" : _typeof(event)) === "object" && event);

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join(".");
			event.rnamespace = event.namespace ? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if (!event.target) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ? [event] : jQuery.makeArray(data, [event]);

			// Allow special events to draw outside the lines
			special = jQuery.event.special[type] || {};
			if (!onlyHandlers && special.trigger && special.trigger.apply(elem, data) === false) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if (!onlyHandlers && !special.noBubble && !jQuery.isWindow(elem)) {

				bubbleType = special.delegateType || type;
				if (!rfocusMorph.test(bubbleType + type)) {
					cur = cur.parentNode;
				}
				for (; cur; cur = cur.parentNode) {
					eventPath.push(cur);
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if (tmp === (elem.ownerDocument || document)) {
					eventPath.push(tmp.defaultView || tmp.parentWindow || window);
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ((cur = eventPath[i++]) && !event.isPropagationStopped()) {

				event.type = i > 1 ? bubbleType : special.bindType || type;

				// jQuery handler
				handle = (dataPriv.get(cur, "events") || {})[event.type] && dataPriv.get(cur, "handle");
				if (handle) {
					handle.apply(cur, data);
				}

				// Native handler
				handle = ontype && cur[ontype];
				if (handle && handle.apply && acceptData(cur)) {
					event.result = handle.apply(cur, data);
					if (event.result === false) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if (!onlyHandlers && !event.isDefaultPrevented()) {

				if ((!special._default || special._default.apply(eventPath.pop(), data) === false) && acceptData(elem)) {

					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if (ontype && jQuery.isFunction(elem[type]) && !jQuery.isWindow(elem)) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ontype];

						if (tmp) {
							elem[ontype] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;
						elem[type]();
						jQuery.event.triggered = undefined;

						if (tmp) {
							elem[ontype] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function simulate(type, elem, event) {
			var e = jQuery.extend(new jQuery.Event(), event, {
				type: type,
				isSimulated: true
			});

			jQuery.event.trigger(e, null, elem);
		}

	});

	jQuery.fn.extend({

		trigger: function trigger(type, data) {
			return this.each(function () {
				jQuery.event.trigger(type, data, this);
			});
		},
		triggerHandler: function triggerHandler(type, data) {
			var elem = this[0];
			if (elem) {
				return jQuery.event.trigger(type, data, elem, true);
			}
		}
	});

	jQuery.each(("blur focus focusin focusout resize scroll click dblclick " + "mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " + "change select submit keydown keypress keyup contextmenu").split(" "), function (i, name) {

		// Handle event binding
		jQuery.fn[name] = function (data, fn) {
			return arguments.length > 0 ? this.on(name, null, data, fn) : this.trigger(name);
		};
	});

	jQuery.fn.extend({
		hover: function hover(fnOver, fnOut) {
			return this.mouseenter(fnOver).mouseleave(fnOut || fnOver);
		}
	});

	support.focusin = "onfocusin" in window;

	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if (!support.focusin) {
		jQuery.each({ focus: "focusin", blur: "focusout" }, function (orig, fix) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function handler(event) {
				jQuery.event.simulate(fix, event.target, jQuery.event.fix(event));
			};

			jQuery.event.special[fix] = {
				setup: function setup() {
					var doc = this.ownerDocument || this,
					    attaches = dataPriv.access(doc, fix);

					if (!attaches) {
						doc.addEventListener(orig, handler, true);
					}
					dataPriv.access(doc, fix, (attaches || 0) + 1);
				},
				teardown: function teardown() {
					var doc = this.ownerDocument || this,
					    attaches = dataPriv.access(doc, fix) - 1;

					if (!attaches) {
						doc.removeEventListener(orig, handler, true);
						dataPriv.remove(doc, fix);
					} else {
						dataPriv.access(doc, fix, attaches);
					}
				}
			};
		});
	}
	var location = window.location;

	var nonce = jQuery.now();

	var rquery = /\?/;

	// Cross-browser xml parsing
	jQuery.parseXML = function (data) {
		var xml;
		if (!data || typeof data !== "string") {
			return null;
		}

		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = new window.DOMParser().parseFromString(data, "text/xml");
		} catch (e) {
			xml = undefined;
		}

		if (!xml || xml.getElementsByTagName("parsererror").length) {
			jQuery.error("Invalid XML: " + data);
		}
		return xml;
	};

	var rbracket = /\[\]$/,
	    rCRLF = /\r?\n/g,
	    rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	    rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams(prefix, obj, traditional, add) {
		var name;

		if (Array.isArray(obj)) {

			// Serialize array item.
			jQuery.each(obj, function (i, v) {
				if (traditional || rbracket.test(prefix)) {

					// Treat each array item as a scalar.
					add(prefix, v);
				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(prefix + "[" + ((typeof v === "undefined" ? "undefined" : _typeof(v)) === "object" && v != null ? i : "") + "]", v, traditional, add);
				}
			});
		} else if (!traditional && jQuery.type(obj) === "object") {

			// Serialize object item.
			for (name in obj) {
				buildParams(prefix + "[" + name + "]", obj[name], traditional, add);
			}
		} else {

			// Serialize scalar item.
			add(prefix, obj);
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function (a, traditional) {
		var prefix,
		    s = [],
		    add = function add(key, valueOrFunction) {

			// If value is a function, invoke it and use its return value
			var value = jQuery.isFunction(valueOrFunction) ? valueOrFunction() : valueOrFunction;

			s[s.length] = encodeURIComponent(key) + "=" + encodeURIComponent(value == null ? "" : value);
		};

		// If an array was passed in, assume that it is an array of form elements.
		if (Array.isArray(a) || a.jquery && !jQuery.isPlainObject(a)) {

			// Serialize the form elements
			jQuery.each(a, function () {
				add(this.name, this.value);
			});
		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for (prefix in a) {
				buildParams(prefix, a[prefix], traditional, add);
			}
		}

		// Return the resulting serialization
		return s.join("&");
	};

	jQuery.fn.extend({
		serialize: function serialize() {
			return jQuery.param(this.serializeArray());
		},
		serializeArray: function serializeArray() {
			return this.map(function () {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop(this, "elements");
				return elements ? jQuery.makeArray(elements) : this;
			}).filter(function () {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery(this).is(":disabled") && rsubmittable.test(this.nodeName) && !rsubmitterTypes.test(type) && (this.checked || !rcheckableType.test(type));
			}).map(function (i, elem) {
				var val = jQuery(this).val();

				if (val == null) {
					return null;
				}

				if (Array.isArray(val)) {
					return jQuery.map(val, function (val) {
						return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
					});
				}

				return { name: elem.name, value: val.replace(rCRLF, "\r\n") };
			}).get();
		}
	});

	var r20 = /%20/g,
	    rhash = /#.*$/,
	    rantiCache = /([?&])_=[^&]*/,
	    rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,


	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	    rnoContent = /^(?:GET|HEAD)$/,
	    rprotocol = /^\/\//,


	/* Prefilters
  * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
  * 2) These are called:
  *    - BEFORE asking for a transport
  *    - AFTER param serialization (s.data is a string if s.processData is true)
  * 3) key is the dataType
  * 4) the catchall symbol "*" can be used
  * 5) execution will start with transport dataType and THEN continue down to "*" if needed
  */
	prefilters = {},


	/* Transports bindings
  * 1) key is the dataType
  * 2) the catchall symbol "*" can be used
  * 3) selection will start with transport dataType and THEN go to "*" if needed
  */
	transports = {},


	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat("*"),


	// Anchor tag for parsing the document origin
	originAnchor = document.createElement("a");
	originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports(structure) {

		// dataTypeExpression is optional and defaults to "*"
		return function (dataTypeExpression, func) {

			if (typeof dataTypeExpression !== "string") {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
			    i = 0,
			    dataTypes = dataTypeExpression.toLowerCase().match(rnothtmlwhite) || [];

			if (jQuery.isFunction(func)) {

				// For each dataType in the dataTypeExpression
				while (dataType = dataTypes[i++]) {

					// Prepend if requested
					if (dataType[0] === "+") {
						dataType = dataType.slice(1) || "*";
						(structure[dataType] = structure[dataType] || []).unshift(func);

						// Otherwise append
					} else {
						(structure[dataType] = structure[dataType] || []).push(func);
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports(structure, options, originalOptions, jqXHR) {

		var inspected = {},
		    seekingTransport = structure === transports;

		function inspect(dataType) {
			var selected;
			inspected[dataType] = true;
			jQuery.each(structure[dataType] || [], function (_, prefilterOrFactory) {
				var dataTypeOrTransport = prefilterOrFactory(options, originalOptions, jqXHR);
				if (typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[dataTypeOrTransport]) {

					options.dataTypes.unshift(dataTypeOrTransport);
					inspect(dataTypeOrTransport);
					return false;
				} else if (seekingTransport) {
					return !(selected = dataTypeOrTransport);
				}
			});
			return selected;
		}

		return inspect(options.dataTypes[0]) || !inspected["*"] && inspect("*");
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend(target, src) {
		var key,
		    deep,
		    flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for (key in src) {
			if (src[key] !== undefined) {
				(flatOptions[key] ? target : deep || (deep = {}))[key] = src[key];
			}
		}
		if (deep) {
			jQuery.extend(true, target, deep);
		}

		return target;
	}

	/* Handles responses to an ajax request:
  * - finds the right dataType (mediates between content-type and expected dataType)
  * - returns the corresponding response
  */
	function ajaxHandleResponses(s, jqXHR, responses) {

		var ct,
		    type,
		    finalDataType,
		    firstDataType,
		    contents = s.contents,
		    dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while (dataTypes[0] === "*") {
			dataTypes.shift();
			if (ct === undefined) {
				ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
			}
		}

		// Check if we're dealing with a known content-type
		if (ct) {
			for (type in contents) {
				if (contents[type] && contents[type].test(ct)) {
					dataTypes.unshift(type);
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if (dataTypes[0] in responses) {
			finalDataType = dataTypes[0];
		} else {

			// Try convertible dataTypes
			for (type in responses) {
				if (!dataTypes[0] || s.converters[type + " " + dataTypes[0]]) {
					finalDataType = type;
					break;
				}
				if (!firstDataType) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if (finalDataType) {
			if (finalDataType !== dataTypes[0]) {
				dataTypes.unshift(finalDataType);
			}
			return responses[finalDataType];
		}
	}

	/* Chain conversions given the request and the original response
  * Also sets the responseXXX fields on the jqXHR instance
  */
	function ajaxConvert(s, response, jqXHR, isSuccess) {
		var conv2,
		    current,
		    conv,
		    tmp,
		    prev,
		    converters = {},


		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if (dataTypes[1]) {
			for (conv in s.converters) {
				converters[conv.toLowerCase()] = s.converters[conv];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while (current) {

			if (s.responseFields[current]) {
				jqXHR[s.responseFields[current]] = response;
			}

			// Apply the dataFilter if provided
			if (!prev && isSuccess && s.dataFilter) {
				response = s.dataFilter(response, s.dataType);
			}

			prev = current;
			current = dataTypes.shift();

			if (current) {

				// There's only work to do if current dataType is non-auto
				if (current === "*") {

					current = prev;

					// Convert response if prev dataType is non-auto and differs from current
				} else if (prev !== "*" && prev !== current) {

					// Seek a direct converter
					conv = converters[prev + " " + current] || converters["* " + current];

					// If none found, seek a pair
					if (!conv) {
						for (conv2 in converters) {

							// If conv2 outputs current
							tmp = conv2.split(" ");
							if (tmp[1] === current) {

								// If prev can be converted to accepted input
								conv = converters[prev + " " + tmp[0]] || converters["* " + tmp[0]];
								if (conv) {

									// Condense equivalence converters
									if (conv === true) {
										conv = converters[conv2];

										// Otherwise, insert the intermediate dataType
									} else if (converters[conv2] !== true) {
										current = tmp[0];
										dataTypes.unshift(tmp[1]);
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if (conv !== true) {

						// Unless errors are allowed to bubble, catch and return them
						if (conv && s.throws) {
							response = conv(response);
						} else {
							try {
								response = conv(response);
							} catch (e) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend({

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test(location.protocol),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",

			/*
   timeout: 0,
   data: null,
   dataType: null,
   username: null,
   password: null,
   cache: null,
   throws: false,
   traditional: false,
   headers: {},
   */

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": JSON.parse,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function ajaxSetup(target, settings) {
			return settings ?

			// Building a settings object
			ajaxExtend(ajaxExtend(target, jQuery.ajaxSettings), settings) :

			// Extending ajaxSettings
			ajaxExtend(jQuery.ajaxSettings, target);
		},

		ajaxPrefilter: addToPrefiltersOrTransports(prefilters),
		ajaxTransport: addToPrefiltersOrTransports(transports),

		// Main method
		ajax: function ajax(url, options) {

			// If url is an object, simulate pre-1.5 signature
			if ((typeof url === "undefined" ? "undefined" : _typeof(url)) === "object") {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,


			// URL without anti-cache param
			cacheURL,


			// Response headers
			responseHeadersString,
			    responseHeaders,


			// timeout handle
			timeoutTimer,


			// Url cleanup var
			urlAnchor,


			// Request state (becomes false upon send and true upon completion)
			completed,


			// To know if global events are to be dispatched
			fireGlobals,


			// Loop variable
			i,


			// uncached part of the url
			uncached,


			// Create the final options object
			s = jQuery.ajaxSetup({}, options),


			// Callbacks context
			callbackContext = s.context || s,


			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && (callbackContext.nodeType || callbackContext.jquery) ? jQuery(callbackContext) : jQuery.event,


			// Deferreds
			deferred = jQuery.Deferred(),
			    completeDeferred = jQuery.Callbacks("once memory"),


			// Status-dependent callbacks
			_statusCode = s.statusCode || {},


			// Headers (they are sent all at once)
			requestHeaders = {},
			    requestHeadersNames = {},


			// Default abort message
			strAbort = "canceled",


			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function getResponseHeader(key) {
					var match;
					if (completed) {
						if (!responseHeaders) {
							responseHeaders = {};
							while (match = rheaders.exec(responseHeadersString)) {
								responseHeaders[match[1].toLowerCase()] = match[2];
							}
						}
						match = responseHeaders[key.toLowerCase()];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function getAllResponseHeaders() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function setRequestHeader(name, value) {
					if (completed == null) {
						name = requestHeadersNames[name.toLowerCase()] = requestHeadersNames[name.toLowerCase()] || name;
						requestHeaders[name] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function overrideMimeType(type) {
					if (completed == null) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function statusCode(map) {
					var code;
					if (map) {
						if (completed) {

							// Execute the appropriate callbacks
							jqXHR.always(map[jqXHR.status]);
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for (code in map) {
								_statusCode[code] = [_statusCode[code], map[code]];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function abort(statusText) {
					var finalText = statusText || strAbort;
					if (transport) {
						transport.abort(finalText);
					}
					done(0, finalText);
					return this;
				}
			};

			// Attach deferreds
			deferred.promise(jqXHR);

			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ((url || s.url || location.href) + "").replace(rprotocol, location.protocol + "//");

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = (s.dataType || "*").toLowerCase().match(rnothtmlwhite) || [""];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if (s.crossDomain == null) {
				urlAnchor = document.createElement("a");

				// Support: IE <=8 - 11, Edge 12 - 13
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !== urlAnchor.protocol + "//" + urlAnchor.host;
				} catch (e) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if (s.data && s.processData && typeof s.data !== "string") {
				s.data = jQuery.param(s.data, s.traditional);
			}

			// Apply prefilters
			inspectPrefiltersOrTransports(prefilters, s, options, jqXHR);

			// If request was aborted inside a prefilter, stop there
			if (completed) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if (fireGlobals && jQuery.active++ === 0) {
				jQuery.event.trigger("ajaxStart");
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test(s.type);

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace(rhash, "");

			// More options handling for requests with no content
			if (!s.hasContent) {

				// Remember the hash so we can put it back
				uncached = s.url.slice(cacheURL.length);

				// If data is available, append data to url
				if (s.data) {
					cacheURL += (rquery.test(cacheURL) ? "&" : "?") + s.data;

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add or update anti-cache param if needed
				if (s.cache === false) {
					cacheURL = cacheURL.replace(rantiCache, "$1");
					uncached = (rquery.test(cacheURL) ? "&" : "?") + "_=" + nonce++ + uncached;
				}

				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;

				// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if (s.data && s.processData && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0) {
				s.data = s.data.replace(r20, "+");
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if (s.ifModified) {
				if (jQuery.lastModified[cacheURL]) {
					jqXHR.setRequestHeader("If-Modified-Since", jQuery.lastModified[cacheURL]);
				}
				if (jQuery.etag[cacheURL]) {
					jqXHR.setRequestHeader("If-None-Match", jQuery.etag[cacheURL]);
				}
			}

			// Set the correct header, if data is being sent
			if (s.data && s.hasContent && s.contentType !== false || options.contentType) {
				jqXHR.setRequestHeader("Content-Type", s.contentType);
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader("Accept", s.dataTypes[0] && s.accepts[s.dataTypes[0]] ? s.accepts[s.dataTypes[0]] + (s.dataTypes[0] !== "*" ? ", " + allTypes + "; q=0.01" : "") : s.accepts["*"]);

			// Check for headers option
			for (i in s.headers) {
				jqXHR.setRequestHeader(i, s.headers[i]);
			}

			// Allow custom headers/mimetypes and early abort
			if (s.beforeSend && (s.beforeSend.call(callbackContext, jqXHR, s) === false || completed)) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			completeDeferred.add(s.complete);
			jqXHR.done(s.success);
			jqXHR.fail(s.error);

			// Get transport
			transport = inspectPrefiltersOrTransports(transports, s, options, jqXHR);

			// If no transport, we auto-abort
			if (!transport) {
				done(-1, "No Transport");
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if (fireGlobals) {
					globalEventContext.trigger("ajaxSend", [jqXHR, s]);
				}

				// If request was aborted inside ajaxSend, stop there
				if (completed) {
					return jqXHR;
				}

				// Timeout
				if (s.async && s.timeout > 0) {
					timeoutTimer = window.setTimeout(function () {
						jqXHR.abort("timeout");
					}, s.timeout);
				}

				try {
					completed = false;
					transport.send(requestHeaders, done);
				} catch (e) {

					// Rethrow post-completion exceptions
					if (completed) {
						throw e;
					}

					// Propagate others as results
					done(-1, e);
				}
			}

			// Callback for when everything is done
			function done(status, nativeStatusText, responses, headers) {
				var isSuccess,
				    success,
				    error,
				    response,
				    modified,
				    statusText = nativeStatusText;

				// Ignore repeat invocations
				if (completed) {
					return;
				}

				completed = true;

				// Clear timeout if it exists
				if (timeoutTimer) {
					window.clearTimeout(timeoutTimer);
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if (responses) {
					response = ajaxHandleResponses(s, jqXHR, responses);
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert(s, response, jqXHR, isSuccess);

				// If successful, handle type chaining
				if (isSuccess) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if (s.ifModified) {
						modified = jqXHR.getResponseHeader("Last-Modified");
						if (modified) {
							jQuery.lastModified[cacheURL] = modified;
						}
						modified = jqXHR.getResponseHeader("etag");
						if (modified) {
							jQuery.etag[cacheURL] = modified;
						}
					}

					// if no content
					if (status === 204 || s.type === "HEAD") {
						statusText = "nocontent";

						// if not modified
					} else if (status === 304) {
						statusText = "notmodified";

						// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if (status || !statusText) {
						statusText = "error";
						if (status < 0) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = (nativeStatusText || statusText) + "";

				// Success/Error
				if (isSuccess) {
					deferred.resolveWith(callbackContext, [success, statusText, jqXHR]);
				} else {
					deferred.rejectWith(callbackContext, [jqXHR, statusText, error]);
				}

				// Status-dependent callbacks
				jqXHR.statusCode(_statusCode);
				_statusCode = undefined;

				if (fireGlobals) {
					globalEventContext.trigger(isSuccess ? "ajaxSuccess" : "ajaxError", [jqXHR, s, isSuccess ? success : error]);
				}

				// Complete
				completeDeferred.fireWith(callbackContext, [jqXHR, statusText]);

				if (fireGlobals) {
					globalEventContext.trigger("ajaxComplete", [jqXHR, s]);

					// Handle the global AJAX counter
					if (! --jQuery.active) {
						jQuery.event.trigger("ajaxStop");
					}
				}
			}

			return jqXHR;
		},

		getJSON: function getJSON(url, data, callback) {
			return jQuery.get(url, data, callback, "json");
		},

		getScript: function getScript(url, callback) {
			return jQuery.get(url, undefined, callback, "script");
		}
	});

	jQuery.each(["get", "post"], function (i, method) {
		jQuery[method] = function (url, data, callback, type) {

			// Shift arguments if data argument was omitted
			if (jQuery.isFunction(data)) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax(jQuery.extend({
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject(url) && url));
		};
	});

	jQuery._evalUrl = function (url) {
		return jQuery.ajax({
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		});
	};

	jQuery.fn.extend({
		wrapAll: function wrapAll(html) {
			var wrap;

			if (this[0]) {
				if (jQuery.isFunction(html)) {
					html = html.call(this[0]);
				}

				// The elements to wrap the target around
				wrap = jQuery(html, this[0].ownerDocument).eq(0).clone(true);

				if (this[0].parentNode) {
					wrap.insertBefore(this[0]);
				}

				wrap.map(function () {
					var elem = this;

					while (elem.firstElementChild) {
						elem = elem.firstElementChild;
					}

					return elem;
				}).append(this);
			}

			return this;
		},

		wrapInner: function wrapInner(html) {
			if (jQuery.isFunction(html)) {
				return this.each(function (i) {
					jQuery(this).wrapInner(html.call(this, i));
				});
			}

			return this.each(function () {
				var self = jQuery(this),
				    contents = self.contents();

				if (contents.length) {
					contents.wrapAll(html);
				} else {
					self.append(html);
				}
			});
		},

		wrap: function wrap(html) {
			var isFunction = jQuery.isFunction(html);

			return this.each(function (i) {
				jQuery(this).wrapAll(isFunction ? html.call(this, i) : html);
			});
		},

		unwrap: function unwrap(selector) {
			this.parent(selector).not("body").each(function () {
				jQuery(this).replaceWith(this.childNodes);
			});
			return this;
		}
	});

	jQuery.expr.pseudos.hidden = function (elem) {
		return !jQuery.expr.pseudos.visible(elem);
	};
	jQuery.expr.pseudos.visible = function (elem) {
		return !!(elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length);
	};

	jQuery.ajaxSettings.xhr = function () {
		try {
			return new window.XMLHttpRequest();
		} catch (e) {}
	};

	var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	    xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && "withCredentials" in xhrSupported;
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport(function (options) {
		var _callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if (support.cors || xhrSupported && !options.crossDomain) {
			return {
				send: function send(headers, complete) {
					var i,
					    xhr = options.xhr();

					xhr.open(options.type, options.url, options.async, options.username, options.password);

					// Apply custom fields if provided
					if (options.xhrFields) {
						for (i in options.xhrFields) {
							xhr[i] = options.xhrFields[i];
						}
					}

					// Override mime type if needed
					if (options.mimeType && xhr.overrideMimeType) {
						xhr.overrideMimeType(options.mimeType);
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if (!options.crossDomain && !headers["X-Requested-With"]) {
						headers["X-Requested-With"] = "XMLHttpRequest";
					}

					// Set headers
					for (i in headers) {
						xhr.setRequestHeader(i, headers[i]);
					}

					// Callback
					_callback = function callback(type) {
						return function () {
							if (_callback) {
								_callback = errorCallback = xhr.onload = xhr.onerror = xhr.onabort = xhr.onreadystatechange = null;

								if (type === "abort") {
									xhr.abort();
								} else if (type === "error") {

									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if (typeof xhr.status !== "number") {
										complete(0, "error");
									} else {
										complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status, xhr.statusText);
									}
								} else {
									complete(xhrSuccessStatus[xhr.status] || xhr.status, xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									(xhr.responseType || "text") !== "text" || typeof xhr.responseText !== "string" ? { binary: xhr.response } : { text: xhr.responseText }, xhr.getAllResponseHeaders());
								}
							}
						};
					};

					// Listen to events
					xhr.onload = _callback();
					errorCallback = xhr.onerror = _callback("error");

					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if (xhr.onabort !== undefined) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function () {

							// Check readyState before timeout as it changes
							if (xhr.readyState === 4) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout(function () {
									if (_callback) {
										errorCallback();
									}
								});
							}
						};
					}

					// Create the abort callback
					_callback = _callback("abort");

					try {

						// Do send the request (this may raise an exception)
						xhr.send(options.hasContent && options.data || null);
					} catch (e) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if (_callback) {
							throw e;
						}
					}
				},

				abort: function abort() {
					if (_callback) {
						_callback();
					}
				}
			};
		}
	});

	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter(function (s) {
		if (s.crossDomain) {
			s.contents.script = false;
		}
	});

	// Install script dataType
	jQuery.ajaxSetup({
		accepts: {
			script: "text/javascript, application/javascript, " + "application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function textScript(text) {
				jQuery.globalEval(text);
				return text;
			}
		}
	});

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter("script", function (s) {
		if (s.cache === undefined) {
			s.cache = false;
		}
		if (s.crossDomain) {
			s.type = "GET";
		}
	});

	// Bind script tag hack transport
	jQuery.ajaxTransport("script", function (s) {

		// This transport only deals with cross domain requests
		if (s.crossDomain) {
			var script, _callback2;
			return {
				send: function send(_, complete) {
					script = jQuery("<script>").prop({
						charset: s.scriptCharset,
						src: s.url
					}).on("load error", _callback2 = function callback(evt) {
						script.remove();
						_callback2 = null;
						if (evt) {
							complete(evt.type === "error" ? 404 : 200, evt.type);
						}
					});

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild(script[0]);
				},
				abort: function abort() {
					if (_callback2) {
						_callback2();
					}
				}
			};
		}
	});

	var oldCallbacks = [],
	    rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup({
		jsonp: "callback",
		jsonpCallback: function jsonpCallback() {
			var callback = oldCallbacks.pop() || jQuery.expando + "_" + nonce++;
			this[callback] = true;
			return callback;
		}
	});

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter("json jsonp", function (s, originalSettings, jqXHR) {

		var callbackName,
		    overwritten,
		    responseContainer,
		    jsonProp = s.jsonp !== false && (rjsonp.test(s.url) ? "url" : typeof s.data === "string" && (s.contentType || "").indexOf("application/x-www-form-urlencoded") === 0 && rjsonp.test(s.data) && "data");

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if (jsonProp || s.dataTypes[0] === "jsonp") {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = jQuery.isFunction(s.jsonpCallback) ? s.jsonpCallback() : s.jsonpCallback;

			// Insert callback into url or form data
			if (jsonProp) {
				s[jsonProp] = s[jsonProp].replace(rjsonp, "$1" + callbackName);
			} else if (s.jsonp !== false) {
				s.url += (rquery.test(s.url) ? "&" : "?") + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters["script json"] = function () {
				if (!responseContainer) {
					jQuery.error(callbackName + " was not called");
				}
				return responseContainer[0];
			};

			// Force json dataType
			s.dataTypes[0] = "json";

			// Install callback
			overwritten = window[callbackName];
			window[callbackName] = function () {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always(function () {

				// If previous value didn't exist - remove it
				if (overwritten === undefined) {
					jQuery(window).removeProp(callbackName);

					// Otherwise restore preexisting value
				} else {
					window[callbackName] = overwritten;
				}

				// Save back as free
				if (s[callbackName]) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push(callbackName);
				}

				// Call if it was a function and we have a response
				if (responseContainer && jQuery.isFunction(overwritten)) {
					overwritten(responseContainer[0]);
				}

				responseContainer = overwritten = undefined;
			});

			// Delegate to script
			return "script";
		}
	});

	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = function () {
		var body = document.implementation.createHTMLDocument("").body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	}();

	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function (data, context, keepScripts) {
		if (typeof data !== "string") {
			return [];
		}
		if (typeof context === "boolean") {
			keepScripts = context;
			context = false;
		}

		var base, parsed, scripts;

		if (!context) {

			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if (support.createHTMLDocument) {
				context = document.implementation.createHTMLDocument("");

				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement("base");
				base.href = document.location.href;
				context.head.appendChild(base);
			} else {
				context = document;
			}
		}

		parsed = rsingleTag.exec(data);
		scripts = !keepScripts && [];

		// Single tag
		if (parsed) {
			return [context.createElement(parsed[1])];
		}

		parsed = buildFragment([data], context, scripts);

		if (scripts && scripts.length) {
			jQuery(scripts).remove();
		}

		return jQuery.merge([], parsed.childNodes);
	};

	/**
  * Load a url into a page
  */
	jQuery.fn.load = function (url, params, callback) {
		var selector,
		    type,
		    response,
		    self = this,
		    off = url.indexOf(" ");

		if (off > -1) {
			selector = stripAndCollapse(url.slice(off));
			url = url.slice(0, off);
		}

		// If it's a function
		if (jQuery.isFunction(params)) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

			// Otherwise, build a param string
		} else if (params && (typeof params === "undefined" ? "undefined" : _typeof(params)) === "object") {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if (self.length > 0) {
			jQuery.ajax({
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			}).done(function (responseText) {

				// Save response for use in complete callback
				response = arguments;

				self.html(selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append(jQuery.parseHTML(responseText)).find(selector) :

				// Otherwise use the full result
				responseText);

				// If the request succeeds, this function gets "data", "status", "jqXHR"
				// but they are ignored because response was set above.
				// If it fails, this function gets "jqXHR", "status", "error"
			}).always(callback && function (jqXHR, status) {
				self.each(function () {
					callback.apply(this, response || [jqXHR.responseText, status, jqXHR]);
				});
			});
		}

		return this;
	};

	// Attach a bunch of functions for handling common AJAX events
	jQuery.each(["ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend"], function (i, type) {
		jQuery.fn[type] = function (fn) {
			return this.on(type, fn);
		};
	});

	jQuery.expr.pseudos.animated = function (elem) {
		return jQuery.grep(jQuery.timers, function (fn) {
			return elem === fn.elem;
		}).length;
	};

	jQuery.offset = {
		setOffset: function setOffset(elem, options, i) {
			var curPosition,
			    curLeft,
			    curCSSTop,
			    curTop,
			    curOffset,
			    curCSSLeft,
			    calculatePosition,
			    position = jQuery.css(elem, "position"),
			    curElem = jQuery(elem),
			    props = {};

			// Set position first, in-case top/left are set even on static elem
			if (position === "static") {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css(elem, "top");
			curCSSLeft = jQuery.css(elem, "left");
			calculatePosition = (position === "absolute" || position === "fixed") && (curCSSTop + curCSSLeft).indexOf("auto") > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if (calculatePosition) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;
			} else {
				curTop = parseFloat(curCSSTop) || 0;
				curLeft = parseFloat(curCSSLeft) || 0;
			}

			if (jQuery.isFunction(options)) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call(elem, i, jQuery.extend({}, curOffset));
			}

			if (options.top != null) {
				props.top = options.top - curOffset.top + curTop;
			}
			if (options.left != null) {
				props.left = options.left - curOffset.left + curLeft;
			}

			if ("using" in options) {
				options.using.call(elem, props);
			} else {
				curElem.css(props);
			}
		}
	};

	jQuery.fn.extend({
		offset: function offset(options) {

			// Preserve chaining for setter
			if (arguments.length) {
				return options === undefined ? this : this.each(function (i) {
					jQuery.offset.setOffset(this, options, i);
				});
			}

			var doc,
			    docElem,
			    rect,
			    win,
			    elem = this[0];

			if (!elem) {
				return;
			}

			// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if (!elem.getClientRects().length) {
				return { top: 0, left: 0 };
			}

			rect = elem.getBoundingClientRect();

			doc = elem.ownerDocument;
			docElem = doc.documentElement;
			win = doc.defaultView;

			return {
				top: rect.top + win.pageYOffset - docElem.clientTop,
				left: rect.left + win.pageXOffset - docElem.clientLeft
			};
		},

		position: function position() {
			if (!this[0]) {
				return;
			}

			var offsetParent,
			    offset,
			    elem = this[0],
			    parentOffset = { top: 0, left: 0 };

			// Fixed elements are offset from window (parentOffset = {top:0, left: 0},
			// because it is its only offset parent
			if (jQuery.css(elem, "position") === "fixed") {

				// Assume getBoundingClientRect is there when computed position is fixed
				offset = elem.getBoundingClientRect();
			} else {

				// Get *real* offsetParent
				offsetParent = this.offsetParent();

				// Get correct offsets
				offset = this.offset();
				if (!nodeName(offsetParent[0], "html")) {
					parentOffset = offsetParent.offset();
				}

				// Add offsetParent borders
				parentOffset = {
					top: parentOffset.top + jQuery.css(offsetParent[0], "borderTopWidth", true),
					left: parentOffset.left + jQuery.css(offsetParent[0], "borderLeftWidth", true)
				};
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css(elem, "marginTop", true),
				left: offset.left - parentOffset.left - jQuery.css(elem, "marginLeft", true)
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function offsetParent() {
			return this.map(function () {
				var offsetParent = this.offsetParent;

				while (offsetParent && jQuery.css(offsetParent, "position") === "static") {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			});
		}
	});

	// Create scrollLeft and scrollTop methods
	jQuery.each({ scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function (method, prop) {
		var top = "pageYOffset" === prop;

		jQuery.fn[method] = function (val) {
			return access(this, function (elem, method, val) {

				// Coalesce documents and windows
				var win;
				if (jQuery.isWindow(elem)) {
					win = elem;
				} else if (elem.nodeType === 9) {
					win = elem.defaultView;
				}

				if (val === undefined) {
					return win ? win[prop] : elem[method];
				}

				if (win) {
					win.scrollTo(!top ? val : win.pageXOffset, top ? val : win.pageYOffset);
				} else {
					elem[method] = val;
				}
			}, method, val, arguments.length);
		};
	});

	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each(["top", "left"], function (i, prop) {
		jQuery.cssHooks[prop] = addGetHookIf(support.pixelPosition, function (elem, computed) {
			if (computed) {
				computed = curCSS(elem, prop);

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test(computed) ? jQuery(elem).position()[prop] + "px" : computed;
			}
		});
	});

	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each({ Height: "height", Width: "width" }, function (name, type) {
		jQuery.each({ padding: "inner" + name, content: type, "": "outer" + name }, function (defaultExtra, funcName) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[funcName] = function (margin, value) {
				var chainable = arguments.length && (defaultExtra || typeof margin !== "boolean"),
				    extra = defaultExtra || (margin === true || value === true ? "margin" : "border");

				return access(this, function (elem, type, value) {
					var doc;

					if (jQuery.isWindow(elem)) {

						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf("outer") === 0 ? elem["inner" + name] : elem.document.documentElement["client" + name];
					}

					// Get document width or height
					if (elem.nodeType === 9) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(elem.body["scroll" + name], doc["scroll" + name], elem.body["offset" + name], doc["offset" + name], doc["client" + name]);
					}

					return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css(elem, type, extra) :

					// Set width or height on the element
					jQuery.style(elem, type, value, extra);
				}, type, chainable ? margin : undefined, chainable);
			};
		});
	});

	jQuery.fn.extend({

		bind: function bind(types, data, fn) {
			return this.on(types, null, data, fn);
		},
		unbind: function unbind(types, fn) {
			return this.off(types, null, fn);
		},

		delegate: function delegate(selector, types, data, fn) {
			return this.on(types, selector, data, fn);
		},
		undelegate: function undelegate(selector, types, fn) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ? this.off(selector, "**") : this.off(types, selector || "**", fn);
		}
	});

	jQuery.holdReady = function (hold) {
		if (hold) {
			jQuery.readyWait++;
		} else {
			jQuery.ready(true);
		}
	};
	jQuery.isArray = Array.isArray;
	jQuery.parseJSON = JSON.parse;
	jQuery.nodeName = nodeName;

	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return jQuery;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}

	var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,


	// Map over the $ in case of overwrite
	_$ = window.$;

	jQuery.noConflict = function (deep) {
		if (window.$ === jQuery) {
			window.$ = _$;
		}

		if (deep && window.jQuery === jQuery) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if (!noGlobal) {
		window.jQuery = window.$ = jQuery;
	}

	return jQuery;
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)(module)))

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = function (module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function () {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function get() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function get() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};

/***/ }),
/* 6 */
/***/ (function(module, exports) {

/*!
Waypoints - 4.0.1
Copyright © 2011-2016 Caleb Troughton
Licensed under the MIT license.
https://github.com/imakewebthings/waypoints/blob/master/licenses.txt
*/
!function () {
  "use strict";
  function t(o) {
    if (!o) throw new Error("No options passed to Waypoint constructor");if (!o.element) throw new Error("No element option passed to Waypoint constructor");if (!o.handler) throw new Error("No handler option passed to Waypoint constructor");this.key = "waypoint-" + e, this.options = t.Adapter.extend({}, t.defaults, o), this.element = this.options.element, this.adapter = new t.Adapter(this.element), this.callback = o.handler, this.axis = this.options.horizontal ? "horizontal" : "vertical", this.enabled = this.options.enabled, this.triggerPoint = null, this.group = t.Group.findOrCreate({ name: this.options.group, axis: this.axis }), this.context = t.Context.findOrCreateByElement(this.options.context), t.offsetAliases[this.options.offset] && (this.options.offset = t.offsetAliases[this.options.offset]), this.group.add(this), this.context.add(this), i[this.key] = this, e += 1;
  }var e = 0,
      i = {};t.prototype.queueTrigger = function (t) {
    this.group.queueTrigger(this, t);
  }, t.prototype.trigger = function (t) {
    this.enabled && this.callback && this.callback.apply(this, t);
  }, t.prototype.destroy = function () {
    this.context.remove(this), this.group.remove(this), delete i[this.key];
  }, t.prototype.disable = function () {
    return this.enabled = !1, this;
  }, t.prototype.enable = function () {
    return this.context.refresh(), this.enabled = !0, this;
  }, t.prototype.next = function () {
    return this.group.next(this);
  }, t.prototype.previous = function () {
    return this.group.previous(this);
  }, t.invokeAll = function (t) {
    var e = [];for (var o in i) {
      e.push(i[o]);
    }for (var n = 0, r = e.length; r > n; n++) {
      e[n][t]();
    }
  }, t.destroyAll = function () {
    t.invokeAll("destroy");
  }, t.disableAll = function () {
    t.invokeAll("disable");
  }, t.enableAll = function () {
    t.Context.refreshAll();for (var e in i) {
      i[e].enabled = !0;
    }return this;
  }, t.refreshAll = function () {
    t.Context.refreshAll();
  }, t.viewportHeight = function () {
    return window.innerHeight || document.documentElement.clientHeight;
  }, t.viewportWidth = function () {
    return document.documentElement.clientWidth;
  }, t.adapters = [], t.defaults = { context: window, continuous: !0, enabled: !0, group: "default", horizontal: !1, offset: 0 }, t.offsetAliases = { "bottom-in-view": function bottomInView() {
      return this.context.innerHeight() - this.adapter.outerHeight();
    }, "right-in-view": function rightInView() {
      return this.context.innerWidth() - this.adapter.outerWidth();
    } }, window.Waypoint = t;
}(), function () {
  "use strict";
  function t(t) {
    window.setTimeout(t, 1e3 / 60);
  }function e(t) {
    this.element = t, this.Adapter = n.Adapter, this.adapter = new this.Adapter(t), this.key = "waypoint-context-" + i, this.didScroll = !1, this.didResize = !1, this.oldScroll = { x: this.adapter.scrollLeft(), y: this.adapter.scrollTop() }, this.waypoints = { vertical: {}, horizontal: {} }, t.waypointContextKey = this.key, o[t.waypointContextKey] = this, i += 1, n.windowContext || (n.windowContext = !0, n.windowContext = new e(window)), this.createThrottledScrollHandler(), this.createThrottledResizeHandler();
  }var i = 0,
      o = {},
      n = window.Waypoint,
      r = window.onload;e.prototype.add = function (t) {
    var e = t.options.horizontal ? "horizontal" : "vertical";this.waypoints[e][t.key] = t, this.refresh();
  }, e.prototype.checkEmpty = function () {
    var t = this.Adapter.isEmptyObject(this.waypoints.horizontal),
        e = this.Adapter.isEmptyObject(this.waypoints.vertical),
        i = this.element == this.element.window;t && e && !i && (this.adapter.off(".waypoints"), delete o[this.key]);
  }, e.prototype.createThrottledResizeHandler = function () {
    function t() {
      e.handleResize(), e.didResize = !1;
    }var e = this;this.adapter.on("resize.waypoints", function () {
      e.didResize || (e.didResize = !0, n.requestAnimationFrame(t));
    });
  }, e.prototype.createThrottledScrollHandler = function () {
    function t() {
      e.handleScroll(), e.didScroll = !1;
    }var e = this;this.adapter.on("scroll.waypoints", function () {
      (!e.didScroll || n.isTouch) && (e.didScroll = !0, n.requestAnimationFrame(t));
    });
  }, e.prototype.handleResize = function () {
    n.Context.refreshAll();
  }, e.prototype.handleScroll = function () {
    var t = {},
        e = { horizontal: { newScroll: this.adapter.scrollLeft(), oldScroll: this.oldScroll.x, forward: "right", backward: "left" }, vertical: { newScroll: this.adapter.scrollTop(), oldScroll: this.oldScroll.y, forward: "down", backward: "up" } };for (var i in e) {
      var o = e[i],
          n = o.newScroll > o.oldScroll,
          r = n ? o.forward : o.backward;for (var s in this.waypoints[i]) {
        var a = this.waypoints[i][s];if (null !== a.triggerPoint) {
          var l = o.oldScroll < a.triggerPoint,
              h = o.newScroll >= a.triggerPoint,
              p = l && h,
              u = !l && !h;(p || u) && (a.queueTrigger(r), t[a.group.id] = a.group);
        }
      }
    }for (var c in t) {
      t[c].flushTriggers();
    }this.oldScroll = { x: e.horizontal.newScroll, y: e.vertical.newScroll };
  }, e.prototype.innerHeight = function () {
    return this.element == this.element.window ? n.viewportHeight() : this.adapter.innerHeight();
  }, e.prototype.remove = function (t) {
    delete this.waypoints[t.axis][t.key], this.checkEmpty();
  }, e.prototype.innerWidth = function () {
    return this.element == this.element.window ? n.viewportWidth() : this.adapter.innerWidth();
  }, e.prototype.destroy = function () {
    var t = [];for (var e in this.waypoints) {
      for (var i in this.waypoints[e]) {
        t.push(this.waypoints[e][i]);
      }
    }for (var o = 0, n = t.length; n > o; o++) {
      t[o].destroy();
    }
  }, e.prototype.refresh = function () {
    var t,
        e = this.element == this.element.window,
        i = e ? void 0 : this.adapter.offset(),
        o = {};this.handleScroll(), t = { horizontal: { contextOffset: e ? 0 : i.left, contextScroll: e ? 0 : this.oldScroll.x, contextDimension: this.innerWidth(), oldScroll: this.oldScroll.x, forward: "right", backward: "left", offsetProp: "left" }, vertical: { contextOffset: e ? 0 : i.top, contextScroll: e ? 0 : this.oldScroll.y, contextDimension: this.innerHeight(), oldScroll: this.oldScroll.y, forward: "down", backward: "up", offsetProp: "top" } };for (var r in t) {
      var s = t[r];for (var a in this.waypoints[r]) {
        var l,
            h,
            p,
            u,
            c,
            d = this.waypoints[r][a],
            f = d.options.offset,
            w = d.triggerPoint,
            y = 0,
            g = null == w;d.element !== d.element.window && (y = d.adapter.offset()[s.offsetProp]), "function" == typeof f ? f = f.apply(d) : "string" == typeof f && (f = parseFloat(f), d.options.offset.indexOf("%") > -1 && (f = Math.ceil(s.contextDimension * f / 100))), l = s.contextScroll - s.contextOffset, d.triggerPoint = Math.floor(y + l - f), h = w < s.oldScroll, p = d.triggerPoint >= s.oldScroll, u = h && p, c = !h && !p, !g && u ? (d.queueTrigger(s.backward), o[d.group.id] = d.group) : !g && c ? (d.queueTrigger(s.forward), o[d.group.id] = d.group) : g && s.oldScroll >= d.triggerPoint && (d.queueTrigger(s.forward), o[d.group.id] = d.group);
      }
    }return n.requestAnimationFrame(function () {
      for (var t in o) {
        o[t].flushTriggers();
      }
    }), this;
  }, e.findOrCreateByElement = function (t) {
    return e.findByElement(t) || new e(t);
  }, e.refreshAll = function () {
    for (var t in o) {
      o[t].refresh();
    }
  }, e.findByElement = function (t) {
    return o[t.waypointContextKey];
  }, window.onload = function () {
    r && r(), e.refreshAll();
  }, n.requestAnimationFrame = function (e) {
    var i = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || t;i.call(window, e);
  }, n.Context = e;
}(), function () {
  "use strict";
  function t(t, e) {
    return t.triggerPoint - e.triggerPoint;
  }function e(t, e) {
    return e.triggerPoint - t.triggerPoint;
  }function i(t) {
    this.name = t.name, this.axis = t.axis, this.id = this.name + "-" + this.axis, this.waypoints = [], this.clearTriggerQueues(), o[this.axis][this.name] = this;
  }var o = { vertical: {}, horizontal: {} },
      n = window.Waypoint;i.prototype.add = function (t) {
    this.waypoints.push(t);
  }, i.prototype.clearTriggerQueues = function () {
    this.triggerQueues = { up: [], down: [], left: [], right: [] };
  }, i.prototype.flushTriggers = function () {
    for (var i in this.triggerQueues) {
      var o = this.triggerQueues[i],
          n = "up" === i || "left" === i;o.sort(n ? e : t);for (var r = 0, s = o.length; s > r; r += 1) {
        var a = o[r];(a.options.continuous || r === o.length - 1) && a.trigger([i]);
      }
    }this.clearTriggerQueues();
  }, i.prototype.next = function (e) {
    this.waypoints.sort(t);var i = n.Adapter.inArray(e, this.waypoints),
        o = i === this.waypoints.length - 1;return o ? null : this.waypoints[i + 1];
  }, i.prototype.previous = function (e) {
    this.waypoints.sort(t);var i = n.Adapter.inArray(e, this.waypoints);return i ? this.waypoints[i - 1] : null;
  }, i.prototype.queueTrigger = function (t, e) {
    this.triggerQueues[e].push(t);
  }, i.prototype.remove = function (t) {
    var e = n.Adapter.inArray(t, this.waypoints);e > -1 && this.waypoints.splice(e, 1);
  }, i.prototype.first = function () {
    return this.waypoints[0];
  }, i.prototype.last = function () {
    return this.waypoints[this.waypoints.length - 1];
  }, i.findOrCreate = function (t) {
    return o[t.axis][t.name] || new i(t);
  }, n.Group = i;
}(), function () {
  "use strict";
  function t(t) {
    this.$element = e(t);
  }var e = window.jQuery,
      i = window.Waypoint;e.each(["innerHeight", "innerWidth", "off", "offset", "on", "outerHeight", "outerWidth", "scrollLeft", "scrollTop"], function (e, i) {
    t.prototype[i] = function () {
      var t = Array.prototype.slice.call(arguments);return this.$element[i].apply(this.$element, t);
    };
  }), e.each(["extend", "inArray", "isEmptyObject"], function (i, o) {
    t[o] = e[o];
  }), i.adapters.push({ name: "jquery", Adapter: t }), i.Adapter = t;
}(), function () {
  "use strict";
  function t(t) {
    return function () {
      var i = [],
          o = arguments[0];return t.isFunction(arguments[0]) && (o = t.extend({}, arguments[1]), o.handler = arguments[0]), this.each(function () {
        var n = t.extend({}, o, { element: this });"string" == typeof n.context && (n.context = t(this).closest(n.context)[0]), i.push(new e(n));
      }), i;
    };
  }var e = window.Waypoint;window.jQuery && (window.jQuery.fn.waypoint = t(window.jQuery)), window.Zepto && (window.Zepto.fn.waypoint = t(window.Zepto));
}();

/***/ }),
/* 7 */
/***/ (function(module, exports) {

/*!
Waypoints Sticky Element Shortcut - 4.0.1
Copyright © 2011-2016 Caleb Troughton
Licensed under the MIT license.
https://github.com/imakewebthings/waypoints/blob/master/licenses.txt
*/
!function () {
  "use strict";
  function t(s) {
    this.options = e.extend({}, i.defaults, t.defaults, s), this.element = this.options.element, this.$element = e(this.element), this.createWrapper(), this.createWaypoint();
  }var e = window.jQuery,
      i = window.Waypoint;t.prototype.createWaypoint = function () {
    var t = this.options.handler;this.waypoint = new i(e.extend({}, this.options, { element: this.wrapper, handler: e.proxy(function (e) {
        var i = this.options.direction.indexOf(e) > -1,
            s = i ? this.$element.outerHeight(!0) : "";this.$wrapper.height(s), this.$element.toggleClass(this.options.stuckClass, i), t && t.call(this, e);
      }, this) }));
  }, t.prototype.createWrapper = function () {
    this.options.wrapper && this.$element.wrap(this.options.wrapper), this.$wrapper = this.$element.parent(), this.wrapper = this.$wrapper[0];
  }, t.prototype.destroy = function () {
    this.$element.parent()[0] === this.wrapper && (this.waypoint.destroy(), this.$element.removeClass(this.options.stuckClass), this.options.wrapper && this.$element.unwrap());
  }, t.defaults = { wrapper: '<div class="sticky-wrapper" />', stuckClass: "stuck", direction: "down right" }, i.Sticky = t;
}();

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
    return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

/*!
* Customized version of iScroll.js 0.0.5
* It fixes bugs affecting its integration with fullpage.js
*/
/*! iScroll v5.2.0 ~ (c) 2008-2016 Matteo Spinelli ~ http://cubiq.org/license */
(function (window, document, Math) {
    var rAF = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
        window.setTimeout(callback, 1000 / 60);
    };

    var utils = function () {
        var me = {};

        var _elementStyle = document.createElement('div').style;
        var _vendor = function () {
            var vendors = ['t', 'webkitT', 'MozT', 'msT', 'OT'],
                transform,
                i = 0,
                l = vendors.length;

            for (; i < l; i++) {
                transform = vendors[i] + 'ransform';
                if (transform in _elementStyle) return vendors[i].substr(0, vendors[i].length - 1);
            }

            return false;
        }();

        function _prefixStyle(style) {
            if (_vendor === false) return false;
            if (_vendor === '') return style;
            return _vendor + style.charAt(0).toUpperCase() + style.substr(1);
        }

        me.getTime = Date.now || function getTime() {
            return new Date().getTime();
        };

        me.extend = function (target, obj) {
            for (var i in obj) {
                target[i] = obj[i];
            }
        };

        me.addEvent = function (el, type, fn, capture) {
            el.addEventListener(type, fn, !!capture);
        };

        me.removeEvent = function (el, type, fn, capture) {
            el.removeEventListener(type, fn, !!capture);
        };

        me.prefixPointerEvent = function (pointerEvent) {
            return window.MSPointerEvent ? 'MSPointer' + pointerEvent.charAt(7).toUpperCase() + pointerEvent.substr(8) : pointerEvent;
        };

        me.momentum = function (current, start, time, lowerMargin, wrapperSize, deceleration) {
            var distance = current - start,
                speed = Math.abs(distance) / time,
                destination,
                duration;

            deceleration = deceleration === undefined ? 0.0006 : deceleration;

            destination = current + speed * speed / (2 * deceleration) * (distance < 0 ? -1 : 1);
            duration = speed / deceleration;

            if (destination < lowerMargin) {
                destination = wrapperSize ? lowerMargin - wrapperSize / 2.5 * (speed / 8) : lowerMargin;
                distance = Math.abs(destination - current);
                duration = distance / speed;
            } else if (destination > 0) {
                destination = wrapperSize ? wrapperSize / 2.5 * (speed / 8) : 0;
                distance = Math.abs(current) + destination;
                duration = distance / speed;
            }

            return {
                destination: Math.round(destination),
                duration: duration
            };
        };

        var _transform = _prefixStyle('transform');

        me.extend(me, {
            hasTransform: _transform !== false,
            hasPerspective: _prefixStyle('perspective') in _elementStyle,
            hasTouch: 'ontouchstart' in window,
            hasPointer: !!(window.PointerEvent || window.MSPointerEvent), // IE10 is prefixed
            hasTransition: _prefixStyle('transition') in _elementStyle
        });

        /*
        This should find all Android browsers lower than build 535.19 (both stock browser and webview)
        - galaxy S2 is ok
        - 2.3.6 : `AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1`
        - 4.0.4 : `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`
        - galaxy S3 is badAndroid (stock brower, webview)
         `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`
        - galaxy S4 is badAndroid (stock brower, webview)
         `AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30`
        - galaxy S5 is OK
         `AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36 (Chrome/)`
        - galaxy S6 is OK
         `AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Mobile Safari/537.36 (Chrome/)`
        */
        me.isBadAndroid = function () {
            var appVersion = window.navigator.appVersion;
            // Android browser is not a chrome browser.
            if (/Android/.test(appVersion) && !/Chrome\/\d/.test(appVersion)) {
                var safariVersion = appVersion.match(/Safari\/(\d+.\d)/);
                if (safariVersion && (typeof safariVersion === 'undefined' ? 'undefined' : _typeof(safariVersion)) === "object" && safariVersion.length >= 2) {
                    return parseFloat(safariVersion[1]) < 535.19;
                } else {
                    return true;
                }
            } else {
                return false;
            }
        }();

        me.extend(me.style = {}, {
            transform: _transform,
            transitionTimingFunction: _prefixStyle('transitionTimingFunction'),
            transitionDuration: _prefixStyle('transitionDuration'),
            transitionDelay: _prefixStyle('transitionDelay'),
            transformOrigin: _prefixStyle('transformOrigin')
        });

        me.hasClass = function (e, c) {
            var re = new RegExp("(^|\\s)" + c + "(\\s|$)");
            return re.test(e.className);
        };

        me.addClass = function (e, c) {
            if (me.hasClass(e, c)) {
                return;
            }

            var newclass = e.className.split(' ');
            newclass.push(c);
            e.className = newclass.join(' ');
        };

        me.removeClass = function (e, c) {
            if (!me.hasClass(e, c)) {
                return;
            }

            var re = new RegExp("(^|\\s)" + c + "(\\s|$)", 'g');
            e.className = e.className.replace(re, ' ');
        };

        me.offset = function (el) {
            var left = -el.offsetLeft,
                top = -el.offsetTop;

            // jshint -W084
            while (el = el.offsetParent) {
                left -= el.offsetLeft;
                top -= el.offsetTop;
            }
            // jshint +W084

            return {
                left: left,
                top: top
            };
        };

        me.preventDefaultException = function (el, exceptions) {
            for (var i in exceptions) {
                if (exceptions[i].test(el[i])) {
                    return true;
                }
            }

            return false;
        };

        me.extend(me.eventType = {}, {
            touchstart: 1,
            touchmove: 1,
            touchend: 1,

            mousedown: 2,
            mousemove: 2,
            mouseup: 2,

            pointerdown: 3,
            pointermove: 3,
            pointerup: 3,

            MSPointerDown: 3,
            MSPointerMove: 3,
            MSPointerUp: 3
        });

        me.extend(me.ease = {}, {
            quadratic: {
                style: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
                fn: function fn(k) {
                    return k * (2 - k);
                }
            },
            circular: {
                style: 'cubic-bezier(0.1, 0.57, 0.1, 1)', // Not properly "circular" but this looks better, it should be (0.075, 0.82, 0.165, 1)
                fn: function fn(k) {
                    return Math.sqrt(1 - --k * k);
                }
            },
            back: {
                style: 'cubic-bezier(0.175, 0.885, 0.32, 1.275)',
                fn: function fn(k) {
                    var b = 4;
                    return (k = k - 1) * k * ((b + 1) * k + b) + 1;
                }
            },
            bounce: {
                style: '',
                fn: function fn(k) {
                    if ((k /= 1) < 1 / 2.75) {
                        return 7.5625 * k * k;
                    } else if (k < 2 / 2.75) {
                        return 7.5625 * (k -= 1.5 / 2.75) * k + 0.75;
                    } else if (k < 2.5 / 2.75) {
                        return 7.5625 * (k -= 2.25 / 2.75) * k + 0.9375;
                    } else {
                        return 7.5625 * (k -= 2.625 / 2.75) * k + 0.984375;
                    }
                }
            },
            elastic: {
                style: '',
                fn: function fn(k) {
                    var f = 0.22,
                        e = 0.4;

                    if (k === 0) {
                        return 0;
                    }
                    if (k == 1) {
                        return 1;
                    }

                    return e * Math.pow(2, -10 * k) * Math.sin((k - f / 4) * (2 * Math.PI) / f) + 1;
                }
            }
        });

        me.tap = function (e, eventName) {
            var ev = document.createEvent('Event');
            ev.initEvent(eventName, true, true);
            ev.pageX = e.pageX;
            ev.pageY = e.pageY;
            e.target.dispatchEvent(ev);
        };

        me.click = function (e) {
            var target = e.target,
                ev;

            if (!/(SELECT|INPUT|TEXTAREA)/i.test(target.tagName)) {
                // https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/initMouseEvent
                // initMouseEvent is deprecated.
                ev = new MouseEvent('click', {
                    view: e.view || window,
                    detail: 1,
                    screenX: target.screenX || 0,
                    screenY: target.screenY || 0,
                    clientX: target.clientX || 0,
                    clientY: target.clientY || 0,
                    ctrlKey: !!e.ctrlKey,
                    altKey: !!e.altKey,
                    shiftKey: !!e.shiftKey,
                    metaKey: !!e.metaKey,
                    button: 0,
                    relatedTarget: null,
                    _constructed: true
                });

                target.dispatchEvent(ev);
            }
        };

        return me;
    }();
    window.IScroll = function (el, options) {
        this.wrapper = typeof el == 'string' ? document.querySelector(el) : el;
        this.scroller = this.wrapper.children[0];
        this.scrollerStyle = this.scroller.style; // cache style for better performance

        this.options = {

            resizeScrollbars: true,

            mouseWheelSpeed: 20,

            snapThreshold: 0.334,

            // INSERT POINT: OPTIONS
            disablePointer: !utils.hasPointer,
            disableTouch: utils.hasPointer || !utils.hasTouch,
            disableMouse: utils.hasPointer || utils.hasTouch,
            startX: 0,
            startY: 0,
            scrollY: true,
            directionLockThreshold: 5,
            momentum: true,

            bounce: true,
            bounceTime: 600,
            bounceEasing: '',

            preventDefault: true,
            preventDefaultException: { tagName: /^(INPUT|TEXTAREA|BUTTON|SELECT|LABEL|A)$/ },

            HWCompositing: true,
            useTransition: true,
            useTransform: true,
            bindToWrapper: typeof window.onmousedown === "undefined"
        };

        for (var i in options) {
            this.options[i] = options[i];
        }

        // Normalize options
        this.translateZ = this.options.HWCompositing && utils.hasPerspective ? ' translateZ(0)' : '';

        this.options.useTransition = utils.hasTransition && this.options.useTransition;
        this.options.useTransform = utils.hasTransform && this.options.useTransform;

        this.options.eventPassthrough = this.options.eventPassthrough === true ? 'vertical' : this.options.eventPassthrough;
        this.options.preventDefault = !this.options.eventPassthrough && this.options.preventDefault;

        // If you want eventPassthrough I have to lock one of the axes
        this.options.scrollY = this.options.eventPassthrough == 'vertical' ? false : this.options.scrollY;
        this.options.scrollX = this.options.eventPassthrough == 'horizontal' ? false : this.options.scrollX;

        // With eventPassthrough we also need lockDirection mechanism
        this.options.freeScroll = this.options.freeScroll && !this.options.eventPassthrough;
        this.options.directionLockThreshold = this.options.eventPassthrough ? 0 : this.options.directionLockThreshold;

        this.options.bounceEasing = typeof this.options.bounceEasing == 'string' ? utils.ease[this.options.bounceEasing] || utils.ease.circular : this.options.bounceEasing;

        this.options.resizePolling = this.options.resizePolling === undefined ? 60 : this.options.resizePolling;

        if (this.options.tap === true) {
            this.options.tap = 'tap';
        }

        // https://github.com/cubiq/iscroll/issues/1029
        if (!this.options.useTransition && !this.options.useTransform) {
            if (!/relative|absolute/i.test(this.scrollerStyle.position)) {
                this.scrollerStyle.position = "relative";
            }
        }

        if (this.options.shrinkScrollbars == 'scale') {
            this.options.useTransition = false;
        }

        this.options.invertWheelDirection = this.options.invertWheelDirection ? -1 : 1;

        // INSERT POINT: NORMALIZATION

        // Some defaults
        this.x = 0;
        this.y = 0;
        this.directionX = 0;
        this.directionY = 0;
        this._events = {};

        // INSERT POINT: DEFAULTS

        this._init();
        this.refresh();

        this.scrollTo(this.options.startX, this.options.startY);
        this.enable();
    };

    IScroll.prototype = {
        version: '5.2.0',

        _init: function _init() {
            this._initEvents();

            if (this.options.scrollbars || this.options.indicators) {
                this._initIndicators();
            }

            if (this.options.mouseWheel) {
                this._initWheel();
            }

            if (this.options.snap) {
                this._initSnap();
            }

            if (this.options.keyBindings) {
                this._initKeys();
            }

            // INSERT POINT: _init
        },

        destroy: function destroy() {
            this._initEvents(true);
            clearTimeout(this.resizeTimeout);
            this.resizeTimeout = null;
            this._execEvent('destroy');
        },

        _transitionEnd: function _transitionEnd(e) {
            if (e.target != this.scroller || !this.isInTransition) {
                return;
            }

            this._transitionTime();
            if (!this.resetPosition(this.options.bounceTime)) {
                this.isInTransition = false;
                this._execEvent('scrollEnd');
            }
        },

        _start: function _start(e) {
            // React to left mouse button only
            if (utils.eventType[e.type] != 1) {
                // for button property
                // http://unixpapa.com/js/mouse.html
                var button;
                if (!e.which) {
                    /* IE case */
                    button = e.button < 2 ? 0 : e.button == 4 ? 1 : 2;
                } else {
                    /* All others */
                    button = e.button;
                }
                if (button !== 0) {
                    return;
                }
            }

            if (!this.enabled || this.initiated && utils.eventType[e.type] !== this.initiated) {
                return;
            }

            if (this.options.preventDefault && !utils.isBadAndroid && !utils.preventDefaultException(e.target, this.options.preventDefaultException)) {
                e.preventDefault();
            }

            var point = e.touches ? e.touches[0] : e,
                pos;

            this.initiated = utils.eventType[e.type];
            this.moved = false;
            this.distX = 0;
            this.distY = 0;
            this.directionX = 0;
            this.directionY = 0;
            this.directionLocked = 0;

            this.startTime = utils.getTime();

            if (this.options.useTransition && this.isInTransition) {
                this._transitionTime();
                this.isInTransition = false;
                pos = this.getComputedPosition();
                this._translate(Math.round(pos.x), Math.round(pos.y));
                this._execEvent('scrollEnd');
            } else if (!this.options.useTransition && this.isAnimating) {
                this.isAnimating = false;
                this._execEvent('scrollEnd');
            }

            this.startX = this.x;
            this.startY = this.y;
            this.absStartX = this.x;
            this.absStartY = this.y;
            this.pointX = point.pageX;
            this.pointY = point.pageY;

            this._execEvent('beforeScrollStart');
        },

        _move: function _move(e) {
            if (!this.enabled || utils.eventType[e.type] !== this.initiated) {
                return;
            }

            if (this.options.preventDefault) {
                // increases performance on Android? TODO: check!
                e.preventDefault();
            }

            var point = e.touches ? e.touches[0] : e,
                deltaX = point.pageX - this.pointX,
                deltaY = point.pageY - this.pointY,
                timestamp = utils.getTime(),
                newX,
                newY,
                absDistX,
                absDistY;

            this.pointX = point.pageX;
            this.pointY = point.pageY;

            this.distX += deltaX;
            this.distY += deltaY;
            absDistX = Math.abs(this.distX);
            absDistY = Math.abs(this.distY);

            // We need to move at least 10 pixels for the scrolling to initiate
            if (timestamp - this.endTime > 300 && absDistX < 10 && absDistY < 10) {
                return;
            }

            // If you are scrolling in one direction lock the other
            if (!this.directionLocked && !this.options.freeScroll) {
                if (absDistX > absDistY + this.options.directionLockThreshold) {
                    this.directionLocked = 'h'; // lock horizontally
                } else if (absDistY >= absDistX + this.options.directionLockThreshold) {
                    this.directionLocked = 'v'; // lock vertically
                } else {
                    this.directionLocked = 'n'; // no lock
                }
            }

            if (this.directionLocked == 'h') {
                if (this.options.eventPassthrough == 'vertical') {
                    e.preventDefault();
                } else if (this.options.eventPassthrough == 'horizontal') {
                    this.initiated = false;
                    return;
                }

                deltaY = 0;
            } else if (this.directionLocked == 'v') {
                if (this.options.eventPassthrough == 'horizontal') {
                    e.preventDefault();
                } else if (this.options.eventPassthrough == 'vertical') {
                    this.initiated = false;
                    return;
                }

                deltaX = 0;
            }

            deltaX = this.hasHorizontalScroll ? deltaX : 0;
            deltaY = this.hasVerticalScroll ? deltaY : 0;

            newX = this.x + deltaX;
            newY = this.y + deltaY;

            // Slow down if outside of the boundaries
            if (newX > 0 || newX < this.maxScrollX) {
                newX = this.options.bounce ? this.x + deltaX / 3 : newX > 0 ? 0 : this.maxScrollX;
            }
            if (newY > 0 || newY < this.maxScrollY) {
                newY = this.options.bounce ? this.y + deltaY / 3 : newY > 0 ? 0 : this.maxScrollY;
            }

            this.directionX = deltaX > 0 ? -1 : deltaX < 0 ? 1 : 0;
            this.directionY = deltaY > 0 ? -1 : deltaY < 0 ? 1 : 0;

            if (!this.moved) {
                this._execEvent('scrollStart');
            }

            this.moved = true;

            this._translate(newX, newY);

            /* REPLACE START: _move */

            if (timestamp - this.startTime > 300) {
                this.startTime = timestamp;
                this.startX = this.x;
                this.startY = this.y;
            }

            /* REPLACE END: _move */
        },

        _end: function _end(e) {
            if (!this.enabled || utils.eventType[e.type] !== this.initiated) {
                return;
            }

            if (this.options.preventDefault && !utils.preventDefaultException(e.target, this.options.preventDefaultException)) {
                e.preventDefault();
            }

            var point = e.changedTouches ? e.changedTouches[0] : e,
                momentumX,
                momentumY,
                duration = utils.getTime() - this.startTime,
                newX = Math.round(this.x),
                newY = Math.round(this.y),
                distanceX = Math.abs(newX - this.startX),
                distanceY = Math.abs(newY - this.startY),
                time = 0,
                easing = '';

            this.isInTransition = 0;
            this.initiated = 0;
            this.endTime = utils.getTime();

            // reset if we are outside of the boundaries
            if (this.resetPosition(this.options.bounceTime)) {
                return;
            }

            this.scrollTo(newX, newY); // ensures that the last position is rounded

            // we scrolled less than 10 pixels
            if (!this.moved) {
                if (this.options.tap) {
                    utils.tap(e, this.options.tap);
                }

                if (this.options.click) {
                    utils.click(e);
                }

                this._execEvent('scrollCancel');
                return;
            }

            if (this._events.flick && duration < 200 && distanceX < 100 && distanceY < 100) {
                this._execEvent('flick');
                return;
            }

            // start momentum animation if needed
            if (this.options.momentum && duration < 300) {
                momentumX = this.hasHorizontalScroll ? utils.momentum(this.x, this.startX, duration, this.maxScrollX, this.options.bounce ? this.wrapperWidth : 0, this.options.deceleration) : { destination: newX, duration: 0 };
                momentumY = this.hasVerticalScroll ? utils.momentum(this.y, this.startY, duration, this.maxScrollY, this.options.bounce ? this.wrapperHeight : 0, this.options.deceleration) : { destination: newY, duration: 0 };
                newX = momentumX.destination;
                newY = momentumY.destination;
                time = Math.max(momentumX.duration, momentumY.duration);
                this.isInTransition = 1;
            }

            if (this.options.snap) {
                var snap = this._nearestSnap(newX, newY);
                this.currentPage = snap;
                time = this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(newX - snap.x), 1000), Math.min(Math.abs(newY - snap.y), 1000)), 300);
                newX = snap.x;
                newY = snap.y;

                this.directionX = 0;
                this.directionY = 0;
                easing = this.options.bounceEasing;
            }

            // INSERT POINT: _end

            if (newX != this.x || newY != this.y) {
                // change easing function when scroller goes out of the boundaries
                if (newX > 0 || newX < this.maxScrollX || newY > 0 || newY < this.maxScrollY) {
                    easing = utils.ease.quadratic;
                }

                this.scrollTo(newX, newY, time, easing);
                return;
            }

            this._execEvent('scrollEnd');
        },

        _resize: function _resize() {
            var that = this;

            clearTimeout(this.resizeTimeout);

            this.resizeTimeout = setTimeout(function () {
                that.refresh();
            }, this.options.resizePolling);
        },

        resetPosition: function resetPosition(time) {
            var x = this.x,
                y = this.y;

            time = time || 0;

            if (!this.hasHorizontalScroll || this.x > 0) {
                x = 0;
            } else if (this.x < this.maxScrollX) {
                x = this.maxScrollX;
            }

            if (!this.hasVerticalScroll || this.y > 0) {
                y = 0;
            } else if (this.y < this.maxScrollY) {
                y = this.maxScrollY;
            }

            if (x == this.x && y == this.y) {
                return false;
            }

            this.scrollTo(x, y, time, this.options.bounceEasing);

            return true;
        },

        disable: function disable() {
            this.enabled = false;
        },

        enable: function enable() {
            this.enabled = true;
        },

        refresh: function refresh() {
            var rf = this.wrapper.offsetHeight; // Force reflow

            this.wrapperWidth = this.wrapper.clientWidth;
            this.wrapperHeight = this.wrapper.clientHeight;

            /* REPLACE START: refresh */

            this.scrollerWidth = this.scroller.offsetWidth;
            this.scrollerHeight = this.scroller.offsetHeight;

            this.maxScrollX = this.wrapperWidth - this.scrollerWidth;
            this.maxScrollY = this.wrapperHeight - this.scrollerHeight;

            /* REPLACE END: refresh */

            this.hasHorizontalScroll = this.options.scrollX && this.maxScrollX < 0;
            this.hasVerticalScroll = this.options.scrollY && this.maxScrollY < 0;

            if (!this.hasHorizontalScroll) {
                this.maxScrollX = 0;
                this.scrollerWidth = this.wrapperWidth;
            }

            if (!this.hasVerticalScroll) {
                this.maxScrollY = 0;
                this.scrollerHeight = this.wrapperHeight;
            }

            this.endTime = 0;
            this.directionX = 0;
            this.directionY = 0;

            this.wrapperOffset = utils.offset(this.wrapper);

            this._execEvent('refresh');

            this.resetPosition();

            // INSERT POINT: _refresh
        },

        on: function on(type, fn) {
            if (!this._events[type]) {
                this._events[type] = [];
            }

            this._events[type].push(fn);
        },

        off: function off(type, fn) {
            if (!this._events[type]) {
                return;
            }

            var index = this._events[type].indexOf(fn);

            if (index > -1) {
                this._events[type].splice(index, 1);
            }
        },

        _execEvent: function _execEvent(type) {
            if (!this._events[type]) {
                return;
            }

            var i = 0,
                l = this._events[type].length;

            if (!l) {
                return;
            }

            for (; i < l; i++) {
                this._events[type][i].apply(this, [].slice.call(arguments, 1));
            }
        },

        scrollBy: function scrollBy(x, y, time, easing) {
            x = this.x + x;
            y = this.y + y;
            time = time || 0;

            this.scrollTo(x, y, time, easing);
        },

        scrollTo: function scrollTo(x, y, time, easing) {
            easing = easing || utils.ease.circular;

            this.isInTransition = this.options.useTransition && time > 0;
            var transitionType = this.options.useTransition && easing.style;
            if (!time || transitionType) {
                if (transitionType) {
                    this._transitionTimingFunction(easing.style);
                    this._transitionTime(time);
                }
                this._translate(x, y);
            } else {
                this._animate(x, y, time, easing.fn);
            }
        },

        scrollToElement: function scrollToElement(el, time, offsetX, offsetY, easing) {
            el = el.nodeType ? el : this.scroller.querySelector(el);

            if (!el) {
                return;
            }

            var pos = utils.offset(el);

            pos.left -= this.wrapperOffset.left;
            pos.top -= this.wrapperOffset.top;

            // if offsetX/Y are true we center the element to the screen
            if (offsetX === true) {
                offsetX = Math.round(el.offsetWidth / 2 - this.wrapper.offsetWidth / 2);
            }
            if (offsetY === true) {
                offsetY = Math.round(el.offsetHeight / 2 - this.wrapper.offsetHeight / 2);
            }

            pos.left -= offsetX || 0;
            pos.top -= offsetY || 0;

            pos.left = pos.left > 0 ? 0 : pos.left < this.maxScrollX ? this.maxScrollX : pos.left;
            pos.top = pos.top > 0 ? 0 : pos.top < this.maxScrollY ? this.maxScrollY : pos.top;

            time = time === undefined || time === null || time === 'auto' ? Math.max(Math.abs(this.x - pos.left), Math.abs(this.y - pos.top)) : time;

            this.scrollTo(pos.left, pos.top, time, easing);
        },

        _transitionTime: function _transitionTime(time) {
            if (!this.options.useTransition) {
                return;
            }
            time = time || 0;
            var durationProp = utils.style.transitionDuration;
            if (!durationProp) {
                return;
            }

            this.scrollerStyle[durationProp] = time + 'ms';

            if (!time && utils.isBadAndroid) {
                this.scrollerStyle[durationProp] = '0.0001ms';
                // remove 0.0001ms
                var self = this;
                rAF(function () {
                    if (self.scrollerStyle[durationProp] === '0.0001ms') {
                        self.scrollerStyle[durationProp] = '0s';
                    }
                });
            }

            if (this.indicators) {
                for (var i = this.indicators.length; i--;) {
                    this.indicators[i].transitionTime(time);
                }
            }

            // INSERT POINT: _transitionTime
        },

        _transitionTimingFunction: function _transitionTimingFunction(easing) {
            this.scrollerStyle[utils.style.transitionTimingFunction] = easing;

            if (this.indicators) {
                for (var i = this.indicators.length; i--;) {
                    this.indicators[i].transitionTimingFunction(easing);
                }
            }

            // INSERT POINT: _transitionTimingFunction
        },

        _translate: function _translate(x, y) {
            if (this.options.useTransform) {

                /* REPLACE START: _translate */

                this.scrollerStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.translateZ;

                /* REPLACE END: _translate */
            } else {
                x = Math.round(x);
                y = Math.round(y);
                this.scrollerStyle.left = x + 'px';
                this.scrollerStyle.top = y + 'px';
            }

            this.x = x;
            this.y = y;

            if (this.indicators) {
                for (var i = this.indicators.length; i--;) {
                    this.indicators[i].updatePosition();
                }
            }

            // INSERT POINT: _translate
        },

        _initEvents: function _initEvents(remove) {
            var eventType = remove ? utils.removeEvent : utils.addEvent,
                target = this.options.bindToWrapper ? this.wrapper : window;

            eventType(window, 'orientationchange', this);
            eventType(window, 'resize', this);

            if (this.options.click) {
                eventType(this.wrapper, 'click', this, true);
            }

            if (!this.options.disableMouse) {
                eventType(this.wrapper, 'mousedown', this);
                eventType(target, 'mousemove', this);
                eventType(target, 'mousecancel', this);
                eventType(target, 'mouseup', this);
            }

            if (utils.hasPointer && !this.options.disablePointer) {
                eventType(this.wrapper, utils.prefixPointerEvent('pointerdown'), this);
                eventType(target, utils.prefixPointerEvent('pointermove'), this);
                eventType(target, utils.prefixPointerEvent('pointercancel'), this);
                eventType(target, utils.prefixPointerEvent('pointerup'), this);
            }

            if (utils.hasTouch && !this.options.disableTouch) {
                eventType(this.wrapper, 'touchstart', this);
                eventType(target, 'touchmove', this);
                eventType(target, 'touchcancel', this);
                eventType(target, 'touchend', this);
            }

            eventType(this.scroller, 'transitionend', this);
            eventType(this.scroller, 'webkitTransitionEnd', this);
            eventType(this.scroller, 'oTransitionEnd', this);
            eventType(this.scroller, 'MSTransitionEnd', this);
        },

        getComputedPosition: function getComputedPosition() {
            var matrix = window.getComputedStyle(this.scroller, null),
                x,
                y;

            if (this.options.useTransform) {
                matrix = matrix[utils.style.transform].split(')')[0].split(', ');
                x = +(matrix[12] || matrix[4]);
                y = +(matrix[13] || matrix[5]);
            } else {
                x = +matrix.left.replace(/[^-\d.]/g, '');
                y = +matrix.top.replace(/[^-\d.]/g, '');
            }

            return { x: x, y: y };
        },
        _initIndicators: function _initIndicators() {
            var interactive = this.options.interactiveScrollbars,
                customStyle = typeof this.options.scrollbars != 'string',
                indicators = [],
                indicator;

            var that = this;

            this.indicators = [];

            if (this.options.scrollbars) {
                // Vertical scrollbar
                if (this.options.scrollY) {
                    indicator = {
                        el: createDefaultScrollbar('v', interactive, this.options.scrollbars),
                        interactive: interactive,
                        defaultScrollbars: true,
                        customStyle: customStyle,
                        resize: this.options.resizeScrollbars,
                        shrink: this.options.shrinkScrollbars,
                        fade: this.options.fadeScrollbars,
                        listenX: false
                    };

                    this.wrapper.appendChild(indicator.el);
                    indicators.push(indicator);
                }

                // Horizontal scrollbar
                if (this.options.scrollX) {
                    indicator = {
                        el: createDefaultScrollbar('h', interactive, this.options.scrollbars),
                        interactive: interactive,
                        defaultScrollbars: true,
                        customStyle: customStyle,
                        resize: this.options.resizeScrollbars,
                        shrink: this.options.shrinkScrollbars,
                        fade: this.options.fadeScrollbars,
                        listenY: false
                    };

                    this.wrapper.appendChild(indicator.el);
                    indicators.push(indicator);
                }
            }

            if (this.options.indicators) {
                // TODO: check concat compatibility
                indicators = indicators.concat(this.options.indicators);
            }

            for (var i = indicators.length; i--;) {
                this.indicators.push(new Indicator(this, indicators[i]));
            }

            // TODO: check if we can use array.map (wide compatibility and performance issues)
            function _indicatorsMap(fn) {
                if (that.indicators) {
                    for (var i = that.indicators.length; i--;) {
                        fn.call(that.indicators[i]);
                    }
                }
            }

            if (this.options.fadeScrollbars) {
                this.on('scrollEnd', function () {
                    _indicatorsMap(function () {
                        this.fade();
                    });
                });

                this.on('scrollCancel', function () {
                    _indicatorsMap(function () {
                        this.fade();
                    });
                });

                this.on('scrollStart', function () {
                    _indicatorsMap(function () {
                        this.fade(1);
                    });
                });

                this.on('beforeScrollStart', function () {
                    _indicatorsMap(function () {
                        this.fade(1, true);
                    });
                });
            }

            this.on('refresh', function () {
                _indicatorsMap(function () {
                    this.refresh();
                });
            });

            this.on('destroy', function () {
                _indicatorsMap(function () {
                    this.destroy();
                });

                delete this.indicators;
            });
        },

        _initWheel: function _initWheel() {
            utils.addEvent(this.wrapper, 'wheel', this);
            utils.addEvent(this.wrapper, 'mousewheel', this);
            utils.addEvent(this.wrapper, 'DOMMouseScroll', this);

            this.on('destroy', function () {
                clearTimeout(this.wheelTimeout);
                this.wheelTimeout = null;
                utils.removeEvent(this.wrapper, 'wheel', this);
                utils.removeEvent(this.wrapper, 'mousewheel', this);
                utils.removeEvent(this.wrapper, 'DOMMouseScroll', this);
            });
        },

        _wheel: function _wheel(e) {
            if (!this.enabled) {
                return;
            }

            var wheelDeltaX,
                wheelDeltaY,
                newX,
                newY,
                that = this;

            if (this.wheelTimeout === undefined) {
                that._execEvent('scrollStart');
            }

            // Execute the scrollEnd event after 400ms the wheel stopped scrolling
            clearTimeout(this.wheelTimeout);
            this.wheelTimeout = setTimeout(function () {
                if (!that.options.snap) {
                    that._execEvent('scrollEnd');
                }
                that.wheelTimeout = undefined;
            }, 400);

            if ('deltaX' in e) {
                if (e.deltaMode === 1) {
                    wheelDeltaX = -e.deltaX * this.options.mouseWheelSpeed;
                    wheelDeltaY = -e.deltaY * this.options.mouseWheelSpeed;
                } else {
                    wheelDeltaX = -e.deltaX;
                    wheelDeltaY = -e.deltaY;
                }
            } else if ('wheelDeltaX' in e) {
                wheelDeltaX = e.wheelDeltaX / 120 * this.options.mouseWheelSpeed;
                wheelDeltaY = e.wheelDeltaY / 120 * this.options.mouseWheelSpeed;
            } else if ('wheelDelta' in e) {
                wheelDeltaX = wheelDeltaY = e.wheelDelta / 120 * this.options.mouseWheelSpeed;
            } else if ('detail' in e) {
                wheelDeltaX = wheelDeltaY = -e.detail / 3 * this.options.mouseWheelSpeed;
            } else {
                return;
            }

            wheelDeltaX *= this.options.invertWheelDirection;
            wheelDeltaY *= this.options.invertWheelDirection;

            if (!this.hasVerticalScroll) {
                wheelDeltaX = wheelDeltaY;
                wheelDeltaY = 0;
            }

            if (this.options.snap) {
                newX = this.currentPage.pageX;
                newY = this.currentPage.pageY;

                if (wheelDeltaX > 0) {
                    newX--;
                } else if (wheelDeltaX < 0) {
                    newX++;
                }

                if (wheelDeltaY > 0) {
                    newY--;
                } else if (wheelDeltaY < 0) {
                    newY++;
                }

                this.goToPage(newX, newY);

                return;
            }

            newX = this.x + Math.round(this.hasHorizontalScroll ? wheelDeltaX : 0);
            newY = this.y + Math.round(this.hasVerticalScroll ? wheelDeltaY : 0);

            this.directionX = wheelDeltaX > 0 ? -1 : wheelDeltaX < 0 ? 1 : 0;
            this.directionY = wheelDeltaY > 0 ? -1 : wheelDeltaY < 0 ? 1 : 0;

            if (newX > 0) {
                newX = 0;
            } else if (newX < this.maxScrollX) {
                newX = this.maxScrollX;
            }

            if (newY > 0) {
                newY = 0;
            } else if (newY < this.maxScrollY) {
                newY = this.maxScrollY;
            }

            this.scrollTo(newX, newY, 0);

            // INSERT POINT: _wheel
        },

        _initSnap: function _initSnap() {
            this.currentPage = {};

            if (typeof this.options.snap == 'string') {
                this.options.snap = this.scroller.querySelectorAll(this.options.snap);
            }

            this.on('refresh', function () {
                var i = 0,
                    l,
                    m = 0,
                    n,
                    cx,
                    cy,
                    x = 0,
                    y,
                    stepX = this.options.snapStepX || this.wrapperWidth,
                    stepY = this.options.snapStepY || this.wrapperHeight,
                    el;

                this.pages = [];

                if (!this.wrapperWidth || !this.wrapperHeight || !this.scrollerWidth || !this.scrollerHeight) {
                    return;
                }

                if (this.options.snap === true) {
                    cx = Math.round(stepX / 2);
                    cy = Math.round(stepY / 2);

                    while (x > -this.scrollerWidth) {
                        this.pages[i] = [];
                        l = 0;
                        y = 0;

                        while (y > -this.scrollerHeight) {
                            this.pages[i][l] = {
                                x: Math.max(x, this.maxScrollX),
                                y: Math.max(y, this.maxScrollY),
                                width: stepX,
                                height: stepY,
                                cx: x - cx,
                                cy: y - cy
                            };

                            y -= stepY;
                            l++;
                        }

                        x -= stepX;
                        i++;
                    }
                } else {
                    el = this.options.snap;
                    l = el.length;
                    n = -1;

                    for (; i < l; i++) {
                        if (i === 0 || el[i].offsetLeft <= el[i - 1].offsetLeft) {
                            m = 0;
                            n++;
                        }

                        if (!this.pages[m]) {
                            this.pages[m] = [];
                        }

                        x = Math.max(-el[i].offsetLeft, this.maxScrollX);
                        y = Math.max(-el[i].offsetTop, this.maxScrollY);
                        cx = x - Math.round(el[i].offsetWidth / 2);
                        cy = y - Math.round(el[i].offsetHeight / 2);

                        this.pages[m][n] = {
                            x: x,
                            y: y,
                            width: el[i].offsetWidth,
                            height: el[i].offsetHeight,
                            cx: cx,
                            cy: cy
                        };

                        if (x > this.maxScrollX) {
                            m++;
                        }
                    }
                }

                this.goToPage(this.currentPage.pageX || 0, this.currentPage.pageY || 0, 0);

                // Update snap threshold if needed
                if (this.options.snapThreshold % 1 === 0) {
                    this.snapThresholdX = this.options.snapThreshold;
                    this.snapThresholdY = this.options.snapThreshold;
                } else {
                    this.snapThresholdX = Math.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].width * this.options.snapThreshold);
                    this.snapThresholdY = Math.round(this.pages[this.currentPage.pageX][this.currentPage.pageY].height * this.options.snapThreshold);
                }
            });

            this.on('flick', function () {
                var time = this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(this.x - this.startX), 1000), Math.min(Math.abs(this.y - this.startY), 1000)), 300);

                this.goToPage(this.currentPage.pageX + this.directionX, this.currentPage.pageY + this.directionY, time);
            });
        },

        _nearestSnap: function _nearestSnap(x, y) {
            if (!this.pages.length) {
                return { x: 0, y: 0, pageX: 0, pageY: 0 };
            }

            var i = 0,
                l = this.pages.length,
                m = 0;

            // Check if we exceeded the snap threshold
            if (Math.abs(x - this.absStartX) < this.snapThresholdX && Math.abs(y - this.absStartY) < this.snapThresholdY) {
                return this.currentPage;
            }

            if (x > 0) {
                x = 0;
            } else if (x < this.maxScrollX) {
                x = this.maxScrollX;
            }

            if (y > 0) {
                y = 0;
            } else if (y < this.maxScrollY) {
                y = this.maxScrollY;
            }

            for (; i < l; i++) {
                if (x >= this.pages[i][0].cx) {
                    x = this.pages[i][0].x;
                    break;
                }
            }

            l = this.pages[i].length;

            for (; m < l; m++) {
                if (y >= this.pages[0][m].cy) {
                    y = this.pages[0][m].y;
                    break;
                }
            }

            if (i == this.currentPage.pageX) {
                i += this.directionX;

                if (i < 0) {
                    i = 0;
                } else if (i >= this.pages.length) {
                    i = this.pages.length - 1;
                }

                x = this.pages[i][0].x;
            }

            if (m == this.currentPage.pageY) {
                m += this.directionY;

                if (m < 0) {
                    m = 0;
                } else if (m >= this.pages[0].length) {
                    m = this.pages[0].length - 1;
                }

                y = this.pages[0][m].y;
            }

            return {
                x: x,
                y: y,
                pageX: i,
                pageY: m
            };
        },

        goToPage: function goToPage(x, y, time, easing) {
            easing = easing || this.options.bounceEasing;

            if (x >= this.pages.length) {
                x = this.pages.length - 1;
            } else if (x < 0) {
                x = 0;
            }

            if (y >= this.pages[x].length) {
                y = this.pages[x].length - 1;
            } else if (y < 0) {
                y = 0;
            }

            var posX = this.pages[x][y].x,
                posY = this.pages[x][y].y;

            time = time === undefined ? this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(posX - this.x), 1000), Math.min(Math.abs(posY - this.y), 1000)), 300) : time;

            this.currentPage = {
                x: posX,
                y: posY,
                pageX: x,
                pageY: y
            };

            this.scrollTo(posX, posY, time, easing);
        },

        next: function next(time, easing) {
            var x = this.currentPage.pageX,
                y = this.currentPage.pageY;

            x++;

            if (x >= this.pages.length && this.hasVerticalScroll) {
                x = 0;
                y++;
            }

            this.goToPage(x, y, time, easing);
        },

        prev: function prev(time, easing) {
            var x = this.currentPage.pageX,
                y = this.currentPage.pageY;

            x--;

            if (x < 0 && this.hasVerticalScroll) {
                x = 0;
                y--;
            }

            this.goToPage(x, y, time, easing);
        },

        _initKeys: function _initKeys(e) {
            // default key bindings
            var keys = {
                pageUp: 33,
                pageDown: 34,
                end: 35,
                home: 36,
                left: 37,
                up: 38,
                right: 39,
                down: 40
            };
            var i;

            // if you give me characters I give you keycode
            if (_typeof(this.options.keyBindings) == 'object') {
                for (i in this.options.keyBindings) {
                    if (typeof this.options.keyBindings[i] == 'string') {
                        this.options.keyBindings[i] = this.options.keyBindings[i].toUpperCase().charCodeAt(0);
                    }
                }
            } else {
                this.options.keyBindings = {};
            }

            for (i in keys) {
                this.options.keyBindings[i] = this.options.keyBindings[i] || keys[i];
            }

            utils.addEvent(window, 'keydown', this);

            this.on('destroy', function () {
                utils.removeEvent(window, 'keydown', this);
            });
        },

        _key: function _key(e) {
            if (!this.enabled) {
                return;
            }

            var snap = this.options.snap,

            // we are using this alot, better to cache it
            newX = snap ? this.currentPage.pageX : this.x,
                newY = snap ? this.currentPage.pageY : this.y,
                now = utils.getTime(),
                prevTime = this.keyTime || 0,
                acceleration = 0.250,
                pos;

            if (this.options.useTransition && this.isInTransition) {
                pos = this.getComputedPosition();

                this._translate(Math.round(pos.x), Math.round(pos.y));
                this.isInTransition = false;
            }

            this.keyAcceleration = now - prevTime < 200 ? Math.min(this.keyAcceleration + acceleration, 50) : 0;

            switch (e.keyCode) {
                case this.options.keyBindings.pageUp:
                    if (this.hasHorizontalScroll && !this.hasVerticalScroll) {
                        newX += snap ? 1 : this.wrapperWidth;
                    } else {
                        newY += snap ? 1 : this.wrapperHeight;
                    }
                    break;
                case this.options.keyBindings.pageDown:
                    if (this.hasHorizontalScroll && !this.hasVerticalScroll) {
                        newX -= snap ? 1 : this.wrapperWidth;
                    } else {
                        newY -= snap ? 1 : this.wrapperHeight;
                    }
                    break;
                case this.options.keyBindings.end:
                    newX = snap ? this.pages.length - 1 : this.maxScrollX;
                    newY = snap ? this.pages[0].length - 1 : this.maxScrollY;
                    break;
                case this.options.keyBindings.home:
                    newX = 0;
                    newY = 0;
                    break;
                case this.options.keyBindings.left:
                    newX += snap ? -1 : 5 + this.keyAcceleration >> 0;
                    break;
                case this.options.keyBindings.up:
                    newY += snap ? 1 : 5 + this.keyAcceleration >> 0;
                    break;
                case this.options.keyBindings.right:
                    newX -= snap ? -1 : 5 + this.keyAcceleration >> 0;
                    break;
                case this.options.keyBindings.down:
                    newY -= snap ? 1 : 5 + this.keyAcceleration >> 0;
                    break;
                default:
                    return;
            }

            if (snap) {
                this.goToPage(newX, newY);
                return;
            }

            if (newX > 0) {
                newX = 0;
                this.keyAcceleration = 0;
            } else if (newX < this.maxScrollX) {
                newX = this.maxScrollX;
                this.keyAcceleration = 0;
            }

            if (newY > 0) {
                newY = 0;
                this.keyAcceleration = 0;
            } else if (newY < this.maxScrollY) {
                newY = this.maxScrollY;
                this.keyAcceleration = 0;
            }

            this.scrollTo(newX, newY, 0);

            this.keyTime = now;
        },

        _animate: function _animate(destX, destY, duration, easingFn) {
            var that = this,
                startX = this.x,
                startY = this.y,
                startTime = utils.getTime(),
                destTime = startTime + duration;

            function step() {
                var now = utils.getTime(),
                    newX,
                    newY,
                    easing;

                if (now >= destTime) {
                    that.isAnimating = false;
                    that._translate(destX, destY);

                    if (!that.resetPosition(that.options.bounceTime)) {
                        that._execEvent('scrollEnd');
                    }

                    return;
                }

                now = (now - startTime) / duration;
                easing = easingFn(now);
                newX = (destX - startX) * easing + startX;
                newY = (destY - startY) * easing + startY;
                that._translate(newX, newY);

                if (that.isAnimating) {
                    rAF(step);
                }
            }

            this.isAnimating = true;
            step();
        },
        handleEvent: function handleEvent(e) {
            switch (e.type) {
                case 'touchstart':
                case 'pointerdown':
                case 'MSPointerDown':
                case 'mousedown':
                    this._start(e);
                    break;
                case 'touchmove':
                case 'pointermove':
                case 'MSPointerMove':
                case 'mousemove':
                    this._move(e);
                    break;
                case 'touchend':
                case 'pointerup':
                case 'MSPointerUp':
                case 'mouseup':
                case 'touchcancel':
                case 'pointercancel':
                case 'MSPointerCancel':
                case 'mousecancel':
                    this._end(e);
                    break;
                case 'orientationchange':
                case 'resize':
                    this._resize();
                    break;
                case 'transitionend':
                case 'webkitTransitionEnd':
                case 'oTransitionEnd':
                case 'MSTransitionEnd':
                    this._transitionEnd(e);
                    break;
                case 'wheel':
                case 'DOMMouseScroll':
                case 'mousewheel':
                    this._wheel(e);
                    break;
                case 'keydown':
                    this._key(e);
                    break;
                case 'click':
                    if (this.enabled && !e._constructed) {
                        e.preventDefault();
                        e.stopPropagation();
                    }
                    break;
            }
        }
    };
    function createDefaultScrollbar(direction, interactive, type) {
        var scrollbar = document.createElement('div'),
            indicator = document.createElement('div');

        if (type === true) {
            scrollbar.style.cssText = 'position:absolute;z-index:9999';
            indicator.style.cssText = '-webkit-box-sizing:border-box;-moz-box-sizing:border-box;box-sizing:border-box;position:absolute;background:rgba(0,0,0,0);border:1px solid rgba(255,255,255,0);border-radius:3px';
        }

        indicator.className = 'iScrollIndicator';

        if (direction == 'h') {
            if (type === true) {
                scrollbar.style.cssText += ';height:7px;left:2px;right:2px;bottom:0';
                indicator.style.height = '100%';
            }
            scrollbar.className = 'iScrollHorizontalScrollbar';
        } else {
            if (type === true) {
                scrollbar.style.cssText += ';width:7px;bottom:2px;top:2px;right:1px';
                indicator.style.width = '100%';
            }
            scrollbar.className = 'iScrollVerticalScrollbar';
        }

        scrollbar.style.cssText += ';overflow:hidden';

        if (!interactive) {
            scrollbar.style.pointerEvents = 'none';
        }

        scrollbar.appendChild(indicator);

        return scrollbar;
    }

    function Indicator(scroller, options) {
        this.wrapper = typeof options.el == 'string' ? document.querySelector(options.el) : options.el;
        this.wrapperStyle = this.wrapper.style;
        this.indicator = this.wrapper.children[0];
        this.indicatorStyle = this.indicator.style;
        this.scroller = scroller;

        this.options = {
            listenX: true,
            listenY: true,
            interactive: false,
            resize: true,
            defaultScrollbars: false,
            shrink: false,
            fade: false,
            speedRatioX: 0,
            speedRatioY: 0
        };

        for (var i in options) {
            this.options[i] = options[i];
        }

        this.sizeRatioX = 1;
        this.sizeRatioY = 1;
        this.maxPosX = 0;
        this.maxPosY = 0;

        if (this.options.interactive) {
            if (!this.options.disableTouch) {
                utils.addEvent(this.indicator, 'touchstart', this);
                utils.addEvent(window, 'touchend', this);
            }
            if (!this.options.disablePointer) {
                utils.addEvent(this.indicator, utils.prefixPointerEvent('pointerdown'), this);
                utils.addEvent(window, utils.prefixPointerEvent('pointerup'), this);
            }
            if (!this.options.disableMouse) {
                utils.addEvent(this.indicator, 'mousedown', this);
                utils.addEvent(window, 'mouseup', this);
            }
        }

        if (this.options.fade) {
            this.wrapperStyle[utils.style.transform] = this.scroller.translateZ;
            var durationProp = utils.style.transitionDuration;
            if (!durationProp) {
                return;
            }
            this.wrapperStyle[durationProp] = utils.isBadAndroid ? '0.0001ms' : '0ms';
            // remove 0.0001ms
            var self = this;
            if (utils.isBadAndroid) {
                rAF(function () {
                    if (self.wrapperStyle[durationProp] === '0.0001ms') {
                        self.wrapperStyle[durationProp] = '0s';
                    }
                });
            }
            this.wrapperStyle.opacity = '0';
        }
    }

    Indicator.prototype = {
        handleEvent: function handleEvent(e) {
            switch (e.type) {
                case 'touchstart':
                case 'pointerdown':
                case 'MSPointerDown':
                case 'mousedown':
                    this._start(e);
                    break;
                case 'touchmove':
                case 'pointermove':
                case 'MSPointerMove':
                case 'mousemove':
                    this._move(e);
                    break;
                case 'touchend':
                case 'pointerup':
                case 'MSPointerUp':
                case 'mouseup':
                case 'touchcancel':
                case 'pointercancel':
                case 'MSPointerCancel':
                case 'mousecancel':
                    this._end(e);
                    break;
            }
        },

        destroy: function destroy() {
            if (this.options.fadeScrollbars) {
                clearTimeout(this.fadeTimeout);
                this.fadeTimeout = null;
            }
            if (this.options.interactive) {
                utils.removeEvent(this.indicator, 'touchstart', this);
                utils.removeEvent(this.indicator, utils.prefixPointerEvent('pointerdown'), this);
                utils.removeEvent(this.indicator, 'mousedown', this);

                utils.removeEvent(window, 'touchmove', this);
                utils.removeEvent(window, utils.prefixPointerEvent('pointermove'), this);
                utils.removeEvent(window, 'mousemove', this);

                utils.removeEvent(window, 'touchend', this);
                utils.removeEvent(window, utils.prefixPointerEvent('pointerup'), this);
                utils.removeEvent(window, 'mouseup', this);
            }

            if (this.options.defaultScrollbars) {
                this.wrapper.parentNode.removeChild(this.wrapper);
            }
        },

        _start: function _start(e) {
            var point = e.touches ? e.touches[0] : e;

            e.preventDefault();
            e.stopPropagation();

            this.transitionTime();

            this.initiated = true;
            this.moved = false;
            this.lastPointX = point.pageX;
            this.lastPointY = point.pageY;

            this.startTime = utils.getTime();

            if (!this.options.disableTouch) {
                utils.addEvent(window, 'touchmove', this);
            }
            if (!this.options.disablePointer) {
                utils.addEvent(window, utils.prefixPointerEvent('pointermove'), this);
            }
            if (!this.options.disableMouse) {
                utils.addEvent(window, 'mousemove', this);
            }

            this.scroller._execEvent('beforeScrollStart');
        },

        _move: function _move(e) {
            var point = e.touches ? e.touches[0] : e,
                deltaX,
                deltaY,
                newX,
                newY,
                timestamp = utils.getTime();

            if (!this.moved) {
                this.scroller._execEvent('scrollStart');
            }

            this.moved = true;

            deltaX = point.pageX - this.lastPointX;
            this.lastPointX = point.pageX;

            deltaY = point.pageY - this.lastPointY;
            this.lastPointY = point.pageY;

            newX = this.x + deltaX;
            newY = this.y + deltaY;

            this._pos(newX, newY);

            // INSERT POINT: indicator._move

            e.preventDefault();
            e.stopPropagation();
        },

        _end: function _end(e) {
            if (!this.initiated) {
                return;
            }

            this.initiated = false;

            e.preventDefault();
            e.stopPropagation();

            utils.removeEvent(window, 'touchmove', this);
            utils.removeEvent(window, utils.prefixPointerEvent('pointermove'), this);
            utils.removeEvent(window, 'mousemove', this);

            if (this.scroller.options.snap) {
                var snap = this.scroller._nearestSnap(this.scroller.x, this.scroller.y);

                var time = this.options.snapSpeed || Math.max(Math.max(Math.min(Math.abs(this.scroller.x - snap.x), 1000), Math.min(Math.abs(this.scroller.y - snap.y), 1000)), 300);

                if (this.scroller.x != snap.x || this.scroller.y != snap.y) {
                    this.scroller.directionX = 0;
                    this.scroller.directionY = 0;
                    this.scroller.currentPage = snap;
                    this.scroller.scrollTo(snap.x, snap.y, time, this.scroller.options.bounceEasing);
                }
            }

            if (this.moved) {
                this.scroller._execEvent('scrollEnd');
            }
        },

        transitionTime: function transitionTime(time) {
            time = time || 0;
            var durationProp = utils.style.transitionDuration;
            if (!durationProp) {
                return;
            }

            this.indicatorStyle[durationProp] = time + 'ms';

            if (!time && utils.isBadAndroid) {
                this.indicatorStyle[durationProp] = '0.0001ms';
                // remove 0.0001ms
                var self = this;
                rAF(function () {
                    if (self.indicatorStyle[durationProp] === '0.0001ms') {
                        self.indicatorStyle[durationProp] = '0s';
                    }
                });
            }
        },

        transitionTimingFunction: function transitionTimingFunction(easing) {
            this.indicatorStyle[utils.style.transitionTimingFunction] = easing;
        },

        refresh: function refresh() {
            this.transitionTime();

            if (this.options.listenX && !this.options.listenY) {
                this.indicatorStyle.display = this.scroller.hasHorizontalScroll ? 'block' : 'none';
            } else if (this.options.listenY && !this.options.listenX) {
                this.indicatorStyle.display = this.scroller.hasVerticalScroll ? 'block' : 'none';
            } else {
                this.indicatorStyle.display = this.scroller.hasHorizontalScroll || this.scroller.hasVerticalScroll ? 'block' : 'none';
            }

            if (this.scroller.hasHorizontalScroll && this.scroller.hasVerticalScroll) {
                utils.addClass(this.wrapper, 'iScrollBothScrollbars');
                utils.removeClass(this.wrapper, 'iScrollLoneScrollbar');

                if (this.options.defaultScrollbars && this.options.customStyle) {
                    if (this.options.listenX) {
                        this.wrapper.style.right = '8px';
                    } else {
                        this.wrapper.style.bottom = '8px';
                    }
                }
            } else {
                utils.removeClass(this.wrapper, 'iScrollBothScrollbars');
                utils.addClass(this.wrapper, 'iScrollLoneScrollbar');

                if (this.options.defaultScrollbars && this.options.customStyle) {
                    if (this.options.listenX) {
                        this.wrapper.style.right = '2px';
                    } else {
                        this.wrapper.style.bottom = '2px';
                    }
                }
            }

            var r = this.wrapper.offsetHeight; // force refresh

            if (this.options.listenX) {
                this.wrapperWidth = this.wrapper.clientWidth;
                if (this.options.resize) {
                    this.indicatorWidth = Math.max(Math.round(this.wrapperWidth * this.wrapperWidth / (this.scroller.scrollerWidth || this.wrapperWidth || 1)), 8);
                    this.indicatorStyle.width = this.indicatorWidth + 'px';
                } else {
                    this.indicatorWidth = this.indicator.clientWidth;
                }

                this.maxPosX = this.wrapperWidth - this.indicatorWidth;

                if (this.options.shrink == 'clip') {
                    this.minBoundaryX = -this.indicatorWidth + 8;
                    this.maxBoundaryX = this.wrapperWidth - 8;
                } else {
                    this.minBoundaryX = 0;
                    this.maxBoundaryX = this.maxPosX;
                }

                this.sizeRatioX = this.options.speedRatioX || this.scroller.maxScrollX && this.maxPosX / this.scroller.maxScrollX;
            }

            if (this.options.listenY) {
                this.wrapperHeight = this.wrapper.clientHeight;
                if (this.options.resize) {
                    this.indicatorHeight = Math.max(Math.round(this.wrapperHeight * this.wrapperHeight / (this.scroller.scrollerHeight || this.wrapperHeight || 1)), 8);
                    this.indicatorStyle.height = this.indicatorHeight + 'px';
                } else {
                    this.indicatorHeight = this.indicator.clientHeight;
                }

                this.maxPosY = this.wrapperHeight - this.indicatorHeight;

                if (this.options.shrink == 'clip') {
                    this.minBoundaryY = -this.indicatorHeight + 8;
                    this.maxBoundaryY = this.wrapperHeight - 8;
                } else {
                    this.minBoundaryY = 0;
                    this.maxBoundaryY = this.maxPosY;
                }

                this.maxPosY = this.wrapperHeight - this.indicatorHeight;
                this.sizeRatioY = this.options.speedRatioY || this.scroller.maxScrollY && this.maxPosY / this.scroller.maxScrollY;
            }

            this.updatePosition();
        },

        updatePosition: function updatePosition() {
            var x = this.options.listenX && Math.round(this.sizeRatioX * this.scroller.x) || 0,
                y = this.options.listenY && Math.round(this.sizeRatioY * this.scroller.y) || 0;

            if (!this.options.ignoreBoundaries) {
                if (x < this.minBoundaryX) {
                    if (this.options.shrink == 'scale') {
                        this.width = Math.max(this.indicatorWidth + x, 8);
                        this.indicatorStyle.width = this.width + 'px';
                    }
                    x = this.minBoundaryX;
                } else if (x > this.maxBoundaryX) {
                    if (this.options.shrink == 'scale') {
                        this.width = Math.max(this.indicatorWidth - (x - this.maxPosX), 8);
                        this.indicatorStyle.width = this.width + 'px';
                        x = this.maxPosX + this.indicatorWidth - this.width;
                    } else {
                        x = this.maxBoundaryX;
                    }
                } else if (this.options.shrink == 'scale' && this.width != this.indicatorWidth) {
                    this.width = this.indicatorWidth;
                    this.indicatorStyle.width = this.width + 'px';
                }

                if (y < this.minBoundaryY) {
                    if (this.options.shrink == 'scale') {
                        this.height = Math.max(this.indicatorHeight + y * 3, 8);
                        this.indicatorStyle.height = this.height + 'px';
                    }
                    y = this.minBoundaryY;
                } else if (y > this.maxBoundaryY) {
                    if (this.options.shrink == 'scale') {
                        this.height = Math.max(this.indicatorHeight - (y - this.maxPosY) * 3, 8);
                        this.indicatorStyle.height = this.height + 'px';
                        y = this.maxPosY + this.indicatorHeight - this.height;
                    } else {
                        y = this.maxBoundaryY;
                    }
                } else if (this.options.shrink == 'scale' && this.height != this.indicatorHeight) {
                    this.height = this.indicatorHeight;
                    this.indicatorStyle.height = this.height + 'px';
                }
            }

            this.x = x;
            this.y = y;

            if (this.scroller.options.useTransform) {
                this.indicatorStyle[utils.style.transform] = 'translate(' + x + 'px,' + y + 'px)' + this.scroller.translateZ;
            } else {
                this.indicatorStyle.left = x + 'px';
                this.indicatorStyle.top = y + 'px';
            }
        },

        _pos: function _pos(x, y) {
            if (x < 0) {
                x = 0;
            } else if (x > this.maxPosX) {
                x = this.maxPosX;
            }

            if (y < 0) {
                y = 0;
            } else if (y > this.maxPosY) {
                y = this.maxPosY;
            }

            x = this.options.listenX ? Math.round(x / this.sizeRatioX) : this.scroller.x;
            y = this.options.listenY ? Math.round(y / this.sizeRatioY) : this.scroller.y;

            this.scroller.scrollTo(x, y);
        },

        fade: function fade(val, hold) {
            if (hold && !this.visible) {
                return;
            }

            clearTimeout(this.fadeTimeout);
            this.fadeTimeout = null;

            var time = val ? 250 : 500,
                delay = val ? 0 : 300;

            val = val ? '1' : '0';

            this.wrapperStyle[utils.style.transitionDuration] = time + 'ms';

            this.fadeTimeout = setTimeout(function (val) {
                this.wrapperStyle.opacity = val;
                this.visible = +val;
            }.bind(this, val), delay);
        }
    };

    IScroll.utils = utils;

    if (typeof module != 'undefined' && module.exports) {
        module.exports = IScroll;
    } else if (true) {
        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
            return IScroll;
        }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {
        window.IScroll = IScroll;
    }
})(window, document, Math);

/*!
 * fullPage ScrollOverflow
 * https://github.com/alvarotrigo/fullPage.js
 * @license MIT licensed
 *
 * Copyright (C) 2015 alvarotrigo.com - A project by Alvaro Trigo
 */
(function (window, $) {
    var ACTIVE = 'active';
    var ACTIVE_SEL = '.' + ACTIVE;

    var SECTION = 'fp-section';
    var SECTION_SEL = '.' + SECTION;
    var SECTION_ACTIVE_SEL = SECTION_SEL + ACTIVE_SEL;

    var SLIDE = 'fp-slide';
    var SLIDE_SEL = '.' + SLIDE;
    var SLIDE_ACTIVE_SEL = SLIDE_SEL + ACTIVE_SEL;
    var SLIDES_WRAPPER = 'fp-slides';
    var SLIDES_WRAPPER_SEL = '.' + SLIDES_WRAPPER;

    // scrolloverflow
    var SCROLLABLE = 'fp-scrollable';
    var SCROLLABLE_SEL = '.' + SCROLLABLE;

    if (typeof IScroll !== 'undefined') {
        /*
        * Turns iScroll `mousewheel` option off dynamically
        * https://github.com/cubiq/iscroll/issues/1036
        */
        IScroll.prototype.wheelOn = function () {
            this.wrapper.addEventListener('wheel', this);
            this.wrapper.addEventListener('mousewheel', this);
            this.wrapper.addEventListener('DOMMouseScroll', this);
        };

        /*
        * Turns iScroll `mousewheel` option on dynamically
        * https://github.com/cubiq/iscroll/issues/1036
        */
        IScroll.prototype.wheelOff = function () {
            this.wrapper.removeEventListener('wheel', this);
            this.wrapper.removeEventListener('mousewheel', this);
            this.wrapper.removeEventListener('DOMMouseScroll', this);
        };
    }

    /**
     * An object to handle overflow scrolling.
     * This uses jquery.slimScroll to accomplish overflow scrolling.
     * It is possible to pass in an alternate scrollOverflowHandler
     * to the fullpage.js option that implements the same functions
     * as this handler.
     *
     * @type {Object}
     */
    window.iscrollHandler = {
        refreshId: null,
        iScrollInstances: [],

        // Enables or disables the mouse wheel for the active section or all slides in it
        toggleWheel: function toggleWheel(value) {
            var scrollable = $(SECTION_ACTIVE_SEL).find(SCROLLABLE_SEL);
            scrollable.each(function () {
                var iScrollInstance = $(this).data('iscrollInstance');
                if (typeof iScrollInstance !== 'undefined' && iScrollInstance) {
                    if (value) {
                        iScrollInstance.wheelOn();
                    } else {
                        iScrollInstance.wheelOff();
                    }
                }
            });
        },

        /**
        * Turns off iScroll for the destination section.
        * When scrolling very fast on some trackpads (and Apple laptops) the inertial scrolling would
        * scroll the destination section/slide before the sections animations ends.
        */
        onLeave: function onLeave() {
            iscrollHandler.toggleWheel(false);
        },

        // Turns off iScroll for the leaving section
        beforeLeave: function beforeLeave() {
            iscrollHandler.onLeave();
        },

        // Turns on iScroll on section load
        afterLoad: function afterLoad() {
            iscrollHandler.toggleWheel(true);
        },

        /**
         * Called when overflow scrolling is needed for a section.
         *
         * @param  {Object} element      jQuery object containing current section
         * @param  {Number} scrollHeight Current window height in pixels
         */
        create: function create(element, scrollHeight, scrollOverflowOptions) {
            var scrollable = element.find(SCROLLABLE_SEL);

            scrollable.height(scrollHeight);
            scrollable.each(function () {
                var $this = $(this);
                var iScrollInstance = $this.data('iscrollInstance');
                if (iScrollInstance) {
                    $.each(iscrollHandler.iScrollInstances, function () {
                        $(this).destroy();
                    });
                }

                iScrollInstance = new IScroll($this.get(0), scrollOverflowOptions);

                iScrollInstance.on('scrollEnd', function () {
                    this['fp_isAtTop'] = this.y > -30;
                    this['fp_isAtEnd'] = this.y - this.maxScrollY < 30;
                });

                iscrollHandler.iScrollInstances.push(iScrollInstance);

                //off by default until the section gets active
                iScrollInstance.wheelOff();

                $this.data('iscrollInstance', iScrollInstance);
            });
        },

        /**
         * Return a boolean depending on whether the scrollable element is a
         * the end or at the start of the scrolling depending on the given type.
         *
         * @param  {String}  type       Either 'top' or 'bottom'
         * @param  {Object}  scrollable jQuery object for the scrollable element
         * @return {Boolean}
         */
        isScrolled: function isScrolled(type, scrollable) {
            var scroller = scrollable.data('iscrollInstance');

            //no scroller?
            if (!scroller) {
                return true;
            }

            if (type === 'top') {
                return scroller.y >= 0 && !scrollable.scrollTop();
            } else if (type === 'bottom') {
                return 0 - scroller.y + scrollable.scrollTop() + 1 + scrollable.innerHeight() >= scrollable[0].scrollHeight;
            }
        },

        /**
         * Returns the scrollable element for the given section.
         * If there are landscape slides, will only return a scrollable element
         * if it is in the active slide.
         *
         * @param  {Object}  activeSection jQuery object containing current section
         * @return {Boolean}
         */
        scrollable: function scrollable(activeSection) {
            // if there are landscape slides, we check if the scrolling bar is in the current one or not
            if (activeSection.find(SLIDES_WRAPPER_SEL).length) {
                return activeSection.find(SLIDE_ACTIVE_SEL).find(SCROLLABLE_SEL);
            }
            return activeSection.find(SCROLLABLE_SEL);
        },

        /**
         * Returns the scroll height of the wrapped content.
         * If this is larger than the window height minus section padding,
         * overflow scrolling is needed.
         *
         * @param  {Object} element jQuery object containing current section
         * @return {Number}
         */
        scrollHeight: function scrollHeight(element) {
            return element.find(SCROLLABLE_SEL).children().first().get(0).scrollHeight;
        },

        /**
         * Called when overflow scrolling is no longer needed for a section.
         *
         * @param  {Object} element      jQuery object containing current section
         */
        remove: function remove(element) {
            var scrollable = element.find(SCROLLABLE_SEL);
            if (scrollable.length) {
                var iScrollInstance = scrollable.data('iscrollInstance');
                if (iScrollInstance) {
                    iScrollInstance.destroy();
                }

                scrollable.data('iscrollInstance', null);
            }
            element.find(SCROLLABLE_SEL).children().first().children().first().unwrap().unwrap();
        },

        /**
         * Called when overflow scrolling has already been setup but the
         * window height has potentially changed.
         *
         * @param  {Object} element      jQuery object containing current section
         * @param  {Number} scrollHeight Current window height in pixels
         */
        update: function update(element, scrollHeight) {
            //using a timeout in order to execute the refresh function only once when `update` is called multiple times in a
            //short period of time.
            //it also comes on handy because iScroll requires the use of timeout when using `refresh`.
            clearTimeout(iscrollHandler.refreshId);
            iscrollHandler.refreshId = setTimeout(function () {
                $.each(iscrollHandler.iScrollInstances, function () {
                    $(this).get(0).refresh();
                });
            }, 150);

            //updating the wrappers height
            element.find(SCROLLABLE_SEL).css('height', scrollHeight + 'px').parent().css('height', scrollHeight + 'px');
        },

        /**
         * Called to get any additional elements needed to wrap the section
         * content in order to facilitate overflow scrolling.
         *
         * @return {String|Object} Can be a string containing HTML,
         *                         a DOM element, or jQuery object.
         */
        wrapContent: function wrapContent() {
            return '<div class="' + SCROLLABLE + '"><div class="fp-scroller"></div></div>';
        }
    };
})(window, jQuery);

// scrolloverflow module
(function (window, document, $) {
    $.fn.fp_scrolloverflow = function () {

        // keeping central set of classnames and selectors
        var SCROLLABLE = 'fp-scrollable';
        var SCROLLABLE_SEL = '.' + SCROLLABLE;

        var ACTIVE = 'active';
        var ACTIVE_SEL = '.' + ACTIVE;

        var SECTION = 'fp-section';
        var SECTION_SEL = '.' + SECTION;
        var SECTION_ACTIVE_SEL = SECTION_SEL + ACTIVE_SEL;

        var SLIDE = 'fp-slide';
        var SLIDE_SEL = '.' + SLIDE;
        var SLIDE_ACTIVE_SEL = SLIDE_SEL + ACTIVE_SEL;

        var SLIDES_WRAPPER = 'fp-slides';
        var SLIDES_WRAPPER_SEL = '.' + SLIDES_WRAPPER;

        var TABLE_CELL = 'fp-tableCell';
        var TABLE_CELL_SEL = '.' + TABLE_CELL;

        var RESPONSIVE = 'fp-responsive';
        var AUTO_HEIGHT_RESPONSIVE = 'fp-auto-height-responsive';

        /*
        * Turns iScroll `mousewheel` option off dynamically
        * https://github.com/cubiq/iscroll/issues/1036
        */
        IScroll.prototype.wheelOn = function () {
            this.wrapper.addEventListener('wheel', this);
            this.wrapper.addEventListener('mousewheel', this);
            this.wrapper.addEventListener('DOMMouseScroll', this);
        };

        /*
        * Turns iScroll `mousewheel` option on dynamically
        * https://github.com/cubiq/iscroll/issues/1036
        */
        IScroll.prototype.wheelOff = function () {
            this.wrapper.removeEventListener('wheel', this);
            this.wrapper.removeEventListener('mousewheel', this);
            this.wrapper.removeEventListener('DOMMouseScroll', this);
        };

        function scrollBarHandler() {
            var self = this;
            self.options = null;

            self.init = function (options, iscrollOptions) {
                self.options = options;
                self.iscrollOptions = iscrollOptions;

                if (document.readyState === 'complete') {
                    createScrollBarForAll();
                    $.fn.fullpage.shared.afterRenderActions();
                }
                //after DOM and images are loaded
                $(window).on('load', function () {
                    createScrollBarForAll();
                    $.fn.fullpage.shared.afterRenderActions();
                });

                return self;
            };

            /**
            * Creates the scrollbar for the sections and slides in the site
            */
            function createScrollBarForAll() {
                if ($('body').hasClass(RESPONSIVE)) {
                    removeResponsiveScrollOverflows();
                } else {
                    forEachSectionAndSlide(createScrollBar);
                }
            }

            /**
            * Checks if the element needs scrollbar and if the user wants to apply it.
            * If so it creates it.
            *
            * @param {Object} element   jQuery object of the section or slide
            */
            function createScrollBar(element) {
                //User doesn't want scrollbar here? Sayonara baby!
                if (element.hasClass('fp-noscroll')) return;

                //necessary to make `scrollHeight` work under Opera 12
                element.css('overflow', 'hidden');

                var scrollOverflowHandler = self.options.scrollOverflowHandler;
                var wrap = scrollOverflowHandler.wrapContent();
                var section = element.closest(SECTION_SEL); //in case element is a slide
                var scrollable = scrollOverflowHandler.scrollable(element);
                var contentHeight;
                var paddings = parseInt(section.css('padding-bottom')) + parseInt(section.css('padding-top'));

                //if there was scroll, the contentHeight will be the one in the scrollable section
                if (scrollable.length) {
                    contentHeight = scrollOverflowHandler.scrollHeight(element);
                } else {
                    contentHeight = element.get(0).scrollHeight - paddings;
                    if (self.options.verticalCentered) {
                        contentHeight = element.find(TABLE_CELL_SEL).get(0).scrollHeight - paddings;
                    }
                }

                var scrollHeight = $(window).height() - paddings;

                //needs scroll?
                if (contentHeight > scrollHeight) {
                    //did we already have an scrollbar ? Updating it
                    if (scrollable.length) {
                        scrollOverflowHandler.update(element, scrollHeight);
                    }
                    //creating the scrolling
                    else {
                            if (self.options.verticalCentered) {
                                element.find(TABLE_CELL_SEL).wrapInner(wrap);
                            } else {
                                element.wrapInner(wrap);
                            }
                            scrollOverflowHandler.create(element, scrollHeight, self.iscrollOptions);
                        }
                }
                //removing the scrolling when it is not necessary anymore
                else {
                        scrollOverflowHandler.remove(element);
                    }

                //undo
                element.css('overflow', '');
            }

            /**
            * Applies a callback function to each section in the site
            * or the slides within them
            */
            function forEachSectionAndSlide(callback) {
                $(SECTION_SEL).each(function () {
                    var slides = $(this).find(SLIDE_SEL);

                    if (slides.length) {
                        slides.each(function () {
                            callback($(this));
                        });
                    } else {
                        callback($(this));
                    }
                });
            }

            /**
            * Removes scrollOverflow for sections using the class `fp-auto-height-responsive`
            */
            function removeResponsiveScrollOverflows() {
                var scrollOverflowHandler = self.options.scrollOverflowHandler;
                forEachSectionAndSlide(function (element) {
                    if (element.closest(SECTION_SEL).hasClass(AUTO_HEIGHT_RESPONSIVE)) {
                        scrollOverflowHandler.remove(element);
                    }
                });
            }

            //public functions
            self.createScrollBarForAll = createScrollBarForAll;
        }

        /**
         * An object to handle overflow scrolling.
         * This uses jquery.slimScroll to accomplish overflow scrolling.
         * It is possible to pass in an alternate scrollOverflowHandler
         * to the fullpage.js option that implements the same functions
         * as this handler.
         *
         * @type {Object}
         */
        var iscrollHandler = {
            refreshId: null,
            iScrollInstances: [],

            // Default options for iScroll.js used when using scrollOverflow
            iscrollOptions: {
                scrollbars: true,
                mouseWheel: true,
                hideScrollbars: false,
                fadeScrollbars: false,
                disableMouse: true,
                interactiveScrollbars: true
            },

            init: function init(options) {
                var isTouch = 'ontouchstart' in window || navigator.msMaxTouchPoints > 0 || navigator.maxTouchPoints;

                //fixing bug in iScroll with links: https://github.com/cubiq/iscroll/issues/783
                iscrollHandler.iscrollOptions.click = isTouch; // see #2035

                //extending iScroll options with the user custom ones
                iscrollHandler.iscrollOptions = $.extend(iscrollHandler.iscrollOptions, options.scrollOverflowOptions);

                return new scrollBarHandler().init(options, iscrollHandler.iscrollOptions);
            },

            // Enables or disables the mouse wheel for the active section or all slides in it
            toggleWheel: function toggleWheel(value) {
                var scrollable = $(SECTION_ACTIVE_SEL).find(SCROLLABLE_SEL);
                scrollable.each(function () {
                    var iScrollInstance = $(this).data('iscrollInstance');
                    if (typeof iScrollInstance !== 'undefined' && iScrollInstance) {
                        if (value) {
                            iScrollInstance.wheelOn();
                        } else {
                            iScrollInstance.scrollTo(0, 0);
                            iScrollInstance.wheelOff();
                        }
                    }
                });
            },

            /**
            * Turns off iScroll for the destination section.
            * When scrolling very fast on some trackpads (and Apple laptops) the inertial scrolling would
            * scroll the destination section/slide before the sections animations ends.
            */
            onLeave: function onLeave() {
                iscrollHandler.toggleWheel(false);
            },

            // Turns off iScroll for the leaving section
            beforeLeave: function beforeLeave() {
                iscrollHandler.onLeave();
            },

            // Turns on iScroll on section load
            afterLoad: function afterLoad() {
                iscrollHandler.toggleWheel(true);
            },

            /**
             * Called when overflow scrolling is needed for a section.
             *
             * @param  {Object} element      jQuery object containing current section
             * @param  {Number} scrollHeight Current window height in pixels
             */
            create: function create(element, scrollHeight, iscrollOptions) {
                var scrollable = element.find(SCROLLABLE_SEL);

                scrollable.height(scrollHeight);
                scrollable.each(function () {
                    var $this = $(this);
                    var iScrollInstance = $this.data('iscrollInstance');
                    if (iScrollInstance) {
                        $.each(iscrollHandler.iScrollInstances, function () {
                            $(this).destroy();
                        });
                    }

                    iScrollInstance = new IScroll($this.get(0), iscrollOptions);
                    iscrollHandler.iScrollInstances.push(iScrollInstance);

                    //off by default until the section gets active
                    iScrollInstance.wheelOff();

                    $this.data('iscrollInstance', iScrollInstance);
                });
            },

            /**
             * Return a boolean depending on whether the scrollable element is a
             * the end or at the start of the scrolling depending on the given type.
             *
             * @param  {String}  type       Either 'top' or 'bottom'
             * @param  {Object}  scrollable jQuery object for the scrollable element
             * @return {Boolean}
             */
            isScrolled: function isScrolled(type, scrollable) {
                var scroller = scrollable.data('iscrollInstance');

                //no scroller?
                if (!scroller) {
                    return true;
                }

                if (type === 'top') {
                    return scroller.y >= 0 && !scrollable.scrollTop();
                } else if (type === 'bottom') {
                    return 0 - scroller.y + scrollable.scrollTop() + 1 + scrollable.innerHeight() >= scrollable[0].scrollHeight;
                }
            },

            /**
             * Returns the scrollable element for the given section.
             * If there are landscape slides, will only return a scrollable element
             * if it is in the active slide.
             *
             * @param  {Object}  activeSection jQuery object containing current section
             * @return {Boolean}
             */
            scrollable: function scrollable(activeSection) {
                // if there are landscape slides, we check if the scrolling bar is in the current one or not
                if (activeSection.find(SLIDES_WRAPPER_SEL).length) {
                    return activeSection.find(SLIDE_ACTIVE_SEL).find(SCROLLABLE_SEL);
                }
                return activeSection.find(SCROLLABLE_SEL);
            },

            /**
             * Returns the scroll height of the wrapped content.
             * If this is larger than the window height minus section padding,
             * overflow scrolling is needed.
             *
             * @param  {Object} element jQuery object containing current section
             * @return {Number}
             */
            scrollHeight: function scrollHeight(element) {
                return element.find(SCROLLABLE_SEL).children().first().get(0).scrollHeight;
            },

            /**
             * Called when overflow scrolling is no longer needed for a section.
             *
             * @param  {Object} element      jQuery object containing current section
             */
            remove: function remove(element) {
                var scrollable = element.find(SCROLLABLE_SEL);
                if (scrollable.length) {
                    var iScrollInstance = scrollable.data('iscrollInstance');
                    iScrollInstance.destroy();

                    scrollable.data('iscrollInstance', null);
                }
                element.find(SCROLLABLE_SEL).children().first().children().first().unwrap().unwrap();
            },

            /**
             * Called when overflow scrolling has already been setup but the
             * window height has potentially changed.
             *
             * @param  {Object} element      jQuery object containing current section
             * @param  {Number} scrollHeight Current window height in pixels
             */
            update: function update(element, scrollHeight) {
                //using a timeout in order to execute the refresh function only once when `update` is called multiple times in a
                //short period of time.
                //it also comes on handy because iScroll requires the use of timeout when using `refresh`.
                clearTimeout(iscrollHandler.refreshId);
                iscrollHandler.refreshId = setTimeout(function () {
                    $.each(iscrollHandler.iScrollInstances, function () {
                        $(this).get(0).refresh();
                    });
                }, 150);

                //updating the wrappers height
                element.find(SCROLLABLE_SEL).css('height', scrollHeight + 'px').parent().css('height', scrollHeight + 'px');
            },

            /**
             * Called to get any additional elements needed to wrap the section
             * content in order to facilitate overflow scrolling.
             *
             * @return {String|Object} Can be a string containing HTML,
             *                         a DOM element, or jQuery object.
             */
            wrapContent: function wrapContent() {
                return '<div class="' + SCROLLABLE + '"><div class="fp-scroller"></div></div>';
            }
        };

        return {
            iscrollHandler: iscrollHandler
        };
    }();
})(window, document, jQuery);

/***/ }),
/* 9 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ }),
/* 10 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgNWNjNzY4ODdlMjcyOTBiNTk5MzYiLCJ3ZWJwYWNrOi8vLy4vc3JjL2pzL2FwcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3RpY2t5Yml0cy9kaXN0L3N0aWNreWJpdHMuZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlbGxheC9yZWxsYXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93YXlwb2ludHMvbGliL2pxdWVyeS53YXlwb2ludHMubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy93YXlwb2ludHMvbGliL3Nob3J0Y3V0cy9zdGlja3kubWluLmpzIiwid2VicGFjazovLy8uL3NyYy9qcy92ZW5kb3Ivc2Nyb2xsb3ZlcmZsb3cuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Nhc3MvYXBwLnNhc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3Nhc3MvdmlwLnNhc3M/N2E2ZiJdLCJuYW1lcyI6WyJTdGlja3liaXRzIiwidGFyZ2V0Iiwib2JqIiwibyIsInZlcnNpb24iLCJ1c2VyQWdlbnQiLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJwcm9wcyIsIm5vU3R5bGVzIiwic3RpY2t5Qml0U3RpY2t5T2Zmc2V0IiwicGFyZW50Q2xhc3MiLCJzY3JvbGxFbCIsInN0aWNreUNsYXNzIiwic3R1Y2tDbGFzcyIsInVzZVN0aWNreUNsYXNzZXMiLCJ2ZXJ0aWNhbFBvc2l0aW9uIiwicCIsInBvc2l0aW9uVmFsIiwiZGVmaW5lUG9zaXRpb24iLCJ2cCIsIm5zIiwicHYiLCJlbHMiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJpbnN0YW5jZXMiLCJpIiwibGVuZ3RoIiwiZWwiLCJzdHlsZXMiLCJzdHlsZSIsInBvc2l0aW9uIiwiaW5zdGFuY2UiLCJhZGRJbnN0YW5jZSIsInB1c2giLCJwcm90b3R5cGUiLCJwcmVmaXgiLCJ0ZXN0IiwiaGVhZCIsInN0aWNreVByb3AiLCJfdGhpcyIsIml0ZW0iLCJwYXJlbnQiLCJwYXJlbnROb2RlIiwiY2xhc3NOYW1lIiwic2UiLCJpc1dpbiIsImdldENsb3Nlc3RQYXJlbnQiLCJjb21wdXRlU2Nyb2xsT2Zmc2V0cyIsInN0YXRlIiwic3RhdGVDb250YWluZXIiLCJtYW5hZ2VTdGF0ZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJtYXRjaFNlbGVjdG9yIiwicXVlcnlTZWxlY3RvciIsImUiLCJwYXJlbnRFbGVtZW50IiwiaXQiLCJpdyIsInNjcm9sbEVsT2Zmc2V0Iiwic3RpY2t5U3RhcnQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0b3AiLCJvZmZzZXQiLCJzdGlja3lTdG9wIiwib2Zmc2V0SGVpZ2h0IiwidG9nZ2xlQ2xhc3NlcyIsInIiLCJhIiwiY0FycmF5Iiwic3BsaXQiLCJpbmRleE9mIiwickl0ZW0iLCJzcGxpY2UiLCJqb2luIiwic3RhcnQiLCJzdG9wIiwic3RsIiwic3RpY2t5Iiwic3R1Y2siLCJyQUYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJyQUZEdW1teSIsImYiLCJ0QyIsInNjcm9sbCIsInNjcm9sbFkiLCJwYWdlWU9mZnNldCIsInNjcm9sbFRvcCIsIm5vdFN0aWNreSIsImlzU3RpY2t5IiwiaXNTdHVjayIsImJvdHRvbSIsInJlbW92ZUluc3RhbmNlIiwiY2xlYW51cCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzdGlja3liaXRzIiwicm9vdCIsImZhY3RvcnkiLCJkZWZpbmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiUmVsbGF4Iiwib3B0aW9ucyIsInNlbGYiLCJPYmplY3QiLCJjcmVhdGUiLCJwb3NZIiwic2NyZWVuWSIsInBvc1giLCJzY3JlZW5YIiwiYmxvY2tzIiwicGF1c2UiLCJsb29wIiwid2Via2l0UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJvUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2FsbGJhY2siLCJzZXRUaW1lb3V0IiwidHJhbnNmb3JtUHJvcCIsInRlc3RFbCIsImNyZWF0ZUVsZW1lbnQiLCJ0cmFuc2Zvcm0iLCJ2ZW5kb3JzIiwidmVuZG9yIiwidW5kZWZpbmVkIiwic3BlZWQiLCJjZW50ZXIiLCJ3cmFwcGVyIiwicm91bmQiLCJ2ZXJ0aWNhbCIsImhvcml6b250YWwiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImVsZW1lbnRzIiwiZWxlbXMiLCJFcnJvciIsIm5vZGVUeXBlIiwiY2FjaGVCbG9ja3MiLCJibG9jayIsImNyZWF0ZUJsb2NrIiwiaW5pdCIsImNzc1RleHQiLCJpbm5lckhlaWdodCIsImlubmVyV2lkdGgiLCJzZXRQb3NpdGlvbiIsImFuaW1hdGUiLCJkYXRhUGVyY2VudGFnZSIsImdldEF0dHJpYnV0ZSIsImRhdGFTcGVlZCIsImRhdGFaaW5kZXgiLCJ3cmFwcGVyUG9zWSIsImRvY3VtZW50RWxlbWVudCIsImJvZHkiLCJwYWdlWE9mZnNldCIsInNjcm9sbExlZnQiLCJibG9ja1RvcCIsImJsb2NrSGVpZ2h0IiwiY2xpZW50SGVpZ2h0Iiwic2Nyb2xsSGVpZ2h0IiwiYmxvY2tMZWZ0IiwibGVmdCIsImJsb2NrV2lkdGgiLCJjbGllbnRXaWR0aCIsIm9mZnNldFdpZHRoIiwic2Nyb2xsV2lkdGgiLCJwZXJjZW50YWdlWSIsInBlcmNlbnRhZ2VYIiwiYmFzZXMiLCJ1cGRhdGVQb3NpdGlvbiIsImluZGV4IiwidHJpbW1lZFN0eWxlIiwic2xpY2UiLCJkZWxpbWl0ZXIiLCJyZXBsYWNlIiwiYmFzZVgiLCJ4IiwiYmFzZVkiLCJ5IiwiaGVpZ2h0Iiwid2lkdGgiLCJ6aW5kZXgiLCJvbGRZIiwib2xkWCIsInJlc3VsdCIsInZhbHVlWCIsInZhbHVlWSIsIk1hdGgiLCJ1cGRhdGUiLCJwb3NpdGlvbnMiLCJwb3NpdGlvblkiLCJwb3NpdGlvblgiLCJ0cmFuc2xhdGUiLCJkZXN0cm95IiwicmVmcmVzaCIsImdsb2JhbCIsInciLCJub0dsb2JhbCIsImFyciIsImdldFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJjb25jYXQiLCJjbGFzczJ0eXBlIiwidG9TdHJpbmciLCJoYXNPd24iLCJoYXNPd25Qcm9wZXJ0eSIsImZuVG9TdHJpbmciLCJPYmplY3RGdW5jdGlvblN0cmluZyIsImNhbGwiLCJzdXBwb3J0IiwiRE9NRXZhbCIsImNvZGUiLCJkb2MiLCJzY3JpcHQiLCJ0ZXh0IiwiYXBwZW5kQ2hpbGQiLCJyZW1vdmVDaGlsZCIsImpRdWVyeSIsInNlbGVjdG9yIiwiY29udGV4dCIsImZuIiwicnRyaW0iLCJybXNQcmVmaXgiLCJyZGFzaEFscGhhIiwiZmNhbWVsQ2FzZSIsImFsbCIsImxldHRlciIsInRvVXBwZXJDYXNlIiwianF1ZXJ5IiwiY29uc3RydWN0b3IiLCJ0b0FycmF5IiwiZ2V0IiwibnVtIiwicHVzaFN0YWNrIiwicmV0IiwibWVyZ2UiLCJwcmV2T2JqZWN0IiwiZWFjaCIsIm1hcCIsImVsZW0iLCJhcHBseSIsImFyZ3VtZW50cyIsImZpcnN0IiwiZXEiLCJsYXN0IiwibGVuIiwiaiIsImVuZCIsInNvcnQiLCJleHRlbmQiLCJuYW1lIiwic3JjIiwiY29weSIsImNvcHlJc0FycmF5IiwiY2xvbmUiLCJkZWVwIiwiaXNGdW5jdGlvbiIsImlzUGxhaW5PYmplY3QiLCJBcnJheSIsImlzQXJyYXkiLCJleHBhbmRvIiwicmFuZG9tIiwiaXNSZWFkeSIsImVycm9yIiwibXNnIiwibm9vcCIsInR5cGUiLCJpc1dpbmRvdyIsImlzTnVtZXJpYyIsImlzTmFOIiwicGFyc2VGbG9hdCIsInByb3RvIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwiY2FtZWxDYXNlIiwic3RyaW5nIiwiaXNBcnJheUxpa2UiLCJ0cmltIiwibWFrZUFycmF5IiwicmVzdWx0cyIsImluQXJyYXkiLCJzZWNvbmQiLCJncmVwIiwiaW52ZXJ0IiwiY2FsbGJhY2tJbnZlcnNlIiwibWF0Y2hlcyIsImNhbGxiYWNrRXhwZWN0IiwiYXJnIiwidmFsdWUiLCJndWlkIiwicHJveHkiLCJ0bXAiLCJhcmdzIiwibm93IiwiRGF0ZSIsIlN5bWJvbCIsIml0ZXJhdG9yIiwidG9Mb3dlckNhc2UiLCJTaXp6bGUiLCJFeHByIiwiZ2V0VGV4dCIsImlzWE1MIiwidG9rZW5pemUiLCJjb21waWxlIiwic2VsZWN0Iiwib3V0ZXJtb3N0Q29udGV4dCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsInNldERvY3VtZW50IiwiZG9jRWxlbSIsImRvY3VtZW50SXNIVE1MIiwicmJ1Z2d5UVNBIiwicmJ1Z2d5TWF0Y2hlcyIsImNvbnRhaW5zIiwicHJlZmVycmVkRG9jIiwiZGlycnVucyIsImRvbmUiLCJjbGFzc0NhY2hlIiwiY3JlYXRlQ2FjaGUiLCJ0b2tlbkNhY2hlIiwiY29tcGlsZXJDYWNoZSIsInNvcnRPcmRlciIsImIiLCJwb3AiLCJwdXNoX25hdGl2ZSIsImxpc3QiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsIlJlZ0V4cCIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJhdHRyaWJ1dGVRdW90ZXMiLCJycHNldWRvIiwicmlkZW50aWZpZXIiLCJtYXRjaEV4cHIiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJycXVpY2tFeHByIiwicnNpYmxpbmciLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJfIiwiZXNjYXBlZCIsImVzY2FwZWRXaGl0ZXNwYWNlIiwiaGlnaCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInJjc3Nlc2NhcGUiLCJmY3NzZXNjYXBlIiwiY2giLCJhc0NvZGVQb2ludCIsImNoYXJDb2RlQXQiLCJ1bmxvYWRIYW5kbGVyIiwiZGlzYWJsZWRBbmNlc3RvciIsImFkZENvbWJpbmF0b3IiLCJkaXNhYmxlZCIsImRpciIsIm5leHQiLCJjaGlsZE5vZGVzIiwic2VlZCIsIm0iLCJuaWQiLCJtYXRjaCIsImdyb3VwcyIsIm5ld1NlbGVjdG9yIiwibmV3Q29udGV4dCIsIm93bmVyRG9jdW1lbnQiLCJleGVjIiwiZ2V0RWxlbWVudEJ5SWQiLCJpZCIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSIsInFzYSIsIm5vZGVOYW1lIiwic2V0QXR0cmlidXRlIiwidG9TZWxlY3RvciIsInRlc3RDb250ZXh0IiwicXNhRXJyb3IiLCJyZW1vdmVBdHRyaWJ1dGUiLCJjYWNoZSIsImNhY2hlTGVuZ3RoIiwic2hpZnQiLCJtYXJrRnVuY3Rpb24iLCJhc3NlcnQiLCJhZGRIYW5kbGUiLCJhdHRycyIsImhhbmRsZXIiLCJhdHRySGFuZGxlIiwic2libGluZ0NoZWNrIiwiY3VyIiwiZGlmZiIsInNvdXJjZUluZGV4IiwibmV4dFNpYmxpbmciLCJjcmVhdGVJbnB1dFBzZXVkbyIsImNyZWF0ZUJ1dHRvblBzZXVkbyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiaXNEaXNhYmxlZCIsImNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8iLCJhcmd1bWVudCIsIm1hdGNoSW5kZXhlcyIsIm5vZGUiLCJoYXNDb21wYXJlIiwic3ViV2luZG93IiwiZGVmYXVsdFZpZXciLCJhdHRhY2hFdmVudCIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJmaWx0ZXIiLCJhdHRySWQiLCJmaW5kIiwiZ2V0QXR0cmlidXRlTm9kZSIsInRhZyIsImlubmVySFRNTCIsImlucHV0IiwibWF0Y2hlc1NlbGVjdG9yIiwid2Via2l0TWF0Y2hlc1NlbGVjdG9yIiwibW96TWF0Y2hlc1NlbGVjdG9yIiwib01hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZGlzY29ubmVjdGVkTWF0Y2giLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsImFkb3duIiwiYnVwIiwiY29tcGFyZSIsInNvcnREZXRhY2hlZCIsImF1cCIsImFwIiwiYnAiLCJ1bnNoaWZ0IiwiZXhwciIsImF0dHIiLCJ2YWwiLCJzcGVjaWZpZWQiLCJlc2NhcGUiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwidGV4dENvbnRlbnQiLCJmaXJzdENoaWxkIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwicmVsYXRpdmUiLCJwcmVGaWx0ZXIiLCJleGNlc3MiLCJ1bnF1b3RlZCIsIm5vZGVOYW1lU2VsZWN0b3IiLCJwYXR0ZXJuIiwib3BlcmF0b3IiLCJjaGVjayIsIndoYXQiLCJzaW1wbGUiLCJmb3J3YXJkIiwib2ZUeXBlIiwieG1sIiwidW5pcXVlQ2FjaGUiLCJvdXRlckNhY2hlIiwibm9kZUluZGV4IiwidXNlQ2FjaGUiLCJsYXN0Q2hpbGQiLCJ1bmlxdWVJRCIsInBzZXVkbyIsInNldEZpbHRlcnMiLCJpZHgiLCJtYXRjaGVkIiwibWF0Y2hlciIsInVubWF0Y2hlZCIsImlubmVyVGV4dCIsImxhbmciLCJlbGVtTGFuZyIsImhhc2giLCJsb2NhdGlvbiIsImFjdGl2ZUVsZW1lbnQiLCJoYXNGb2N1cyIsImhyZWYiLCJ0YWJJbmRleCIsImNoZWNrZWQiLCJzZWxlY3RlZCIsInNlbGVjdGVkSW5kZXgiLCJyYWRpbyIsImNoZWNrYm94IiwiZmlsZSIsInBhc3N3b3JkIiwiaW1hZ2UiLCJzdWJtaXQiLCJyZXNldCIsImZpbHRlcnMiLCJwYXJzZU9ubHkiLCJ0b2tlbnMiLCJzb0ZhciIsInByZUZpbHRlcnMiLCJjYWNoZWQiLCJjb21iaW5hdG9yIiwiYmFzZSIsInNraXAiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJvbGRDYWNoZSIsIm5ld0NhY2hlIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsIm11bHRpcGxlQ29udGV4dHMiLCJjb250ZXh0cyIsImNvbmRlbnNlIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwidGVtcCIsInByZU1hcCIsInBvc3RNYXAiLCJwcmVleGlzdGluZyIsIm1hdGNoZXJJbiIsIm1hdGNoZXJPdXQiLCJtYXRjaGVyRnJvbVRva2VucyIsImNoZWNrQ29udGV4dCIsImxlYWRpbmdSZWxhdGl2ZSIsImltcGxpY2l0UmVsYXRpdmUiLCJtYXRjaENvbnRleHQiLCJtYXRjaEFueUNvbnRleHQiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJlbGVtZW50TWF0Y2hlcnMiLCJzZXRNYXRjaGVycyIsImJ5U2V0IiwiYnlFbGVtZW50Iiwic3VwZXJNYXRjaGVyIiwib3V0ZXJtb3N0IiwibWF0Y2hlZENvdW50Iiwic2V0TWF0Y2hlZCIsImNvbnRleHRCYWNrdXAiLCJkaXJydW5zVW5pcXVlIiwidG9rZW4iLCJjb21waWxlZCIsImRlZmF1bHRWYWx1ZSIsInVuaXF1ZSIsImlzWE1MRG9jIiwiZXNjYXBlU2VsZWN0b3IiLCJ1bnRpbCIsInRydW5jYXRlIiwiaXMiLCJzaWJsaW5ncyIsIm4iLCJybmVlZHNDb250ZXh0IiwibmVlZHNDb250ZXh0IiwicnNpbmdsZVRhZyIsInJpc1NpbXBsZSIsIndpbm5vdyIsInF1YWxpZmllciIsIm5vdCIsInJvb3RqUXVlcnkiLCJwYXJzZUhUTUwiLCJyZWFkeSIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjaGlsZHJlbiIsImNvbnRlbnRzIiwicHJldiIsImhhcyIsInRhcmdldHMiLCJsIiwiY2xvc2VzdCIsInByZXZBbGwiLCJhZGQiLCJhZGRCYWNrIiwic2libGluZyIsInBhcmVudHMiLCJwYXJlbnRzVW50aWwiLCJuZXh0QWxsIiwibmV4dFVudGlsIiwicHJldlVudGlsIiwiY29udGVudERvY3VtZW50IiwiY29udGVudCIsInJldmVyc2UiLCJybm90aHRtbHdoaXRlIiwiY3JlYXRlT3B0aW9ucyIsIm9iamVjdCIsImZsYWciLCJDYWxsYmFja3MiLCJmaXJpbmciLCJtZW1vcnkiLCJmaXJlZCIsImxvY2tlZCIsInF1ZXVlIiwiZmlyaW5nSW5kZXgiLCJmaXJlIiwib25jZSIsInN0b3BPbkZhbHNlIiwicmVtb3ZlIiwiZW1wdHkiLCJkaXNhYmxlIiwibG9jayIsImZpcmVXaXRoIiwiSWRlbnRpdHkiLCJ2IiwiVGhyb3dlciIsImV4IiwiYWRvcHRWYWx1ZSIsInJlc29sdmUiLCJyZWplY3QiLCJub1ZhbHVlIiwibWV0aG9kIiwicHJvbWlzZSIsImZhaWwiLCJ0aGVuIiwiRGVmZXJyZWQiLCJmdW5jIiwidHVwbGVzIiwiYWx3YXlzIiwiZGVmZXJyZWQiLCJwaXBlIiwiZm5zIiwibmV3RGVmZXIiLCJ0dXBsZSIsInJldHVybmVkIiwicHJvZ3Jlc3MiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwibWF4RGVwdGgiLCJkZXB0aCIsInNwZWNpYWwiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIlR5cGVFcnJvciIsIm5vdGlmeVdpdGgiLCJyZXNvbHZlV2l0aCIsInByb2Nlc3MiLCJleGNlcHRpb25Ib29rIiwic3RhY2tUcmFjZSIsInJlamVjdFdpdGgiLCJnZXRTdGFja0hvb2siLCJzdGF0ZVN0cmluZyIsIndoZW4iLCJzaW5nbGVWYWx1ZSIsInJlbWFpbmluZyIsInJlc29sdmVDb250ZXh0cyIsInJlc29sdmVWYWx1ZXMiLCJtYXN0ZXIiLCJ1cGRhdGVGdW5jIiwicmVycm9yTmFtZXMiLCJzdGFjayIsImNvbnNvbGUiLCJ3YXJuIiwibWVzc2FnZSIsInJlYWR5RXhjZXB0aW9uIiwicmVhZHlMaXN0IiwiY2F0Y2giLCJyZWFkeVdhaXQiLCJ3YWl0IiwiY29tcGxldGVkIiwicmVhZHlTdGF0ZSIsImRvU2Nyb2xsIiwiYWNjZXNzIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwiRGF0YSIsInVpZCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwic2V0IiwiZGF0YSIsInByb3AiLCJoYXNEYXRhIiwiZGF0YVByaXYiLCJkYXRhVXNlciIsInJicmFjZSIsInJtdWx0aURhc2giLCJnZXREYXRhIiwiSlNPTiIsInBhcnNlIiwiZGF0YUF0dHIiLCJyZW1vdmVEYXRhIiwiX2RhdGEiLCJfcmVtb3ZlRGF0YSIsImRlcXVldWUiLCJzdGFydExlbmd0aCIsImhvb2tzIiwiX3F1ZXVlSG9va3MiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiY291bnQiLCJkZWZlciIsInBudW0iLCJzb3VyY2UiLCJyY3NzTnVtIiwiY3NzRXhwYW5kIiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwiZGlzcGxheSIsImNzcyIsInN3YXAiLCJvbGQiLCJhZGp1c3RDU1MiLCJ2YWx1ZVBhcnRzIiwidHdlZW4iLCJhZGp1c3RlZCIsInNjYWxlIiwibWF4SXRlcmF0aW9ucyIsImN1cnJlbnRWYWx1ZSIsImluaXRpYWwiLCJ1bml0IiwiY3NzTnVtYmVyIiwiaW5pdGlhbEluVW5pdCIsImRlZmF1bHREaXNwbGF5TWFwIiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJzaG93SGlkZSIsInNob3ciLCJ2YWx1ZXMiLCJoaWRlIiwidG9nZ2xlIiwicmNoZWNrYWJsZVR5cGUiLCJydGFnTmFtZSIsInJzY3JpcHRUeXBlIiwid3JhcE1hcCIsIm9wdGlvbiIsInRoZWFkIiwiY29sIiwidHIiLCJ0ZCIsIl9kZWZhdWx0Iiwib3B0Z3JvdXAiLCJ0Ym9keSIsInRmb290IiwiY29sZ3JvdXAiLCJjYXB0aW9uIiwidGgiLCJnZXRBbGwiLCJzZXRHbG9iYWxFdmFsIiwicmVmRWxlbWVudHMiLCJyaHRtbCIsImJ1aWxkRnJhZ21lbnQiLCJzY3JpcHRzIiwic2VsZWN0aW9uIiwiaWdub3JlZCIsIndyYXAiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJub2RlcyIsImNyZWF0ZVRleHROb2RlIiwiaHRtbFByZWZpbHRlciIsImRpdiIsImNoZWNrQ2xvbmUiLCJjbG9uZU5vZGUiLCJub0Nsb25lQ2hlY2tlZCIsInJrZXlFdmVudCIsInJtb3VzZUV2ZW50IiwicnR5cGVuYW1lc3BhY2UiLCJyZXR1cm5UcnVlIiwicmV0dXJuRmFsc2UiLCJzYWZlQWN0aXZlRWxlbWVudCIsImVyciIsIm9uIiwidHlwZXMiLCJvbmUiLCJvcmlnRm4iLCJldmVudCIsIm9mZiIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJldmVudHMiLCJ0IiwiaGFuZGxlT2JqIiwiaGFuZGxlcnMiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsImhhbmRsZSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiZGVsZWdhdGVUeXBlIiwiYmluZFR5cGUiLCJuYW1lc3BhY2UiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImZpeCIsImhhbmRsZXJRdWV1ZSIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsInBvc3REaXNwYXRjaCIsIm1hdGNoZWRIYW5kbGVycyIsIm1hdGNoZWRTZWxlY3RvcnMiLCJidXR0b24iLCJhZGRQcm9wIiwiaG9vayIsIkV2ZW50IiwiZW51bWVyYWJsZSIsIm9yaWdpbmFsRXZlbnQiLCJ3cml0YWJsZSIsImxvYWQiLCJub0J1YmJsZSIsImZvY3VzIiwidHJpZ2dlciIsImJsdXIiLCJjbGljayIsImJlZm9yZXVubG9hZCIsInJldHVyblZhbHVlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJpc1NpbXVsYXRlZCIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsImFsdEtleSIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJjdHJsS2V5IiwiZGV0YWlsIiwiZXZlbnRQaGFzZSIsIm1ldGFLZXkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJ2aWV3IiwiY2hhckNvZGUiLCJrZXlDb2RlIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInRhcmdldFRvdWNoZXMiLCJ0b0VsZW1lbnQiLCJ0b3VjaGVzIiwid2hpY2giLCJtb3VzZWVudGVyIiwibW91c2VsZWF2ZSIsInBvaW50ZXJlbnRlciIsInBvaW50ZXJsZWF2ZSIsIm9yaWciLCJyZWxhdGVkIiwicnhodG1sVGFnIiwicm5vSW5uZXJodG1sIiwicmNoZWNrZWQiLCJyc2NyaXB0VHlwZU1hc2tlZCIsInJjbGVhblNjcmlwdCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwicGRhdGFPbGQiLCJwZGF0YUN1ciIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJmaXhJbnB1dCIsImRvbU1hbmlwIiwiY29sbGVjdGlvbiIsImhhc1NjcmlwdHMiLCJpTm9DbG9uZSIsImh0bWwiLCJfZXZhbFVybCIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiZGF0YUFuZEV2ZW50cyIsImRlZXBEYXRhQW5kRXZlbnRzIiwic3JjRWxlbWVudHMiLCJkZXN0RWxlbWVudHMiLCJpblBhZ2UiLCJkZXRhY2giLCJhcHBlbmQiLCJwcmVwZW5kIiwiaW5zZXJ0QmVmb3JlIiwiYmVmb3JlIiwiYWZ0ZXIiLCJyZXBsYWNlV2l0aCIsInJlcGxhY2VDaGlsZCIsImFwcGVuZFRvIiwicHJlcGVuZFRvIiwiaW5zZXJ0QWZ0ZXIiLCJyZXBsYWNlQWxsIiwib3JpZ2luYWwiLCJpbnNlcnQiLCJybWFyZ2luIiwicm51bW5vbnB4IiwiZ2V0U3R5bGVzIiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY29udGFpbmVyIiwiZGl2U3R5bGUiLCJwaXhlbFBvc2l0aW9uVmFsIiwicmVsaWFibGVNYXJnaW5MZWZ0VmFsIiwibWFyZ2luTGVmdCIsImJveFNpemluZ1JlbGlhYmxlVmFsIiwibWFyZ2luUmlnaHQiLCJwaXhlbE1hcmdpblJpZ2h0VmFsIiwiYmFja2dyb3VuZENsaXAiLCJjbGVhckNsb25lU3R5bGUiLCJwaXhlbFBvc2l0aW9uIiwiYm94U2l6aW5nUmVsaWFibGUiLCJwaXhlbE1hcmdpblJpZ2h0IiwicmVsaWFibGVNYXJnaW5MZWZ0IiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0UHJvcGVydHlWYWx1ZSIsImFkZEdldEhvb2tJZiIsImNvbmRpdGlvbkZuIiwiaG9va0ZuIiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiY3NzUHJlZml4ZXMiLCJlbXB0eVN0eWxlIiwidmVuZG9yUHJvcE5hbWUiLCJjYXBOYW1lIiwiZmluYWxQcm9wTmFtZSIsImNzc1Byb3BzIiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsIm1heCIsImF1Z21lbnRXaWR0aE9ySGVpZ2h0IiwiZXh0cmEiLCJpc0JvcmRlckJveCIsImdldFdpZHRoT3JIZWlnaHQiLCJ2YWx1ZUlzQm9yZGVyQm94IiwiY3NzSG9va3MiLCJvcGFjaXR5Iiwib3JpZ05hbWUiLCJpc0N1c3RvbVByb3AiLCJzZXRQcm9wZXJ0eSIsImlzRmluaXRlIiwiZ2V0Q2xpZW50UmVjdHMiLCJtYXJnaW4iLCJwYWRkaW5nIiwiYm9yZGVyIiwic3VmZml4IiwiZXhwYW5kIiwiZXhwYW5kZWQiLCJwYXJ0cyIsIlR3ZWVuIiwiZWFzaW5nIiwicHJvcEhvb2tzIiwicnVuIiwicGVyY2VudCIsImVhc2VkIiwiZHVyYXRpb24iLCJwb3MiLCJzdGVwIiwiZngiLCJsaW5lYXIiLCJzd2luZyIsImNvcyIsIlBJIiwiZnhOb3ciLCJpblByb2dyZXNzIiwicmZ4dHlwZXMiLCJycnVuIiwic2NoZWR1bGUiLCJoaWRkZW4iLCJpbnRlcnZhbCIsInRpY2siLCJjcmVhdGVGeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwiY3JlYXRlVHdlZW4iLCJhbmltYXRpb24iLCJBbmltYXRpb24iLCJ0d2VlbmVycyIsImRlZmF1bHRQcmVmaWx0ZXIiLCJvcHRzIiwib2xkZmlyZSIsInByb3BUd2VlbiIsInJlc3RvcmVEaXNwbGF5IiwiaXNCb3giLCJhbmltIiwiZGF0YVNob3ciLCJ1bnF1ZXVlZCIsIm92ZXJmbG93Iiwib3ZlcmZsb3dYIiwib3ZlcmZsb3dZIiwicHJvcEZpbHRlciIsInNwZWNpYWxFYXNpbmciLCJwcm9wZXJ0aWVzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJjdXJyZW50VGltZSIsInN0YXJ0VGltZSIsInR3ZWVucyIsIm9yaWdpbmFsUHJvcGVydGllcyIsIm9yaWdpbmFsT3B0aW9ucyIsImdvdG9FbmQiLCJjb21wbGV0ZSIsInRpbWVyIiwidHdlZW5lciIsInByZWZpbHRlciIsIm9wdCIsInNwZWVkcyIsImZhZGVUbyIsInRvIiwib3B0YWxsIiwiZG9BbmltYXRpb24iLCJmaW5pc2giLCJzdG9wUXVldWUiLCJ0aW1lcnMiLCJjc3NGbiIsInNsaWRlRG93biIsInNsaWRlVXAiLCJzbGlkZVRvZ2dsZSIsImZhZGVJbiIsImZhZGVPdXQiLCJmYWRlVG9nZ2xlIiwic2xvdyIsImZhc3QiLCJkZWxheSIsInRpbWUiLCJ0aW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiY2hlY2tPbiIsIm9wdFNlbGVjdGVkIiwicmFkaW9WYWx1ZSIsImJvb2xIb29rIiwicmVtb3ZlQXR0ciIsIm5UeXBlIiwiYXR0ckhvb2tzIiwiYm9vbCIsImF0dHJOYW1lcyIsImdldHRlciIsImxvd2VyY2FzZU5hbWUiLCJyZm9jdXNhYmxlIiwicmNsaWNrYWJsZSIsInJlbW92ZVByb3AiLCJwcm9wRml4IiwidGFiaW5kZXgiLCJwYXJzZUludCIsInN0cmlwQW5kQ29sbGFwc2UiLCJnZXRDbGFzcyIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwicmZvY3VzTW9ycGgiLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwiZXZlbnRQYXRoIiwiaXNUcmlnZ2VyIiwicGFyZW50V2luZG93Iiwic2ltdWxhdGUiLCJ0cmlnZ2VySGFuZGxlciIsImhvdmVyIiwiZm5PdmVyIiwiZm5PdXQiLCJmb2N1c2luIiwiYXR0YWNoZXMiLCJub25jZSIsInJxdWVyeSIsInBhcnNlWE1MIiwiRE9NUGFyc2VyIiwicGFyc2VGcm9tU3RyaW5nIiwicmJyYWNrZXQiLCJyQ1JMRiIsInJzdWJtaXR0ZXJUeXBlcyIsInJzdWJtaXR0YWJsZSIsImJ1aWxkUGFyYW1zIiwidHJhZGl0aW9uYWwiLCJwYXJhbSIsInMiLCJ2YWx1ZU9yRnVuY3Rpb24iLCJlbmNvZGVVUklDb21wb25lbnQiLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicmxvY2FsUHJvdG9jb2wiLCJybm9Db250ZW50IiwicnByb3RvY29sIiwidHJhbnNwb3J0cyIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwiYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwic3RydWN0dXJlIiwiZGF0YVR5cGVFeHByZXNzaW9uIiwiZGF0YVR5cGUiLCJkYXRhVHlwZXMiLCJpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyIsImpxWEhSIiwiaW5zcGVjdGVkIiwic2Vla2luZ1RyYW5zcG9ydCIsImluc3BlY3QiLCJwcmVmaWx0ZXJPckZhY3RvcnkiLCJkYXRhVHlwZU9yVHJhbnNwb3J0IiwiYWpheEV4dGVuZCIsImZsYXRPcHRpb25zIiwiYWpheFNldHRpbmdzIiwiYWpheEhhbmRsZVJlc3BvbnNlcyIsInJlc3BvbnNlcyIsImN0IiwiZmluYWxEYXRhVHlwZSIsImZpcnN0RGF0YVR5cGUiLCJtaW1lVHlwZSIsImdldFJlc3BvbnNlSGVhZGVyIiwiY29udmVydGVycyIsImFqYXhDb252ZXJ0IiwicmVzcG9uc2UiLCJpc1N1Y2Nlc3MiLCJjb252MiIsImN1cnJlbnQiLCJjb252IiwicmVzcG9uc2VGaWVsZHMiLCJkYXRhRmlsdGVyIiwidGhyb3dzIiwiYWN0aXZlIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsInVybCIsImlzTG9jYWwiLCJwcm90b2NvbCIsInByb2Nlc3NEYXRhIiwiYXN5bmMiLCJjb250ZW50VHlwZSIsImFjY2VwdHMiLCJqc29uIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJ0cmFuc3BvcnQiLCJjYWNoZVVSTCIsInJlc3BvbnNlSGVhZGVyc1N0cmluZyIsInJlc3BvbnNlSGVhZGVycyIsInRpbWVvdXRUaW1lciIsInVybEFuY2hvciIsImZpcmVHbG9iYWxzIiwidW5jYWNoZWQiLCJjYWxsYmFja0NvbnRleHQiLCJnbG9iYWxFdmVudENvbnRleHQiLCJjb21wbGV0ZURlZmVycmVkIiwic3RhdHVzQ29kZSIsInJlcXVlc3RIZWFkZXJzIiwicmVxdWVzdEhlYWRlcnNOYW1lcyIsInN0ckFib3J0IiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwic2V0UmVxdWVzdEhlYWRlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJzdGF0dXMiLCJhYm9ydCIsInN0YXR1c1RleHQiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhvc3QiLCJoYXNDb250ZW50IiwiaWZNb2RpZmllZCIsImhlYWRlcnMiLCJiZWZvcmVTZW5kIiwic3VjY2VzcyIsInNlbmQiLCJuYXRpdmVTdGF0dXNUZXh0IiwibW9kaWZpZWQiLCJnZXRKU09OIiwiZ2V0U2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwidW53cmFwIiwidmlzaWJsZSIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwieGhyU3VjY2Vzc1N0YXR1cyIsInhoclN1cHBvcnRlZCIsImNvcnMiLCJlcnJvckNhbGxiYWNrIiwib3BlbiIsInVzZXJuYW1lIiwieGhyRmllbGRzIiwib25sb2FkIiwib25lcnJvciIsIm9uYWJvcnQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJiaW5hcnkiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwicGFyc2VkIiwicGFyYW1zIiwiYW5pbWF0ZWQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY2FsY3VsYXRlUG9zaXRpb24iLCJjdXJFbGVtIiwidXNpbmciLCJyZWN0Iiwid2luIiwiY2xpZW50VG9wIiwiY2xpZW50TGVmdCIsIm9mZnNldFBhcmVudCIsInBhcmVudE9mZnNldCIsInNjcm9sbFRvIiwiSGVpZ2h0IiwiV2lkdGgiLCJkZWZhdWx0RXh0cmEiLCJmdW5jTmFtZSIsImJpbmQiLCJ1bmJpbmQiLCJkZWxlZ2F0ZSIsInVuZGVsZWdhdGUiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiX2pRdWVyeSIsIl8kIiwiJCIsIm5vQ29uZmxpY3QiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJwYXRocyIsImVsZW1lbnQiLCJBZGFwdGVyIiwiZGVmYXVsdHMiLCJhZGFwdGVyIiwiYXhpcyIsImVuYWJsZWQiLCJ0cmlnZ2VyUG9pbnQiLCJncm91cCIsIkdyb3VwIiwiZmluZE9yQ3JlYXRlIiwiQ29udGV4dCIsImZpbmRPckNyZWF0ZUJ5RWxlbWVudCIsIm9mZnNldEFsaWFzZXMiLCJxdWV1ZVRyaWdnZXIiLCJlbmFibGUiLCJwcmV2aW91cyIsImludm9rZUFsbCIsImRlc3Ryb3lBbGwiLCJkaXNhYmxlQWxsIiwiZW5hYmxlQWxsIiwicmVmcmVzaEFsbCIsInZpZXdwb3J0SGVpZ2h0Iiwidmlld3BvcnRXaWR0aCIsImFkYXB0ZXJzIiwiY29udGludW91cyIsIm91dGVySGVpZ2h0Iiwib3V0ZXJXaWR0aCIsIldheXBvaW50IiwiZGlkU2Nyb2xsIiwiZGlkUmVzaXplIiwib2xkU2Nyb2xsIiwid2F5cG9pbnRzIiwid2F5cG9pbnRDb250ZXh0S2V5Iiwid2luZG93Q29udGV4dCIsImNyZWF0ZVRocm90dGxlZFNjcm9sbEhhbmRsZXIiLCJjcmVhdGVUaHJvdHRsZWRSZXNpemVIYW5kbGVyIiwiY2hlY2tFbXB0eSIsImhhbmRsZVJlc2l6ZSIsImhhbmRsZVNjcm9sbCIsImlzVG91Y2giLCJuZXdTY3JvbGwiLCJiYWNrd2FyZCIsImgiLCJ1IiwiYyIsImZsdXNoVHJpZ2dlcnMiLCJjb250ZXh0T2Zmc2V0IiwiY29udGV4dFNjcm9sbCIsImNvbnRleHREaW1lbnNpb24iLCJvZmZzZXRQcm9wIiwiZCIsImciLCJjZWlsIiwiZmxvb3IiLCJmaW5kQnlFbGVtZW50IiwiY2xlYXJUcmlnZ2VyUXVldWVzIiwidHJpZ2dlclF1ZXVlcyIsInVwIiwiZG93biIsInJpZ2h0IiwiJGVsZW1lbnQiLCJ3YXlwb2ludCIsIlplcHRvIiwiY3JlYXRlV3JhcHBlciIsImNyZWF0ZVdheXBvaW50IiwiZGlyZWN0aW9uIiwiJHdyYXBwZXIiLCJTdGlja3kiXSwibWFwcGluZ3MiOiI7QUFBQTtBQUNBOztB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b0JBQUksYUFBYSxRQUFRLEtBQ3pCO29CQUFJLFdBQVcsUUFDWDt3QkFBSSxrQkFBa0IsV0FBVyxLQUNqQztvQ0FFQTs7K0JBQVcsS0FBSyxtQkFDbkI7QUFDRDt3QkFBUSxLQUFLLGdCQUFnQixXQUFXLFFBQVEsV0FBVyxRQUFRLFNBQ3RFO0FBRUQ7O0FBT0E7Ozs7Ozs7b0JBQVEsZ0JBQVMsU0FBUyxjQUN0QjtBQUNBO0FBQ0E7QUFDQTs2QkFBYSxlQUNiOytCQUFlLHVCQUF1QixZQUNsQztzQkFBRSxLQUFLLGVBQWUsa0JBQWtCLFlBQ3BDOzBCQUFFLE1BQU0sSUFBSSxHQUNmO0FBQ0o7QUFKMEIsbUJBTTNCOztBQUNBO3dCQUFRLEtBQUssZ0JBQWdCLElBQUksVUFBVSxlQUFlLE1BQU0sU0FBUyxJQUFJLFVBQVUsZUFDMUY7QUFFRDs7QUFPQTs7Ozs7Ozt5QkFBYSx1QkFDVDt1QkFBTyxpQkFBaUIsYUFDM0I7QUFHTDtBQS9MSTs7OzRCQWtNUDtBQUZPO0FBR1gsS0F6WDZCO0FBRDlCLEdBMFhHLFFBQVEsVUFBVSxROzs7Ozs7QUNuckZ6Qix5Qzs7Ozs7O0FDQUEseUMiLCJmaWxlIjoiL2Rpc3QvYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgNWNjNzY4ODdlMjcyOTBiNTk5MzYiLCIvLyBpbXBvcnQgQmxhenkgZnJvbSAnYmxhenknXG5pbXBvcnQgc3RpY2t5Yml0cyBmcm9tICdzdGlja3liaXRzJ1xuaW1wb3J0IFJlbGxheCBmcm9tICdyZWxsYXgnXG53aW5kb3cuJCA9IHdpbmRvdy5qUXVlcnkgPSByZXF1aXJlKCdqcXVlcnknKVxuXG5yZXF1aXJlKCcuLi8uLi9ub2RlX21vZHVsZXMvd2F5cG9pbnRzL2xpYi9qcXVlcnkud2F5cG9pbnRzLm1pbi5qcycpXG5yZXF1aXJlKCcuLi8uLi9ub2RlX21vZHVsZXMvd2F5cG9pbnRzL2xpYi9zaG9ydGN1dHMvc3RpY2t5Lm1pbi5qcycpXG5yZXF1aXJlKCcuL3ZlbmRvci9zY3JvbGxvdmVyZmxvdy5qcycpXG5cbi8qXG4qICBuZXdfbWFwXG4qXG4qICBUaGlzIGZ1bmN0aW9uIHdpbGwgcmVuZGVyIGEgR29vZ2xlIE1hcCBvbnRvIHRoZSBzZWxlY3RlZCBqUXVlcnkgZWxlbWVudFxuKlxuKiAgQHR5cGUgIGZ1bmN0aW9uXG4qICBAZGF0ZSAgOC8xMS8yMDEzXG4qICBAc2luY2UgNC4zLjBcbipcbiogIEBwYXJhbSAkZWwgKGpRdWVyeSBlbGVtZW50KVxuKiAgQHJldHVybiAgbi9hXG4qL1xuXG5mdW5jdGlvbiBuZXdfbWFwKCAkZWwgKSB7XG5cbiAgLy8gdmFyXG4gIHZhciAkbWFya2VycyA9ICRlbC5maW5kKCcubWFya2VyJyk7XG5cbiAgLy8gdmFyc1xuICB2YXIgYXJncyA9IHtcbiAgICAgIHpvb206IDE1LFxuICAgICAgY2VudGVyOiBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKDAsIDApLFxuICAgICAgbWFwVHlwZUlkOiBnb29nbGUubWFwcy5NYXBUeXBlSWQuUk9BRE1BUCxcbiAgICAgIGRpc2FibGVEZWZhdWx0VUk6IHRydWUsXG4gICAgICBzdHlsZXM6IFt7XG4gICAgICAgICAgICAgIGVsZW1lbnRUeXBlOiAnZ2VvbWV0cnknLFxuICAgICAgICAgICAgICBzdHlsZXJzOiBbe1xuICAgICAgICAgICAgICAgICAgY29sb3I6ICcjZjVmNWY1J1xuICAgICAgICAgICAgICB9XVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgICBlbGVtZW50VHlwZTogJ2xhYmVscy5pY29uJyxcbiAgICAgICAgICAgICAgc3R5bGVyczogW3tcbiAgICAgICAgICAgICAgICAgIHZpc2liaWxpdHk6ICdvZmYnXG4gICAgICAgICAgICAgIH1dXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICAgIGVsZW1lbnRUeXBlOiAnbGFiZWxzLnRleHQuZmlsbCcsXG4gICAgICAgICAgICAgIHN0eWxlcnM6IFt7XG4gICAgICAgICAgICAgICAgICBjb2xvcjogJyM2MTYxNjEnXG4gICAgICAgICAgICAgIH1dXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICAgIGVsZW1lbnRUeXBlOiAnbGFiZWxzLnRleHQuc3Ryb2tlJyxcbiAgICAgICAgICAgICAgc3R5bGVyczogW3tcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2Y1ZjVmNSdcbiAgICAgICAgICAgICAgfV1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZmVhdHVyZVR5cGU6ICdhZG1pbmlzdHJhdGl2ZS5sYW5kX3BhcmNlbCcsXG4gICAgICAgICAgICAgIGVsZW1lbnRUeXBlOiAnbGFiZWxzLnRleHQuZmlsbCcsXG4gICAgICAgICAgICAgIHN0eWxlcnM6IFt7XG4gICAgICAgICAgICAgICAgICBjb2xvcjogJyNiZGJkYmQnXG4gICAgICAgICAgICAgIH1dXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICAgIGZlYXR1cmVUeXBlOiAncG9pJyxcbiAgICAgICAgICAgICAgZWxlbWVudFR5cGU6ICdnZW9tZXRyeScsXG4gICAgICAgICAgICAgIHN0eWxlcnM6IFt7XG4gICAgICAgICAgICAgICAgICBjb2xvcjogJyNlZWVlZWUnXG4gICAgICAgICAgICAgIH1dXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICAgIGZlYXR1cmVUeXBlOiAncG9pJyxcbiAgICAgICAgICAgICAgZWxlbWVudFR5cGU6ICdsYWJlbHMudGV4dC5maWxsJyxcbiAgICAgICAgICAgICAgc3R5bGVyczogW3tcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzc1NzU3NSdcbiAgICAgICAgICAgICAgfV1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZmVhdHVyZVR5cGU6ICdwb2kucGFyaycsXG4gICAgICAgICAgICAgIGVsZW1lbnRUeXBlOiAnZ2VvbWV0cnknLFxuICAgICAgICAgICAgICBzdHlsZXJzOiBbe1xuICAgICAgICAgICAgICAgICAgY29sb3I6ICcjZTVlNWU1J1xuICAgICAgICAgICAgICB9XVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgICBmZWF0dXJlVHlwZTogJ3BvaS5wYXJrJyxcbiAgICAgICAgICAgICAgZWxlbWVudFR5cGU6ICdsYWJlbHMudGV4dC5maWxsJyxcbiAgICAgICAgICAgICAgc3R5bGVyczogW3tcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzllOWU5ZSdcbiAgICAgICAgICAgICAgfV1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZmVhdHVyZVR5cGU6ICdyb2FkJyxcbiAgICAgICAgICAgICAgZWxlbWVudFR5cGU6ICdnZW9tZXRyeScsXG4gICAgICAgICAgICAgIHN0eWxlcnM6IFt7XG4gICAgICAgICAgICAgICAgICBjb2xvcjogJyNmZmZmZmYnXG4gICAgICAgICAgICAgIH1dXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICAgIGZlYXR1cmVUeXBlOiAncm9hZC5hcnRlcmlhbCcsXG4gICAgICAgICAgICAgIGVsZW1lbnRUeXBlOiAnbGFiZWxzLnRleHQuZmlsbCcsXG4gICAgICAgICAgICAgIHN0eWxlcnM6IFt7XG4gICAgICAgICAgICAgICAgICBjb2xvcjogJyM3NTc1NzUnXG4gICAgICAgICAgICAgIH1dXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICAgIGZlYXR1cmVUeXBlOiAncm9hZC5oaWdod2F5JyxcbiAgICAgICAgICAgICAgZWxlbWVudFR5cGU6ICdnZW9tZXRyeScsXG4gICAgICAgICAgICAgIHN0eWxlcnM6IFt7XG4gICAgICAgICAgICAgICAgICBjb2xvcjogJyNkYWRhZGEnXG4gICAgICAgICAgICAgIH1dXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICAgIGZlYXR1cmVUeXBlOiAncm9hZC5oaWdod2F5JyxcbiAgICAgICAgICAgICAgZWxlbWVudFR5cGU6ICdsYWJlbHMudGV4dC5maWxsJyxcbiAgICAgICAgICAgICAgc3R5bGVyczogW3tcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzYxNjE2MSdcbiAgICAgICAgICAgICAgfV1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZmVhdHVyZVR5cGU6ICdyb2FkLmxvY2FsJyxcbiAgICAgICAgICAgICAgZWxlbWVudFR5cGU6ICdsYWJlbHMudGV4dC5maWxsJyxcbiAgICAgICAgICAgICAgc3R5bGVyczogW3tcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzllOWU5ZSdcbiAgICAgICAgICAgICAgfV1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZmVhdHVyZVR5cGU6ICd0cmFuc2l0LmxpbmUnLFxuICAgICAgICAgICAgICBlbGVtZW50VHlwZTogJ2dlb21ldHJ5JyxcbiAgICAgICAgICAgICAgc3R5bGVyczogW3tcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2U1ZTVlNSdcbiAgICAgICAgICAgICAgfV1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZmVhdHVyZVR5cGU6ICd0cmFuc2l0LnN0YXRpb24nLFxuICAgICAgICAgICAgICBlbGVtZW50VHlwZTogJ2dlb21ldHJ5JyxcbiAgICAgICAgICAgICAgc3R5bGVyczogW3tcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAnI2VlZWVlZSdcbiAgICAgICAgICAgICAgfV1cbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgICAgZmVhdHVyZVR5cGU6ICd3YXRlcicsXG4gICAgICAgICAgICAgIGVsZW1lbnRUeXBlOiAnZ2VvbWV0cnknLFxuICAgICAgICAgICAgICBzdHlsZXJzOiBbe1xuICAgICAgICAgICAgICAgICAgY29sb3I6ICcjYzljOWM5J1xuICAgICAgICAgICAgICB9XVxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgICBmZWF0dXJlVHlwZTogJ3dhdGVyJyxcbiAgICAgICAgICAgICAgZWxlbWVudFR5cGU6ICdsYWJlbHMudGV4dC5maWxsJyxcbiAgICAgICAgICAgICAgc3R5bGVyczogW3tcbiAgICAgICAgICAgICAgICAgIGNvbG9yOiAnIzllOWU5ZSdcbiAgICAgICAgICAgICAgfV1cbiAgICAgICAgICB9XG4gICAgICBdXG4gIH07XG5cblxuICAvLyBjcmVhdGUgbWFwXG4gIHZhciBtYXAgPSBuZXcgZ29vZ2xlLm1hcHMuTWFwKCAkZWxbMF0sIGFyZ3MpO1xuXG5cbiAgLy8gYWRkIGEgbWFya2VycyByZWZlcmVuY2VcbiAgbWFwLm1hcmtlcnMgPSBbXTtcblxuXG4gIC8vIGFkZCBtYXJrZXJzXG4gICRtYXJrZXJzLmVhY2goZnVuY3Rpb24oKXtcblxuICAgICAgYWRkX21hcmtlciggJCh0aGlzKSwgbWFwICk7XG5cbiAgfSk7XG5cblxuICAvLyBjZW50ZXIgbWFwXG4gIGNlbnRlcl9tYXAoIG1hcCApO1xuXG5cbiAgLy8gcmV0dXJuXG4gIHJldHVybiBtYXA7XG5cbn1cblxuLypcbiogIGFkZF9tYXJrZXJcbipcbiogIFRoaXMgZnVuY3Rpb24gd2lsbCBhZGQgYSBtYXJrZXIgdG8gdGhlIHNlbGVjdGVkIEdvb2dsZSBNYXBcbipcbiogIEB0eXBlICBmdW5jdGlvblxuKiAgQGRhdGUgIDgvMTEvMjAxM1xuKiAgQHNpbmNlIDQuMy4wXG4qXG4qICBAcGFyYW0gJG1hcmtlciAoalF1ZXJ5IGVsZW1lbnQpXG4qICBAcGFyYW0gbWFwIChHb29nbGUgTWFwIG9iamVjdClcbiogIEByZXR1cm4gIG4vYVxuKi9cblxuZnVuY3Rpb24gYWRkX21hcmtlciggJG1hcmtlciwgbWFwICkge1xuXG4gIC8vIHZhclxuICB2YXIgbGF0bG5nID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyggJG1hcmtlci5hdHRyKCdkYXRhLWxhdCcpLCAkbWFya2VyLmF0dHIoJ2RhdGEtbG5nJykgKTtcblxuICAvLyBjcmVhdGUgbWFya2VyXG4gIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcbiAgICBwb3NpdGlvbiAgOiBsYXRsbmcsXG4gICAgbWFwICAgICA6IG1hcFxuICB9KTtcblxuICAvLyBhZGQgdG8gYXJyYXlcbiAgbWFwLm1hcmtlcnMucHVzaCggbWFya2VyICk7XG5cbiAgLy8gaWYgbWFya2VyIGNvbnRhaW5zIEhUTUwsIGFkZCBpdCB0byBhbiBpbmZvV2luZG93XG4gIGlmKCAkbWFya2VyLmh0bWwoKSApXG4gIHtcbiAgICAvLyBjcmVhdGUgaW5mbyB3aW5kb3dcbiAgICB2YXIgaW5mb3dpbmRvdyA9IG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KHtcbiAgICAgIGNvbnRlbnQgICA6ICRtYXJrZXIuaHRtbCgpXG4gICAgfSk7XG5cbiAgICAvLyBzaG93IGluZm8gd2luZG93IHdoZW4gbWFya2VyIGlzIGNsaWNrZWRcbiAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcihtYXJrZXIsICdjbGljaycsIGZ1bmN0aW9uKCkge1xuXG4gICAgICBpbmZvd2luZG93Lm9wZW4oIG1hcCwgbWFya2VyICk7XG5cbiAgICB9KTtcbiAgfVxuXG59XG5cbi8qXG4qICBjZW50ZXJfbWFwXG4qXG4qICBUaGlzIGZ1bmN0aW9uIHdpbGwgY2VudGVyIHRoZSBtYXAsIHNob3dpbmcgYWxsIG1hcmtlcnMgYXR0YWNoZWQgdG8gdGhpcyBtYXBcbipcbiogIEB0eXBlICBmdW5jdGlvblxuKiAgQGRhdGUgIDgvMTEvMjAxM1xuKiAgQHNpbmNlIDQuMy4wXG4qXG4qICBAcGFyYW0gbWFwIChHb29nbGUgTWFwIG9iamVjdClcbiogIEByZXR1cm4gIG4vYVxuKi9cblxuZnVuY3Rpb24gY2VudGVyX21hcCggbWFwICkge1xuXG4gIC8vIHZhcnNcbiAgdmFyIGJvdW5kcyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmdCb3VuZHMoKTtcblxuICAvLyBsb29wIHRocm91Z2ggYWxsIG1hcmtlcnMgYW5kIGNyZWF0ZSBib3VuZHNcbiAgJC5lYWNoKCBtYXAubWFya2VycywgZnVuY3Rpb24oIGksIG1hcmtlciApe1xuXG4gICAgdmFyIGxhdGxuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcoIG1hcmtlci5wb3NpdGlvbi5sYXQoKSwgbWFya2VyLnBvc2l0aW9uLmxuZygpICk7XG5cbiAgICBib3VuZHMuZXh0ZW5kKCBsYXRsbmcgKTtcblxuICB9KTtcblxuICAvLyBvbmx5IDEgbWFya2VyP1xuICBpZiggbWFwLm1hcmtlcnMubGVuZ3RoID09IDEgKVxuICB7XG4gICAgLy8gc2V0IGNlbnRlciBvZiBtYXBcbiAgICAgIG1hcC5zZXRDZW50ZXIoIGJvdW5kcy5nZXRDZW50ZXIoKSApO1xuICAgICAgbWFwLnNldFpvb20oIDE1ICk7XG4gIH1cbiAgZWxzZVxuICB7XG4gICAgLy8gZml0IHRvIGJvdW5kc1xuICAgIG1hcC5maXRCb3VuZHMoIGJvdW5kcyApO1xuICB9XG5cbn1cblxuLy8gZ2xvYmFsIHZhclxudmFyIG1hcCA9IG51bGw7XG4kKGRvY3VtZW50KS5yZWFkeSgoKSA9PiB7XG4gIGlmKCQoJ2JvZHknKS5oYXNDbGFzcygnaG9tZScpKSB7XG4gICAgd2luZG93LnNjcm9sbFRvKDAsMCk7XG4gICAgJCgnYm9keScpLmNzcyh7J2hlaWdodCc6ICcxMDB2aCcsICdvdmVyZmxvdyc6ICdoaWRkZW4nfSk7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgJCgnYm9keScpLmNzcyh7J2hlaWdodCc6ICdhdXRvJywgJ292ZXJmbG93JzogJ2F1dG8nfSk7XG4gICAgICB2YXIgc2Nyb2xsVG9Qb3NpdGlvbiA9ICQoJy5oZXJvMScpLm5leHQoKS5vZmZzZXQoKS50b3A7XG4gICAgICAkKCdodG1sLCBib2R5JykuYW5pbWF0ZSh7c2Nyb2xsVG9wOnNjcm9sbFRvUG9zaXRpb259LCAxMDAwLCAnc3dpbmcnKVxuICAgIH0sIDQwMDApXG4gIH1cblxuICBpZiAoJCgnLnJlbGxheCcpLmxlbmd0aCkge1xuICAgIHZhciByZWxsYXggPSBuZXcgUmVsbGF4KCcucmVsbGF4Jyk7XG4gIH1cblxuICAvLyBRdW90ZXMgcGFnZVxuICAkKCcucXVvdGVzIGEnKS5vbignY2xpY2snLCBmdW5jdGlvbihlKXtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc29sZS5sb2coJCh0aGlzKS50ZXh0KCkpO1xuICAgIGlmKCQodGhpcykuZmluZCgnc3BhbicpLnRleHQoKSA9PT0gJ1JlYWQgTW9yZScpIHtcbiAgICAgICQodGhpcykuY2xvc2VzdCgnLnF1b3RlJykuZmluZCgnLnJlYWRtb3JlLXRleHQnKS5jc3MoeydtYXgtaGVpZ2h0JzogJzYwMHB4J30pO1xuICAgICAgJCh0aGlzKS5maW5kKCdzcGFuJykudGV4dCgnQ2xvc2UnKVxuICAgIH0gZWxzZSB7XG4gICAgICAkKHRoaXMpLmNsb3Nlc3QoJy5xdW90ZScpLmZpbmQoJy5yZWFkbW9yZS10ZXh0JykuY3NzKHsnbWF4LWhlaWdodCc6ICcwJ30pO1xuICAgICAgJCh0aGlzKS5maW5kKCdzcGFuJykudGV4dCgnUmVhZCBNb3JlJylcbiAgICB9XG4gIH0pXG5cbiAgJCgnLmFjZi1tYXAnKS5lYWNoKGZ1bmN0aW9uKCl7XG5cbiAgICAvLyBjcmVhdGUgbWFwXG4gICAgbWFwID0gbmV3X21hcCggJCh0aGlzKSApO1xuXG4gIH0pO1xuXG4gIHZhciBmaXJzdENvbnRlbnRTZWN0aW9uID0gJCgnLmJvZHktY29udGVudCA+IGRpdjpmaXJzdC1jaGlsZCcpO1xuICB2YXIgbWFpbk5hdiA9ICQoJy5uYXYtbWFpbicpO1xuICBpZihmaXJzdENvbnRlbnRTZWN0aW9uLmhhc0NsYXNzKCdkYXJrLWxlZnQtbWVudScpKSB7XG4gICAgbWFpbk5hdkNsYXNzZXMoJ2RhcmstbGVmdC1tZW51Jyk7XG4gIH0gZWxzZSBpZiAoZmlyc3RDb250ZW50U2VjdGlvbi5oYXNDbGFzcygnZGFyay1yaWdodC1tZW51JykpIHtcbiAgICBtYWluTmF2Q2xhc3NlcygnZGFyay1yaWdodC1tZW51Jyk7XG4gIH0gZWxzZSBpZihmaXJzdENvbnRlbnRTZWN0aW9uLmhhc0NsYXNzKCdkYXJrLW1lbnUnKSkge1xuICAgIG1haW5OYXZDbGFzc2VzKCdkYXJrLW1lbnUnKTtcbiAgfVxuXG4gIC8vIE1lbnUgdHJlYXRtZW50XG4gIGZ1bmN0aW9uIG1haW5OYXZDbGFzc2VzKGFkZENsYXNzKSB7XG4gICAgdmFyIG5ld0NsYXNzID0gYWRkQ2xhc3MgfHwgJyc7XG4gICAgbWFpbk5hdi5yZW1vdmVDbGFzcygnZGFyay1sZWZ0LW1lbnUnKS5yZW1vdmVDbGFzcygnZGFyay1yaWdodC1tZW51JykucmVtb3ZlQ2xhc3MoJ2RhcmstbWVudScpLmFkZENsYXNzKG5ld0NsYXNzKTtcbiAgfVxuXG4gIC8vIFdheXBvaW50c1xuICAkKCcuZGFyay1tZW51JykuZWFjaChmdW5jdGlvbigpe1xuICAgIHZhciBkYXJrd2F5cG9pbnRzVG9wID0gJCh0aGlzKS53YXlwb2ludCh7XG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbihkaXJlY3Rpb24pIHtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2Rvd24nKSB7XG4gICAgICAgICAgbWFpbk5hdkNsYXNzZXMoJ2RhcmstbWVudScpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb2Zmc2V0OiAyMFxuICAgIH0pXG4gIH0pXG5cbiAgJCgnLmRhcmstbWVudScpLmVhY2goZnVuY3Rpb24oKXtcbiAgICB2YXIgZGFya3dheXBvaW50c0JvdCA9ICQodGhpcykud2F5cG9pbnQoe1xuICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICd1cCcpIHtcbiAgICAgICAgICBtYWluTmF2Q2xhc3NlcygnZGFyay1tZW51Jyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvZmZzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gLXRoaXMuZWxlbWVudC5jbGllbnRIZWlnaHRcbiAgICAgIH1cbiAgICB9KVxuICB9KVxuXG4gICQoJy5kYXJrLWxlZnQtbWVudScpLmVhY2goZnVuY3Rpb24oKXtcbiAgICB2YXIgZGFya3dheXBvaW50c1RvcCA9ICQodGhpcykud2F5cG9pbnQoe1xuICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICdkb3duJykge1xuICAgICAgICAgIG1haW5OYXZDbGFzc2VzKCdkYXJrLWxlZnQtbWVudScpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb2Zmc2V0OiAyMFxuICAgIH0pXG4gIH0pXG5cbiAgJCgnLmRhcmstbGVmdC1tZW51JykuZWFjaChmdW5jdGlvbigpe1xuICAgIHZhciBkYXJrd2F5cG9pbnRzQm90ID0gJCh0aGlzKS53YXlwb2ludCh7XG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbihkaXJlY3Rpb24pIHtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ3VwJykge1xuICAgICAgICAgIG1haW5OYXZDbGFzc2VzKCdkYXJrLWxlZnQtbWVudScpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb2Zmc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIC10aGlzLmVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gICAgICB9XG4gICAgfSlcbiAgfSlcblxuICAkKCcuZGFyay1yaWdodC1tZW51JykuZWFjaChmdW5jdGlvbigpe1xuICAgIHZhciBkYXJrd2F5cG9pbnRzVG9wID0gJCh0aGlzKS53YXlwb2ludCh7XG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbihkaXJlY3Rpb24pIHtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2Rvd24nKSB7XG4gICAgICAgICAgbWFpbk5hdkNsYXNzZXMoJ2RhcmstcmlnaHQtbWVudScpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb2Zmc2V0OiAyMFxuICAgIH0pXG4gIH0pXG5cbiAgJCgnLmRhcmstcmlnaHQtbWVudScpLmVhY2goZnVuY3Rpb24oKXtcbiAgICB2YXIgZGFya3dheXBvaW50c0JvdCA9ICQodGhpcykud2F5cG9pbnQoe1xuICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICd1cCcpIHtcbiAgICAgICAgICBtYWluTmF2Q2xhc3NlcygnZGFyay1yaWdodC1tZW51Jyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBvZmZzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gLXRoaXMuZWxlbWVudC5jbGllbnRIZWlnaHRcbiAgICAgIH1cbiAgICB9KVxuICB9KVxuXG5cbiAgJCgnLmxpZ2h0LW1lbnUnKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgdmFyIGxpZ2h0d2F5cG9pbnRzVG9wID0gJCh0aGlzKS53YXlwb2ludCh7XG4gICAgICBoYW5kbGVyOiBmdW5jdGlvbihkaXJlY3Rpb24pIHtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiA9PT0gJ2Rvd24nKSB7XG4gICAgICAgICAgbWFpbk5hdkNsYXNzZXMoKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9mZnNldDogMjBcbiAgICB9KVxuICB9KVxuXG4gICQoJy5saWdodC1tZW51JykuZWFjaChmdW5jdGlvbigpe1xuICAgIHZhciBsaWdodHdheXBvaW50c0JvdCA9ICQodGhpcykud2F5cG9pbnQoe1xuICAgICAgaGFuZGxlcjogZnVuY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgICAgIGlmIChkaXJlY3Rpb24gPT09ICd1cCcpIHtcbiAgICAgICAgICBtYWluTmF2Q2xhc3NlcygpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgb2Zmc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIC10aGlzLmVsZW1lbnQuY2xpZW50SGVpZ2h0XG4gICAgICB9XG4gICAgfSlcbiAgfSlcblxuICBpZigkKCcubmF2LW1haW4nKS5pbmRleCgpICE9PSAwICYmIHdpbmRvdy5pbm5lcldpZHRoID4gNzY4KSB7XG4gICAgdmFyIHN0aWNreSA9IG5ldyBXYXlwb2ludC5TdGlja3koe1xuICAgICAgZWxlbWVudDogJCgnLm5hdi1tYWluJylbMF1cbiAgICB9KVxuICB9XG5cbiAgLy8gJCgnYVtocmVmKj1cIiNcIl0nKS5vbignY2xpY2sgdG91Y2hlbmQnLCBmdW5jdGlvbigpIHtcbiAgLy8gICBpZiAobG9jYXRpb24ucGF0aG5hbWUucmVwbGFjZSgvXlxcLy8sJycpID09IHRoaXMucGF0aG5hbWUucmVwbGFjZSgvXlxcLy8sJycpICYmIGxvY2F0aW9uLmhvc3RuYW1lID09IHRoaXMuaG9zdG5hbWUpIHtcblxuICAvLyAgICAgdmFyIHRhcmdldCA9ICQodGhpcy5oYXNoKTtcbiAgLy8gICAgIHRhcmdldCA9IHRhcmdldC5sZW5ndGggPyB0YXJnZXQgOiAkKCdbbmFtZT0nICsgdGhpcy5oYXNoLnNsaWNlKDEpICsnXScpO1xuICAvLyAgICAgJCgnLm1vYmlsZV9tZW51JykucHJvcCgnY2hlY2tlZCcsIGZhbHNlKTtcbiAgLy8gICAgIGlmICh0YXJnZXQubGVuZ3RoKSB7XG4gIC8vICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKSB7d2luZG93LnNjcm9sbCgwLHRhcmdldC5vZmZzZXQoKS50b3AgLSA2MCk7fSwxKSAvL29mZnNldCBoZWlnaHQgb2YgaGVhZGVyIGhlcmUgdG9vLlxuICAvLyAgICAgICByZXR1cm4gZmFsc2U7XG4gIC8vICAgICB9XG4gIC8vICAgfVxuICAvLyB9KTtcblxuICAvLyBwcm9kdWN0IHBhZ2Ugc3RpY2t5IG1lbnVcbiAgbGV0IHN0dWNrID0gZmFsc2U7XG4gIGxldCBzdGlja3lOYXY7XG4gIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA+PSA5MDEpIHtcbiAgICBzdHVjayA9IHRydWU7XG4gICAgc3RpY2t5TmF2ID0gc3RpY2t5Yml0cygnI3Byb2R1Y3QtcGFnZS1uYXYnKTtcbiAgfVxuICAkKHdpbmRvdykub24oJ3Jlc2l6ZScsIGZ1bmN0aW9uKCl7XG4gICAgaWYod2luZG93LmlubmVyV2lkdGggPD0gOTAwICYmIHN0dWNrKSB7XG4gICAgICBzdHVjayA9IGZhbHNlO1xuICAgICAgc3RpY2t5TmF2LmNsZWFudXAoKTtcbiAgICB9XG4gICAgaWYgKHdpbmRvdy5pbm5lcldpZHRoID49IDkwMSAmJiAhc3R1Y2spIHtcbiAgICAgIHN0dWNrID0gdHJ1ZTtcbiAgICAgIHN0aWNreU5hdiA9IHN0aWNreWJpdHMoJyNwcm9kdWN0LXBhZ2UtbmF2Jyk7XG4gICAgfVxuICB9KVxuXG4gIC8vIHJlYWQgbW9yZSBidXR0b25zXG4gICQoJy5yZWFkLW1vcmUsIC5yZWFkLWxlc3MnKS5vbignY2xpY2snLCBmdW5jdGlvbigpIHtcbiAgICAkKHRoaXMpLnBhcmVudCgpLnRvZ2dsZUNsYXNzKCdyZWFkX21vcmVfdGV4dC0tYWN0aXZlJylcbiAgfSlcblxuICAvLyBwcm9kdWN0IGZlYXR1cmVzIGNvbXBvbmVudFxuICAkKCcuZmVhdHVyZXMtdGFibGUgLmNvbHVtbicpLm9uKCdtb3VzZWVudGVyJywgZnVuY3Rpb24oKXtcbiAgICAkKHRoaXMpLmNzcyh7XG4gICAgICBcImJvcmRlci10b3AtY29sb3JcIjogXCIjMjA5Y2VlXCIsXG4gICAgICBcImN1cnNvclwiOiBcInBvaW50ZXJcIlxuICAgIH0pXG4gIH0pXG4gICQoJy5mZWF0dXJlcy10YWJsZS1pdGVtJykub24oJ21vdXNlb3V0JywgZnVuY3Rpb24oKXtcbiAgICAkKHRoaXMpLmNzcygpXG4gIH0pXG5cbiAgY29uc3QgJHBvc3RzID0gJCgnLnBvc3QtY29sJyk7XG4gIGNvbnN0ICRtb3JlUG9zdHMgPSAkKCcuY29sdW1ucy5sb2FkIGEnKTtcbiAgaWYoJG1vcmVQb3N0cy5sZW5ndGgpIHtcbiAgICAkbW9yZVBvc3RzLm9uKCdjbGljaycsIGZ1bmN0aW9uKGUpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIGNvbnN0IGZpcnN0SGlkZGVuUG9zdCA9ICQoJy5wb3N0LWNvbDpoaWRkZW4nKS5pbmRleCgpO1xuICAgICAgbGV0IHJldmVhbE5vID0gOTtcbiAgICAgIGlmICh3aW5kb3cuaW5uZXJXaWR0aCA8IDc2OCkge1xuICAgICAgICByZXZlYWxObyA9IDM7XG4gICAgICB9XG4gICAgICBmb3IobGV0IGkgPSBmaXJzdEhpZGRlblBvc3Q7IGkgPCBmaXJzdEhpZGRlblBvc3QgKyByZXZlYWxObyB8fCBpIDwgJHBvc3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICRwb3N0cy5lcShpKS5zaG93KCk7XG4gICAgICB9XG4gICAgICBpZighJCgnLnBvc3QtY29sOmhpZGRlbicpLmxlbmd0aCkge1xuICAgICAgICAkKCcuY29sdW1ucy5sb2FkJykuaGlkZSgpO1xuICAgICAgfVxuICAgIH0pXG4gIH1cblxufSk7XG5cblxuLy8gJC5mbi5zY3JvbGxBY3Jvc3NUYWJsZSA9IGZ1bmN0aW9uKHNjcm9sbFBhcmVudCkge1xuXG4vLyAgICQodGhpcykub24oJ2NsaWNrJywgZnVuY3Rpb24oKSB7XG5cbi8vICAgICBsZXQgb2Zmc2V0ID0gMFxuXG4vLyAgICAgaWYgKHNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCkgPT09IDApIHtcbi8vICAgICAgIG9mZnNldCA9IHNjcm9sbFBhcmVudC5maW5kKCd0aGVhZCB0ciB0aCcpLmZpcnN0KCkuaW5uZXJXaWR0aCgpIC0gMjBcbi8vICAgICB9XG5cbi8vICAgICBzY3JvbGxQYXJlbnQuYW5pbWF0ZSh7IHNjcm9sbExlZnQ6IHNjcm9sbFBhcmVudC5maW5kKCd0aGVhZCB0ciB0aCcpLmVxKDIpLmlubmVyV2lkdGgoKSArIHNjcm9sbFBhcmVudC5zY3JvbGxMZWZ0KCkgKyBvZmZzZXRcbi8vICAgICB9LCAnbWVkaXVtJylcbi8vICAgfSk7XG5cbi8vICAgcmV0dXJuIHRoaXNcblxuLy8gfVxuXG4vLyAkKFwiLmNvbXBhcmlzb24tdGFibGVfX3Njcm9sbGVyXCIpLnNjcm9sbEFjcm9zc1RhYmxlKCQoJyNjb21wYXJpc29uLXRhYmxlLXNjcm9sbGVyJykpXG5cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9hcHAuanMiLCIvKlxuICBTVElDS1lCSVRTIPCfkolcbiAgLS0tLS0tLS1cbiAgPiBhIGxpZ2h0d2VpZ2h0IGFsdGVybmF0aXZlIHRvIGBwb3NpdGlvbjogc3RpY2t5YCBwb2x5ZmlsbHMg8J+NrFxuICAtLS0tLS0tLVxuICAtIGVhY2ggbWV0aG9kIGlzIGRvY3VtZW50ZWQgYWJvdmUgaXQgb3VyIHZpZXcgdGhlIHJlYWRtZVxuICAtIFN0aWNreWJpdHMgZG9lcyBub3QgbWFuYWdlIHBvbHltb3JwaGljIGZ1bmN0aW9uYWxpdHkgKHBvc2l0aW9uIGxpa2UgcHJvcGVydGllcylcbiAgKiBwb2x5bW9ycGhpYyBmdW5jdGlvbmFsaXR5OiAoaW4gdGhlIGNvbnRleHQgb2YgZGVzY3JpYmluZyBTdGlja3liaXRzKVxuICAgIG1lYW5zIG1ha2luZyB0aGluZ3MgbGlrZSBgcG9zaXRpb246IHN0aWNreWAgYmUgbG9vc2VseSBzdXBwb3J0ZWQgd2l0aCBwb3NpdGlvbiBmaXhlZC5cbiAgICBJdCBhbHNvIG1lYW5zIHRoYXQgZmVhdHVyZXMgbGlrZSBgdXNlU3RpY2t5Q2xhc3Nlc2AgdGFrZXMgb24gc3R5bGVzIGxpa2UgYHBvc2l0aW9uOiBmaXhlZGAuXG4gIC0tLS0tLS0tXG4gIGRlZmF1bHRzIPCflIxcbiAgLS0tLS0tLS1cbiAgLSB2ZXJzaW9uID0gYHBhY2thZ2UuanNvbmAgdmVyc2lvblxuICAtIHVzZXJBZ2VudCA9IHZpZXdlciBicm93c2VyIGFnZW50XG4gIC0gdGFyZ2V0ID0gRE9NIGVsZW1lbnQgc2VsZWN0b3JcbiAgLSBub1N0eWxlcyA9IGJvb2xlYW5cbiAgLSBvZmZzZXQgPSBudW1iZXJcbiAgLSBwYXJlbnRDbGFzcyA9ICdzdHJpbmcnXG4gIC0gc2Nyb2xsRWwgPSB3aW5kb3cgfHwgRE9NIGVsZW1lbnQgc2VsZWN0b3JcbiAgLSBzdGlja3lDbGFzcyA9ICdzdHJpbmcnXG4gIC0gc3R1Y2tDbGFzcyA9ICdzdHJpbmcnXG4gIC0gdXNlU3RpY2t5Q2xhc3NlcyA9IGJvb2xlYW5cbiAgLSB2ZXJ0aWNhbFBvc2l0aW9uID0gJ3N0cmluZydcbiAgLS0tLS0tLS1cbiAgcHJvcHPwn5SMXG4gIC0tLS0tLS0tXG4gIC0gcCA9IHByb3BzIHtvYmplY3R9XG4gIC0tLS0tLS0tXG4gIGluc3RhbmNlIG5vdGVcbiAgLS0tLS0tLS1cbiAgLSBzdGlja3liaXRzIHBhcmVudCBtZXRob2RzIHJldHVybiB0aGlzXG4gIC0gc3RpY2t5Yml0cyBpbnN0YW5jZSBtZXRob2RzIHJldHVybiBhbiBpbnN0YW5jZSBpdGVtXG4gIC0tLS0tLS0tXG4gIG5vbWVuY2xhdHVyZVxuICAtLS0tLS0tLVxuICAtIHRhcmdldCA9PiBlbCA9PiBlXG4gIC0gcHJvcHMgPT4gbyB8fCBwXG4gIC0gaW5zdGFuY2UgPT4gaXRlbSA9PiBpdFxuICAtLS0tLS0tLVxuICBtZXRob2RzXG4gIC0tLS0tLS0tXG4gIC0gLmRlZmluZVBvc2l0aW9uID0gZGVmaW5lcyBzdGlja3kgb3IgZml4ZWRcbiAgLSAuYWRkSW5zdGFuY2UgPSBhbiBhcnJheSBvZiBvYmplY3RzIGZvciBlYWNoIFN0aWNreWJpdHMgVGFyZ2V0XG4gIC0gLmdldENsb3Nlc3RQYXJlbnQgPSBnZXRzIHRoZSBwYXJlbnQgZm9yIG5vbi13aW5kb3cgc2Nyb2xsXG4gIC0gLmNvbXB1dGVTY3JvbGxPZmZzZXRzID0gY29tcHV0ZXMgc2Nyb2xsIHBvc2l0aW9uXG4gIC0gLnRvZ2dsZUNsYXNzZXMgPSBvbGRlciBicm93c2VyIHRvZ2dsZXJcbiAgLSAubWFuYWdlU3RhdGUgPSBtYW5hZ2VzIHN0aWNreSBzdGF0ZVxuICAtIC5yZW1vdmVDbGFzcyA9IG9sZGVyIGJyb3dzZXIgc3VwcG9ydCBjbGFzcyByZW1vdmVyXG4gIC0gLnJlbW92ZUluc3RhbmNlID0gcmVtb3ZlcyBhbiBpbnN0YW5jZVxuICAtIC5jbGVhbnVwID0gcmVtb3ZlcyBhbGwgU3RpY2t5Yml0cyBpbnN0YW5jZXMgYW5kIGNsZWFucyB1cCBkb20gZnJvbSBzdGlja3liaXRzXG4qL1xuZnVuY3Rpb24gU3RpY2t5Yml0cyh0YXJnZXQsIG9iaikge1xuICB2YXIgbyA9IHR5cGVvZiBvYmogIT09ICd1bmRlZmluZWQnID8gb2JqIDoge307XG4gIHRoaXMudmVyc2lvbiA9ICcyLjEuMSc7XG4gIHRoaXMudXNlckFnZW50ID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQgfHwgJ25vIGB1c2VyQWdlbnRgIHByb3ZpZGVkIGJ5IHRoZSBicm93c2VyJztcbiAgdGhpcy5wcm9wcyA9IHtcbiAgICBub1N0eWxlczogby5ub1N0eWxlcyB8fCBmYWxzZSxcbiAgICBzdGlja3lCaXRTdGlja3lPZmZzZXQ6IG8uc3RpY2t5Qml0U3RpY2t5T2Zmc2V0IHx8IDAsXG4gICAgcGFyZW50Q2xhc3M6IG8ucGFyZW50Q2xhc3MgfHwgJ2pzLXN0aWNreWJpdC1wYXJlbnQnLFxuICAgIHNjcm9sbEVsOiBvLnNjcm9sbEVsIHx8IHdpbmRvdyxcbiAgICBzdGlja3lDbGFzczogby5zdGlja3lDbGFzcyB8fCAnanMtaXMtc3RpY2t5JyxcbiAgICBzdHVja0NsYXNzOiBvLnN0dWNrQ2xhc3MgfHwgJ2pzLWlzLXN0dWNrJyxcbiAgICB1c2VTdGlja3lDbGFzc2VzOiBvLnVzZVN0aWNreUNsYXNzZXMgfHwgZmFsc2UsXG4gICAgdmVydGljYWxQb3NpdGlvbjogby52ZXJ0aWNhbFBvc2l0aW9uIHx8ICd0b3AnXG4gIH07XG4gIHZhciBwID0gdGhpcy5wcm9wcztcbiAgLypcbiAgICBkZWZpbmUgcG9zaXRpb25WYWxcbiAgICAtLS0tXG4gICAgLSAgdXNlcyBhIGNvbXB1dGVkIChgLmRlZmluZVBvc2l0aW9uKClgKVxuICAgIC0gIGRlZmluZWQgdGhlIHBvc2l0aW9uXG4gICovXG4gIHAucG9zaXRpb25WYWwgPSB0aGlzLmRlZmluZVBvc2l0aW9uKCkgfHwgJ2ZpeGVkJztcbiAgdmFyIHZwID0gcC52ZXJ0aWNhbFBvc2l0aW9uO1xuICB2YXIgbnMgPSBwLm5vU3R5bGVzO1xuICB2YXIgcHYgPSBwLnBvc2l0aW9uVmFsO1xuICB0aGlzLmVscyA9IHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCh0YXJnZXQpIDogdGFyZ2V0O1xuICBpZiAoISgnbGVuZ3RoJyBpbiB0aGlzLmVscykpIHRoaXMuZWxzID0gW3RoaXMuZWxzXTtcbiAgdGhpcy5pbnN0YW5jZXMgPSBbXTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmVscy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBlbCA9IHRoaXMuZWxzW2ldO1xuICAgIHZhciBzdHlsZXMgPSBlbC5zdHlsZTtcbiAgICBpZiAodnAgPT09ICd0b3AnICYmICFucykgc3R5bGVzW3ZwXSA9IHAuc3RpY2t5Qml0U3RpY2t5T2Zmc2V0ICsgJ3B4JztcbiAgICBpZiAocHYgIT09ICdmaXhlZCcgJiYgcC51c2VTdGlja3lDbGFzc2VzID09PSBmYWxzZSkge1xuICAgICAgc3R5bGVzLnBvc2l0aW9uID0gcHY7XG4gICAgfSBlbHNlIGlmIChwdiAhPT0gJ2ZpeGVkJykge1xuICAgICAgLy8gY29uc3Qgc3RpY2t5TWFuYWdlciA9IG5ldyBNYW5hZ2VTdGlja3koZWwsIHApXG4gICAgICBzdHlsZXMucG9zaXRpb24gPSBwdjtcbiAgICB9XG4gICAgdmFyIGluc3RhbmNlID0gdGhpcy5hZGRJbnN0YW5jZShlbCwgcCk7XG4gICAgLy8gaW5zdGFuY2VzIGFyZSBhbiBhcnJheSBvZiBvYmplY3RzXG4gICAgdGhpcy5pbnN0YW5jZXMucHVzaChpbnN0YW5jZSk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbi8qXG4gIHNldFN0aWNreVBvc2l0aW9uIOKclO+4j1xuICAtLS0tLS0tLVxuICDigJQgIG1vc3QgYmFzaWMgdGhpbmcgc3RpY2t5Yml0cyBkb2VzXG4gID0+IGNoZWNrcyB0byBzZWUgaWYgcG9zaXRpb24gc3RpY2t5IGlzIHN1cHBvcnRlZFxuICA9PiBkZWZpbmVkIHRoZSBwb3NpdGlvbiB0byBiZSB1c2VkXG4gID0+IHN0aWNreWJpdHMgd29ya3MgYWNjb3JkaW5nbHlcbiovXG5TdGlja3liaXRzLnByb3RvdHlwZS5kZWZpbmVQb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgdmFyIHByZWZpeCA9IFsnJywgJy1vLScsICctd2Via2l0LScsICctbW96LScsICctbXMtJ107XG4gIHZhciB0ZXN0ID0gZG9jdW1lbnQuaGVhZC5zdHlsZTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVmaXgubGVuZ3RoOyBpICs9IDEpIHtcbiAgICB0ZXN0LnBvc2l0aW9uID0gcHJlZml4W2ldICsgJ3N0aWNreSc7XG4gIH1cbiAgdmFyIHN0aWNreVByb3AgPSAnZml4ZWQnO1xuICBpZiAodHlwZW9mIHRlc3QucG9zaXRpb24gIT09ICd1bmRlZmluZWQnKSBzdGlja3lQcm9wID0gdGVzdC5wb3NpdGlvbjtcbiAgdGVzdC5wb3NpdGlvbiA9ICcnO1xuICByZXR1cm4gc3RpY2t5UHJvcDtcbn07XG5cbi8qXG4gIGFkZEluc3RhbmNlIOKclO+4j1xuICAtLS0tLS0tLVxuICDigJQgbWFuYWdlcyBpbnN0YW5jZXMgb2YgaXRlbXNcbiAgLSB0YWtlcyBpbiBhbiBlbCBhbmQgcHJvcHNcbiAgLSByZXR1cm5zIGFuIGl0ZW0gb2JqZWN0XG4gIC0tLVxuICAtIHRhcmdldCA9IGVsXG4gIC0gbyA9IHtvYmplY3R9ID0gcHJvcHNcbiAgICAtIHNjcm9sbEVsID0gJ3N0cmluZydcbiAgICAtIHZlcnRpY2FsUG9zaXRpb24gPSBudW1iZXJcbiAgICAtIG9mZiA9IGJvb2xlYW5cbiAgICAtIHBhcmVudENsYXNzID0gJ3N0cmluZydcbiAgICAtIHN0aWNreUNsYXNzID0gJ3N0cmluZydcbiAgICAtIHN0dWNrQ2xhc3MgPSAnc3RyaW5nJ1xuICAtLS1cbiAgLSBkZWZpbmVkIGxhdGVyXG4gICAgLSBwYXJlbnQgPSBkb20gZWxlbWVudFxuICAgIC0gc3RhdGUgPSAnc3RyaW5nJ1xuICAgIC0gb2Zmc2V0ID0gbnVtYmVyXG4gICAgLSBzdGlja3lTdGFydCA9IG51bWJlclxuICAgIC0gc3RpY2t5U3RvcCA9IG51bWJlclxuICAtIHJldHVybnMgYW4gaW5zdGFuY2Ugb2JqZWN0XG4qL1xuU3RpY2t5Yml0cy5wcm90b3R5cGUuYWRkSW5zdGFuY2UgPSBmdW5jdGlvbiBhZGRJbnN0YW5jZShlbCwgcHJvcHMpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB2YXIgaXRlbSA9IHtcbiAgICBlbDogZWwsXG4gICAgcGFyZW50OiBlbC5wYXJlbnROb2RlLFxuICAgIHByb3BzOiBwcm9wc1xuICB9O1xuICB2YXIgcCA9IGl0ZW0ucHJvcHM7XG4gIGl0ZW0ucGFyZW50LmNsYXNzTmFtZSArPSAnICcgKyBwcm9wcy5wYXJlbnRDbGFzcztcbiAgdmFyIHNlID0gcC5zY3JvbGxFbDtcbiAgaXRlbS5pc1dpbiA9IHNlID09PSB3aW5kb3c7XG4gIGlmICghaXRlbS5pc1dpbikgc2UgPSB0aGlzLmdldENsb3Nlc3RQYXJlbnQoaXRlbS5lbCwgc2UpO1xuICB0aGlzLmNvbXB1dGVTY3JvbGxPZmZzZXRzKGl0ZW0pO1xuICBpdGVtLnN0YXRlID0gJ2RlZmF1bHQnO1xuICBpdGVtLnN0YXRlQ29udGFpbmVyID0gZnVuY3Rpb24gKCkge1xuICAgIF90aGlzLm1hbmFnZVN0YXRlKGl0ZW0pO1xuICB9O1xuICBzZS5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCBpdGVtLnN0YXRlQ29udGFpbmVyKTtcbiAgcmV0dXJuIGl0ZW07XG59O1xuXG4vKlxuICAtLS0tLS0tLVxuICBnZXRQYXJlbnQg8J+RqOKAjVxuICAtLS0tLS0tLVxuICAtIGEgaGVscGVyIGZ1bmN0aW9uIHRoYXQgZ2V0cyB0aGUgdGFyZ2V0IGVsZW1lbnQncyBwYXJlbnQgc2VsZWN0ZWQgZWxcbiAgLSBvbmx5IHVzZWQgZm9yIG5vbiBgd2luZG93YCBzY3JvbGwgZWxlbWVudHNcbiAgLSBzdXBwb3J0cyBvbGRlciBicm93c2Vyc1xuKi9cblN0aWNreWJpdHMucHJvdG90eXBlLmdldENsb3Nlc3RQYXJlbnQgPSBmdW5jdGlvbiBnZXRDbG9zZXN0UGFyZW50KGVsLCBtYXRjaFNlbGVjdG9yKSB7XG4gIC8vIHAgPSBwYXJlbnQgZWxlbWVudFxuICB2YXIgcCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IobWF0Y2hTZWxlY3Rvcik7XG4gIHZhciBlID0gZWw7XG4gIGlmIChlLnBhcmVudEVsZW1lbnQgPT09IHApIHJldHVybiBwO1xuICAvLyB0cmF2ZXJzZSB1cCB0aGUgZG9tIHRyZWUgdW50aWwgd2UgZ2V0IHRvIHRoZSBwYXJlbnRcbiAgd2hpbGUgKGUucGFyZW50RWxlbWVudCAhPT0gcCkge1xuICAgIGUgPSBlLnBhcmVudEVsZW1lbnQ7XG4gIH0gLy8gcmV0dXJuIHBhcmVudCBlbGVtZW50XG4gIHJldHVybiBwO1xufTtcblxuLypcbiAgY29tcHV0ZVNjcm9sbE9mZnNldHMg8J+TilxuICAtLS1cbiAgY29tcHV0ZVNjcm9sbE9mZnNldHMgZm9yIFN0aWNreWJpdHNcbiAgLSBkZWZpbmVzXG4gICAgLSBvZmZzZXRcbiAgICAtIHN0YXJ0XG4gICAgLSBzdG9wXG4qL1xuU3RpY2t5Yml0cy5wcm90b3R5cGUuY29tcHV0ZVNjcm9sbE9mZnNldHMgPSBmdW5jdGlvbiBjb21wdXRlU2Nyb2xsT2Zmc2V0cyhpdGVtKSB7XG4gIHZhciBpdCA9IGl0ZW07XG4gIHZhciBwID0gaXQucHJvcHM7XG4gIHZhciBwYXJlbnQgPSBpdC5wYXJlbnQ7XG4gIHZhciBpdyA9IGl0LmlzV2luO1xuICB2YXIgc2Nyb2xsRWxPZmZzZXQgPSAwO1xuICB2YXIgc3RpY2t5U3RhcnQgPSBwYXJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICBpZiAoIWl3ICYmIHAucG9zaXRpb25WYWwgPT09ICdmaXhlZCcpIHtcbiAgICBzY3JvbGxFbE9mZnNldCA9IHAuc2Nyb2xsRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkudG9wO1xuICAgIHN0aWNreVN0YXJ0ID0gcGFyZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLnRvcCAtIHNjcm9sbEVsT2Zmc2V0O1xuICB9XG4gIGl0Lm9mZnNldCA9IHNjcm9sbEVsT2Zmc2V0ICsgcC5zdGlja3lCaXRTdGlja3lPZmZzZXQ7XG4gIGlmIChwLnZlcnRpY2FsUG9zaXRpb24gIT09ICdib3R0b20nKSB7XG4gICAgaXQuc3RpY2t5U3RhcnQgPSBzdGlja3lTdGFydCAtIGl0Lm9mZnNldDtcbiAgICBpdC5zdGlja3lTdG9wID0gc3RpY2t5U3RhcnQgKyBwYXJlbnQub2Zmc2V0SGVpZ2h0IC0gKGl0LmVsLm9mZnNldEhlaWdodCArIGl0Lm9mZnNldCk7XG4gIH0gZWxzZSB7XG4gICAgaXQuc3RpY2t5U3RhcnQgPSAwO1xuICAgIGl0LnN0aWNreVN0b3AgPSBzdGlja3lTdGFydCArIHBhcmVudC5vZmZzZXRIZWlnaHQ7XG4gIH1cbiAgcmV0dXJuIGl0O1xufTtcblxuLypcbiAgdG9nZ2xlQ2xhc3NlcyDimpbvuI9cbiAgLS0tXG4gIHRvZ2dsZXMgY2xhc3NlcyAoZm9yIG9sZGVyIGJyb3dzZXIgc3VwcG9ydClcbiAgciA9IHJlbW92ZWQgY2xhc3NcbiAgYSA9IGFkZGVkIGNsYXNzXG4qL1xuU3RpY2t5Yml0cy5wcm90b3R5cGUudG9nZ2xlQ2xhc3NlcyA9IGZ1bmN0aW9uIHRvZ2dsZUNsYXNzZXMoZWwsIHIsIGEpIHtcbiAgdmFyIGUgPSBlbDtcbiAgdmFyIGNBcnJheSA9IGUuY2xhc3NOYW1lLnNwbGl0KCcgJyk7XG4gIGlmIChhICYmIGNBcnJheS5pbmRleE9mKGEpID09PSAtMSkgY0FycmF5LnB1c2goYSk7XG4gIHZhciBySXRlbSA9IGNBcnJheS5pbmRleE9mKHIpO1xuICBpZiAockl0ZW0gIT09IC0xKSBjQXJyYXkuc3BsaWNlKHJJdGVtLCAxKTtcbiAgZS5jbGFzc05hbWUgPSBjQXJyYXkuam9pbignICcpO1xufTtcblxuLypcbiAgbWFuYWdlU3RhdGUg8J+TnVxuICAtLS1cbiAgLSBkZWZpbmVzIHRoZSBzdGF0ZVxuICAgIC0gbm9ybWFsXG4gICAgLSBzdGlja3lcbiAgICAtIHN0dWNrXG4qL1xuU3RpY2t5Yml0cy5wcm90b3R5cGUubWFuYWdlU3RhdGUgPSBmdW5jdGlvbiBtYW5hZ2VTdGF0ZShpdGVtKSB7XG4gIC8vIGNhY2hlIG9iamVjdFxuICB2YXIgaXQgPSBpdGVtO1xuICB2YXIgZSA9IGl0LmVsO1xuICB2YXIgcCA9IGl0LnByb3BzO1xuICB2YXIgc3RhdGUgPSBpdC5zdGF0ZTtcbiAgdmFyIHN0YXJ0ID0gaXQuc3RpY2t5U3RhcnQ7XG4gIHZhciBzdG9wID0gaXQuc3RpY2t5U3RvcDtcbiAgdmFyIHN0bCA9IGUuc3R5bGU7XG4gIC8vIGNhY2hlIHByb3BzXG4gIHZhciBucyA9IHAubm9TdHlsZXM7XG4gIHZhciBwdiA9IHAucG9zaXRpb25WYWw7XG4gIHZhciBzZSA9IHAuc2Nyb2xsRWw7XG4gIHZhciBzdGlja3kgPSBwLnN0aWNreUNsYXNzO1xuICB2YXIgc3R1Y2sgPSBwLnN0dWNrQ2xhc3M7XG4gIHZhciB2cCA9IHAudmVydGljYWxQb3NpdGlvbjtcbiAgLypcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWVcbiAgICAtLS1cbiAgICAtIHVzZSByQUZcbiAgICAtIG9yIHN0dWIgckFGXG4gICovXG4gIHZhciByQUYgPSBzZS5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gIGlmICghaXQuaXNXaW4gfHwgdHlwZW9mIHJBRiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByQUYgPSBmdW5jdGlvbiByQUZEdW1teShmKSB7XG4gICAgICBmKCk7XG4gICAgfTtcbiAgfVxuICAvKlxuICAgIGRlZmluZSBzY3JvbGwgdmFyc1xuICAgIC0tLVxuICAgIC0gc2Nyb2xsXG4gICAgLSBub3RTdGlja3lcbiAgICAtIGlzU3RpY2t5XG4gICAgLSBpc1N0dWNrXG4gICovXG4gIHZhciB0QyA9IHRoaXMudG9nZ2xlQ2xhc3NlcztcbiAgdmFyIHNjcm9sbCA9IGl0LmlzV2luID8gc2Uuc2Nyb2xsWSB8fCBzZS5wYWdlWU9mZnNldCA6IHNlLnNjcm9sbFRvcDtcbiAgdmFyIG5vdFN0aWNreSA9IHNjcm9sbCA+IHN0YXJ0ICYmIHNjcm9sbCA8IHN0b3AgJiYgKHN0YXRlID09PSAnZGVmYXVsdCcgfHwgc3RhdGUgPT09ICdzdHVjaycpO1xuICB2YXIgaXNTdGlja3kgPSBzY3JvbGwgPD0gc3RhcnQgJiYgc3RhdGUgPT09ICdzdGlja3knO1xuICB2YXIgaXNTdHVjayA9IHNjcm9sbCA+PSBzdG9wICYmIHN0YXRlID09PSAnc3RpY2t5JztcbiAgLypcbiAgICBVbm5hbWVkIGFycm93IGZ1bmN0aW9ucyB3aXRoaW4gdGhpcyBibG9ja1xuICAgIC0tLVxuICAgIC0gaGVscCB3YW50ZWQgb3IgZGlzY3Vzc2lvblxuICAgIC0gdmlldyB0ZXN0LnN0aWNreWJpdHMuanNcbiAgICAgIC0gYHN0aWNreWJpdHMgLm1hbmFnZVN0YXRlICBgcG9zaXRpb246IGZpeGVkYCBpbnRlcmZhY2VgIGZvciBtb3JlIGF3YXJlbmVzcyDwn5GAXG4gICovXG4gIGlmIChub3RTdGlja3kpIHtcbiAgICBpdC5zdGF0ZSA9ICdzdGlja3knO1xuICAgIHJBRihmdW5jdGlvbiAoKSB7XG4gICAgICB0QyhlLCBzdHVjaywgc3RpY2t5KTtcbiAgICAgIHN0bC5wb3NpdGlvbiA9IHB2O1xuICAgICAgaWYgKG5zKSByZXR1cm47XG4gICAgICBzdGwuYm90dG9tID0gJyc7XG4gICAgICBzdGxbdnBdID0gcC5zdGlja3lCaXRTdGlja3lPZmZzZXQgKyAncHgnO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKGlzU3RpY2t5KSB7XG4gICAgaXQuc3RhdGUgPSAnZGVmYXVsdCc7XG4gICAgckFGKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRDKGUsIHN0aWNreSk7XG4gICAgICBpZiAocHYgPT09ICdmaXhlZCcpIHN0bC5wb3NpdGlvbiA9ICcnO1xuICAgIH0pO1xuICB9IGVsc2UgaWYgKGlzU3R1Y2spIHtcbiAgICBpdC5zdGF0ZSA9ICdzdHVjayc7XG4gICAgckFGKGZ1bmN0aW9uICgpIHtcbiAgICAgIHRDKGUsIHN0aWNreSwgc3R1Y2spO1xuICAgICAgaWYgKHB2ICE9PSAnZml4ZWQnIHx8IG5zKSByZXR1cm47XG4gICAgICBzdGwudG9wID0gJyc7XG4gICAgICBzdGwuYm90dG9tID0gJzAnO1xuICAgICAgc3RsLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gaXQ7XG59O1xuXG4vKlxuICByZW1vdmVzIGFuIGluc3RhbmNlIPCfkYtcbiAgLS0tLS0tLS1cbiAgLSBjbGVhbnVwIGluc3RhbmNlXG4qL1xuU3RpY2t5Yml0cy5wcm90b3R5cGUucmVtb3ZlSW5zdGFuY2UgPSBmdW5jdGlvbiByZW1vdmVJbnN0YW5jZShpbnN0YW5jZSkge1xuICB2YXIgZSA9IGluc3RhbmNlLmVsO1xuICB2YXIgcCA9IGluc3RhbmNlLnByb3BzO1xuICB2YXIgdEMgPSB0aGlzLnRvZ2dsZUNsYXNzZXM7XG4gIGUuc3R5bGUucG9zaXRpb24gPSAnJztcbiAgZS5zdHlsZVtwLnZlcnRpY2FsUG9zaXRpb25dID0gJyc7XG4gIHRDKGUsIHAuc3RpY2t5Q2xhc3MpO1xuICB0QyhlLCBwLnN0dWNrQ2xhc3MpO1xuICB0QyhlLnBhcmVudE5vZGUsIHAucGFyZW50Q2xhc3MpO1xufTtcblxuLypcbiAgY2xlYW51cCDwn5uBXG4gIC0tLS0tLS0tXG4gIC0gY2xlYW5zIHVwIGVhY2ggaW5zdGFuY2VcbiAgLSBjbGVhcnMgaW5zdGFuY2VcbiovXG5TdGlja3liaXRzLnByb3RvdHlwZS5jbGVhbnVwID0gZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmluc3RhbmNlcy5sZW5ndGg7IGkgKz0gMSkge1xuICAgIHZhciBpbnN0YW5jZSA9IHRoaXMuaW5zdGFuY2VzW2ldO1xuICAgIGluc3RhbmNlLnByb3BzLnNjcm9sbEVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIGluc3RhbmNlLnN0YXRlQ29udGFpbmVyKTtcbiAgICB0aGlzLnJlbW92ZUluc3RhbmNlKGluc3RhbmNlKTtcbiAgfVxuICB0aGlzLm1hbmFnZVN0YXRlID0gZmFsc2U7XG4gIHRoaXMuaW5zdGFuY2VzID0gW107XG59O1xuXG4vKlxuICBleHBvcnRcbiAgLS0tLS0tLS1cbiAgZXhwb3J0cyBTdGlja0JpdHMgdG8gYmUgdXNlZCDwn4+BXG4qL1xuZnVuY3Rpb24gc3RpY2t5Yml0cyh0YXJnZXQsIG8pIHtcbiAgcmV0dXJuIG5ldyBTdGlja3liaXRzKHRhcmdldCwgbyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0aWNreWJpdHM7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvc3RpY2t5Yml0cy9kaXN0L3N0aWNreWJpdHMuZXMuanMiLCJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8gUmVsbGF4LmpzXG4vLyBCdXR0ZXJ5IHNtb290aCBwYXJhbGxheCBsaWJyYXJ5XG4vLyBDb3B5cmlnaHQgKGMpIDIwMTYgTW9lIEFtYXlhIChAbW9lYW1heWEpXG4vLyBNSVQgbGljZW5zZVxuLy9cbi8vIFRoYW5rcyB0byBQYXJheGlmeS5qcyBhbmQgSmFpbWUgQ2FibGxlcm9cbi8vIGZvciBwYXJhbGxheCBjb25jZXB0c1xuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSkge1xuICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgLy8gQU1ELiBSZWdpc3RlciBhcyBhbiBhbm9ueW1vdXMgbW9kdWxlLlxuICAgIGRlZmluZShbXSwgZmFjdG9yeSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAvLyBOb2RlLiBEb2VzIG5vdCB3b3JrIHdpdGggc3RyaWN0IENvbW1vbkpTLCBidXRcbiAgICAvLyBvbmx5IENvbW1vbkpTLWxpa2UgZW52aXJvbm1lbnRzIHRoYXQgc3VwcG9ydCBtb2R1bGUuZXhwb3J0cyxcbiAgICAvLyBsaWtlIE5vZGUuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gQnJvd3NlciBnbG9iYWxzIChyb290IGlzIHdpbmRvdylcbiAgICByb290LlJlbGxheCA9IGZhY3RvcnkoKTtcbiAgfVxufSh0aGlzLCBmdW5jdGlvbiAoKSB7XG4gIHZhciBSZWxsYXggPSBmdW5jdGlvbihlbCwgb3B0aW9ucyl7XG4gICAgXCJ1c2Ugc3RyaWN0XCI7XG5cbiAgICB2YXIgc2VsZiA9IE9iamVjdC5jcmVhdGUoUmVsbGF4LnByb3RvdHlwZSk7XG5cbiAgICB2YXIgcG9zWSA9IDA7XG4gICAgdmFyIHNjcmVlblkgPSAwO1xuICAgIHZhciBwb3NYID0gMDtcbiAgICB2YXIgc2NyZWVuWCA9IDA7XG4gICAgdmFyIGJsb2NrcyA9IFtdO1xuICAgIHZhciBwYXVzZSA9IHRydWU7XG5cbiAgICAvLyBjaGVjayB3aGF0IHJlcXVlc3RBbmltYXRpb25GcmFtZSB0byB1c2UsIGFuZCBpZlxuICAgIC8vIGl0J3Mgbm90IHN1cHBvcnRlZCwgdXNlIHRoZSBvbnNjcm9sbCBldmVudFxuICAgIHZhciBsb29wID0gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgd2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgd2luZG93Lm1zUmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XG4gICAgICB3aW5kb3cub1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuICAgICAgZnVuY3Rpb24oY2FsbGJhY2speyBzZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApOyB9O1xuXG4gICAgLy8gY2hlY2sgd2hpY2ggdHJhbnNmb3JtIHByb3BlcnR5IHRvIHVzZVxuICAgIHZhciB0cmFuc2Zvcm1Qcm9wID0gd2luZG93LnRyYW5zZm9ybVByb3AgfHwgKGZ1bmN0aW9uKCl7XG4gICAgICAgIHZhciB0ZXN0RWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgICAgaWYgKHRlc3RFbC5zdHlsZS50cmFuc2Zvcm0gPT09IG51bGwpIHtcbiAgICAgICAgICB2YXIgdmVuZG9ycyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xuICAgICAgICAgIGZvciAodmFyIHZlbmRvciBpbiB2ZW5kb3JzKSB7XG4gICAgICAgICAgICBpZiAodGVzdEVsLnN0eWxlWyB2ZW5kb3JzW3ZlbmRvcl0gKyAnVHJhbnNmb3JtJyBdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHZlbmRvcnNbdmVuZG9yXSArICdUcmFuc2Zvcm0nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ3RyYW5zZm9ybSc7XG4gICAgICB9KSgpO1xuXG4gICAgLy8gRGVmYXVsdCBTZXR0aW5nc1xuICAgIHNlbGYub3B0aW9ucyA9IHtcbiAgICAgIHNwZWVkOiAtMixcbiAgICAgIGNlbnRlcjogZmFsc2UsXG4gICAgICB3cmFwcGVyOiBudWxsLFxuICAgICAgcm91bmQ6IHRydWUsXG4gICAgICB2ZXJ0aWNhbDogdHJ1ZSxcbiAgICAgIGhvcml6b250YWw6IGZhbHNlLFxuICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCkge30sXG4gICAgfTtcblxuICAgIC8vIFVzZXIgZGVmaW5lZCBvcHRpb25zIChtaWdodCBoYXZlIG1vcmUgaW4gdGhlIGZ1dHVyZSlcbiAgICBpZiAob3B0aW9ucyl7XG4gICAgICBPYmplY3Qua2V5cyhvcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSl7XG4gICAgICAgIHNlbGYub3B0aW9uc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQnkgZGVmYXVsdCwgcmVsbGF4IGNsYXNzXG4gICAgaWYgKCFlbCkge1xuICAgICAgZWwgPSAnLnJlbGxheCc7XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgaWYgZWwgaXMgYSBjbGFzc05hbWUgb3IgYSBub2RlXG4gICAgdmFyIGVsZW1lbnRzID0gdHlwZW9mIGVsID09PSAnc3RyaW5nJyA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWwpIDogW2VsXTtcblxuICAgIC8vIE5vdyBxdWVyeSBzZWxlY3RvclxuICAgIGlmIChlbGVtZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICBzZWxmLmVsZW1zID0gZWxlbWVudHM7XG4gICAgfVxuXG4gICAgLy8gVGhlIGVsZW1lbnRzIGRvbid0IGV4aXN0XG4gICAgZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgZWxlbWVudHMgeW91J3JlIHRyeWluZyB0byBzZWxlY3QgZG9uJ3QgZXhpc3QuXCIpO1xuICAgIH1cblxuICAgIC8vIEhhcyBhIHdyYXBwZXIgYW5kIGl0IGV4aXN0c1xuICAgIGlmIChzZWxmLm9wdGlvbnMud3JhcHBlcikge1xuICAgICAgaWYgKCFzZWxmLm9wdGlvbnMud3JhcHBlci5ub2RlVHlwZSkge1xuICAgICAgICB2YXIgd3JhcHBlciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZi5vcHRpb25zLndyYXBwZXIpO1xuXG4gICAgICAgIGlmICh3cmFwcGVyKSB7XG4gICAgICAgICAgc2VsZi5vcHRpb25zLndyYXBwZXIgPSB3cmFwcGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlRoZSB3cmFwcGVyIHlvdSdyZSB0cnlpbmcgdG8gdXNlIGRvbid0IGV4aXN0LlwiKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuXG4gICAgLy8gR2V0IGFuZCBjYWNoZSBpbml0aWFsIHBvc2l0aW9uIG9mIGFsbCBlbGVtZW50c1xuICAgIHZhciBjYWNoZUJsb2NrcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzZWxmLmVsZW1zLmxlbmd0aDsgaSsrKXtcbiAgICAgICAgdmFyIGJsb2NrID0gY3JlYXRlQmxvY2soc2VsZi5lbGVtc1tpXSk7XG4gICAgICAgIGJsb2Nrcy5wdXNoKGJsb2NrKTtcbiAgICAgIH1cbiAgICB9O1xuXG5cbiAgICAvLyBMZXQncyBraWNrIHRoaXMgc2NyaXB0IG9mZlxuICAgIC8vIEJ1aWxkIGFycmF5IGZvciBjYWNoZWQgZWxlbWVudCB2YWx1ZXNcbiAgICB2YXIgaW5pdCA9IGZ1bmN0aW9uKCkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja3MubGVuZ3RoOyBpKyspe1xuICAgICAgICBzZWxmLmVsZW1zW2ldLnN0eWxlLmNzc1RleHQgPSBibG9ja3NbaV0uc3R5bGU7XG4gICAgICB9XG5cbiAgICAgIGJsb2NrcyA9IFtdO1xuXG4gICAgICBzY3JlZW5ZID0gd2luZG93LmlubmVySGVpZ2h0O1xuICAgICAgc2NyZWVuWCA9IHdpbmRvdy5pbm5lcldpZHRoO1xuICAgICAgc2V0UG9zaXRpb24oKTtcblxuICAgICAgY2FjaGVCbG9ja3MoKTtcblxuICAgICAgLy8gSWYgcGF1c2VkLCB1bnBhdXNlIGFuZCBzZXQgbGlzdGVuZXIgZm9yIHdpbmRvdyByZXNpemluZyBldmVudHNcbiAgICAgIGlmIChwYXVzZSkge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaW5pdCk7XG4gICAgICAgIHBhdXNlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBhbmltYXRlKCk7XG4gICAgfTtcblxuICAgIC8vIFdlIHdhbnQgdG8gY2FjaGUgdGhlIHBhcmFsbGF4IGJsb2NrcydcbiAgICAvLyB2YWx1ZXM6IGJhc2UsIHRvcCwgaGVpZ2h0LCBzcGVlZFxuICAgIC8vIGVsOiBpcyBkb20gb2JqZWN0LCByZXR1cm46IGVsIGNhY2hlIHZhbHVlc1xuICAgIHZhciBjcmVhdGVCbG9jayA9IGZ1bmN0aW9uKGVsKSB7XG4gICAgICB2YXIgZGF0YVBlcmNlbnRhZ2UgPSBlbC5nZXRBdHRyaWJ1dGUoICdkYXRhLXJlbGxheC1wZXJjZW50YWdlJyApO1xuICAgICAgdmFyIGRhdGFTcGVlZCA9IGVsLmdldEF0dHJpYnV0ZSggJ2RhdGEtcmVsbGF4LXNwZWVkJyApO1xuICAgICAgdmFyIGRhdGFaaW5kZXggPSBlbC5nZXRBdHRyaWJ1dGUoICdkYXRhLXJlbGxheC16aW5kZXgnICkgfHwgMDtcblxuICAgICAgLy8gaW5pdGlhbGl6aW5nIGF0IHNjcm9sbFkgPSAwICh0b3Agb2YgYnJvd3NlciksIHNjcm9sbFggPSAwIChsZWZ0IG9mIGJyb3dzZXIpXG4gICAgICAvLyBlbnN1cmVzIGVsZW1lbnRzIGFyZSBwb3NpdGlvbmVkIGJhc2VkIG9uIEhUTUwgbGF5b3V0LlxuICAgICAgLy9cbiAgICAgIC8vIElmIHRoZSBlbGVtZW50IGhhcyB0aGUgcGVyY2VudGFnZSBhdHRyaWJ1dGUsIHRoZSBwb3NZIGFuZCBwb3NYIG5lZWRzIHRvIGJlXG4gICAgICAvLyB0aGUgY3VycmVudCBzY3JvbGwgcG9zaXRpb24ncyB2YWx1ZSwgc28gdGhhdCB0aGUgZWxlbWVudHMgYXJlIHN0aWxsIHBvc2l0aW9uZWQgYmFzZWQgb24gSFRNTCBsYXlvdXRcbiAgICAgIHZhciB3cmFwcGVyUG9zWSA9IHNlbGYub3B0aW9ucy53cmFwcGVyID8gc2VsZi5vcHRpb25zLndyYXBwZXIuc2Nyb2xsVG9wIDogKHdpbmRvdy5wYWdlWU9mZnNldCB8fCBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wIHx8IGRvY3VtZW50LmJvZHkuc2Nyb2xsVG9wKTtcbiAgICAgIHZhciBwb3NZID0gc2VsZi5vcHRpb25zLnZlcnRpY2FsID8gKCBkYXRhUGVyY2VudGFnZSB8fCBzZWxmLm9wdGlvbnMuY2VudGVyID8gd3JhcHBlclBvc1kgOiAwICkgOiAwO1xuICAgICAgdmFyIHBvc1ggPSBzZWxmLm9wdGlvbnMuaG9yaXpvbnRhbCA/ICggZGF0YVBlcmNlbnRhZ2UgfHwgc2VsZi5vcHRpb25zLmNlbnRlciA/ICh3aW5kb3cucGFnZVhPZmZzZXQgfHwgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnQgfHwgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0KSA6IDAgKSA6IDA7XG5cbiAgICAgIHZhciBibG9ja1RvcCA9IHBvc1kgKyBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3A7XG4gICAgICB2YXIgYmxvY2tIZWlnaHQgPSBlbC5jbGllbnRIZWlnaHQgfHwgZWwub2Zmc2V0SGVpZ2h0IHx8IGVsLnNjcm9sbEhlaWdodDtcblxuICAgICAgdmFyIGJsb2NrTGVmdCA9IHBvc1ggKyBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuICAgICAgdmFyIGJsb2NrV2lkdGggPSBlbC5jbGllbnRXaWR0aCB8fCBlbC5vZmZzZXRXaWR0aCB8fCBlbC5zY3JvbGxXaWR0aDtcblxuICAgICAgLy8gYXBwYXJlbnRseSBwYXJhbGxheCBlcXVhdGlvbiBldmVyeW9uZSB1c2VzXG4gICAgICB2YXIgcGVyY2VudGFnZVkgPSBkYXRhUGVyY2VudGFnZSA/IGRhdGFQZXJjZW50YWdlIDogKHBvc1kgLSBibG9ja1RvcCArIHNjcmVlblkpIC8gKGJsb2NrSGVpZ2h0ICsgc2NyZWVuWSk7XG4gICAgICB2YXIgcGVyY2VudGFnZVggPSBkYXRhUGVyY2VudGFnZSA/IGRhdGFQZXJjZW50YWdlIDogKHBvc1ggLSBibG9ja0xlZnQgKyBzY3JlZW5YKSAvIChibG9ja1dpZHRoICsgc2NyZWVuWCk7XG4gICAgICBpZihzZWxmLm9wdGlvbnMuY2VudGVyKXsgcGVyY2VudGFnZVggPSAwLjU7IHBlcmNlbnRhZ2VZID0gMC41OyB9XG5cbiAgICAgIC8vIE9wdGlvbmFsIGluZGl2aWR1YWwgYmxvY2sgc3BlZWQgYXMgZGF0YSBhdHRyLCBvdGhlcndpc2UgZ2xvYmFsIHNwZWVkXG4gICAgICB2YXIgc3BlZWQgPSBkYXRhU3BlZWQgPyBkYXRhU3BlZWQgOiBzZWxmLm9wdGlvbnMuc3BlZWQ7XG5cbiAgICAgIHZhciBiYXNlcyA9IHVwZGF0ZVBvc2l0aW9uKHBlcmNlbnRhZ2VYLCBwZXJjZW50YWdlWSwgc3BlZWQpO1xuXG4gICAgICAvLyB+flN0b3JlIG5vbi10cmFuc2xhdGUzZCB0cmFuc2Zvcm1zfn5cbiAgICAgIC8vIFN0b3JlIGlubGluZSBzdHlsZXMgYW5kIGV4dHJhY3QgdHJhbnNmb3Jtc1xuICAgICAgdmFyIHN0eWxlID0gZWwuc3R5bGUuY3NzVGV4dDtcbiAgICAgIHZhciB0cmFuc2Zvcm0gPSAnJztcblxuICAgICAgLy8gQ2hlY2sgaWYgdGhlcmUncyBhbiBpbmxpbmUgc3R5bGVkIHRyYW5zZm9ybVxuICAgICAgaWYgKHN0eWxlLmluZGV4T2YoJ3RyYW5zZm9ybScpID49IDApIHtcbiAgICAgICAgLy8gR2V0IHRoZSBpbmRleCBvZiB0aGUgdHJhbnNmb3JtXG4gICAgICAgIHZhciBpbmRleCA9IHN0eWxlLmluZGV4T2YoJ3RyYW5zZm9ybScpO1xuXG4gICAgICAgIC8vIFRyaW0gdGhlIHN0eWxlIHRvIHRoZSB0cmFuc2Zvcm0gcG9pbnQgYW5kIGdldCB0aGUgZm9sbG93aW5nIHNlbWktY29sb24gaW5kZXhcbiAgICAgICAgdmFyIHRyaW1tZWRTdHlsZSA9IHN0eWxlLnNsaWNlKGluZGV4KTtcbiAgICAgICAgdmFyIGRlbGltaXRlciA9IHRyaW1tZWRTdHlsZS5pbmRleE9mKCc7Jyk7XG5cbiAgICAgICAgLy8gUmVtb3ZlIFwidHJhbnNmb3JtXCIgc3RyaW5nIGFuZCBzYXZlIHRoZSBhdHRyaWJ1dGVcbiAgICAgICAgaWYgKGRlbGltaXRlcikge1xuICAgICAgICAgIHRyYW5zZm9ybSA9IFwiIFwiICsgdHJpbW1lZFN0eWxlLnNsaWNlKDExLCBkZWxpbWl0ZXIpLnJlcGxhY2UoL1xccy9nLCcnKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0cmFuc2Zvcm0gPSBcIiBcIiArIHRyaW1tZWRTdHlsZS5zbGljZSgxMSkucmVwbGFjZSgvXFxzL2csJycpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGJhc2VYOiBiYXNlcy54LFxuICAgICAgICBiYXNlWTogYmFzZXMueSxcbiAgICAgICAgdG9wOiBibG9ja1RvcCxcbiAgICAgICAgbGVmdDogYmxvY2tMZWZ0LFxuICAgICAgICBoZWlnaHQ6IGJsb2NrSGVpZ2h0LFxuICAgICAgICB3aWR0aDogYmxvY2tXaWR0aCxcbiAgICAgICAgc3BlZWQ6IHNwZWVkLFxuICAgICAgICBzdHlsZTogc3R5bGUsXG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNmb3JtLFxuICAgICAgICB6aW5kZXg6IGRhdGFaaW5kZXhcbiAgICAgIH07XG4gICAgfTtcblxuICAgIC8vIHNldCBzY3JvbGwgcG9zaXRpb24gKHBvc1ksIHBvc1gpXG4gICAgLy8gc2lkZSBlZmZlY3QgbWV0aG9kIGlzIG5vdCBpZGVhbCwgYnV0IG9rYXkgZm9yIG5vd1xuICAgIC8vIHJldHVybnMgdHJ1ZSBpZiB0aGUgc2Nyb2xsIGNoYW5nZWQsIGZhbHNlIGlmIG5vdGhpbmcgaGFwcGVuZWRcbiAgICB2YXIgc2V0UG9zaXRpb24gPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBvbGRZID0gcG9zWTtcbiAgICAgIHZhciBvbGRYID0gcG9zWDtcblxuICAgICAgcG9zWSA9IHNlbGYub3B0aW9ucy53cmFwcGVyID8gc2VsZi5vcHRpb25zLndyYXBwZXIuc2Nyb2xsVG9wIDogKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCB8fCBkb2N1bWVudC5ib2R5LnBhcmVudE5vZGUgfHwgZG9jdW1lbnQuYm9keSkuc2Nyb2xsVG9wIHx8IHdpbmRvdy5wYWdlWU9mZnNldDtcbiAgICAgIHBvc1ggPSBzZWxmLm9wdGlvbnMud3JhcHBlciA/IHNlbGYub3B0aW9ucy53cmFwcGVyLnNjcm9sbExlZnQgOiAoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50IHx8IGRvY3VtZW50LmJvZHkucGFyZW50Tm9kZSB8fCBkb2N1bWVudC5ib2R5KS5zY3JvbGxMZWZ0IHx8IHdpbmRvdy5wYWdlWE9mZnNldDtcblxuXG4gICAgICBpZiAob2xkWSAhPSBwb3NZICYmIHNlbGYub3B0aW9ucy52ZXJ0aWNhbCkge1xuICAgICAgICAvLyBzY3JvbGwgY2hhbmdlZCwgcmV0dXJuIHRydWVcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChvbGRYICE9IHBvc1ggJiYgc2VsZi5vcHRpb25zLmhvcml6b250YWwpIHtcbiAgICAgICAgLy8gc2Nyb2xsIGNoYW5nZWQsIHJldHVybiB0cnVlXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBzY3JvbGwgZGlkIG5vdCBjaGFuZ2VcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9O1xuXG4gICAgLy8gQWhoIGEgcHVyZSBmdW5jdGlvbiwgZ2V0cyBuZXcgdHJhbnNmb3JtIHZhbHVlXG4gICAgLy8gYmFzZWQgb24gc2Nyb2xsUG9zaXRpb24gYW5kIHNwZWVkXG4gICAgLy8gQWxsb3cgZm9yIGRlY2ltYWwgcGl4ZWwgdmFsdWVzXG4gICAgdmFyIHVwZGF0ZVBvc2l0aW9uID0gZnVuY3Rpb24ocGVyY2VudGFnZVgsIHBlcmNlbnRhZ2VZLCBzcGVlZCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgdmFyIHZhbHVlWCA9IChzcGVlZCAqICgxMDAgKiAoMSAtIHBlcmNlbnRhZ2VYKSkpO1xuICAgICAgdmFyIHZhbHVlWSA9IChzcGVlZCAqICgxMDAgKiAoMSAtIHBlcmNlbnRhZ2VZKSkpO1xuXG4gICAgICByZXN1bHQueCA9IHNlbGYub3B0aW9ucy5yb3VuZCA/IE1hdGgucm91bmQodmFsdWVYKSA6IE1hdGgucm91bmQodmFsdWVYICogMTAwKSAvIDEwMDtcbiAgICAgIHJlc3VsdC55ID0gc2VsZi5vcHRpb25zLnJvdW5kID8gTWF0aC5yb3VuZCh2YWx1ZVkpIDogTWF0aC5yb3VuZCh2YWx1ZVkgKiAxMDApIC8gMTAwO1xuXG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG5cbiAgICAvLyBMb29wXG4gICAgdmFyIHVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHNldFBvc2l0aW9uKCkgJiYgcGF1c2UgPT09IGZhbHNlKSB7XG4gICAgICAgIGFuaW1hdGUoKTtcbiAgICAgIH1cblxuICAgICAgLy8gbG9vcCBhZ2FpblxuICAgICAgbG9vcCh1cGRhdGUpO1xuICAgIH07XG5cbiAgICAvLyBUcmFuc2Zvcm0zZCBvbiBwYXJhbGxheCBlbGVtZW50XG4gICAgdmFyIGFuaW1hdGUgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBwb3NpdGlvbnM7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNlbGYuZWxlbXMubGVuZ3RoOyBpKyspe1xuICAgICAgICB2YXIgcGVyY2VudGFnZVkgPSAoKHBvc1kgLSBibG9ja3NbaV0udG9wICsgc2NyZWVuWSkgLyAoYmxvY2tzW2ldLmhlaWdodCArIHNjcmVlblkpKTtcbiAgICAgICAgdmFyIHBlcmNlbnRhZ2VYID0gKChwb3NYIC0gYmxvY2tzW2ldLmxlZnQgKyBzY3JlZW5YKSAvIChibG9ja3NbaV0ud2lkdGggKyBzY3JlZW5YKSk7XG5cbiAgICAgICAgLy8gU3VidHJhY3RpbmcgaW5pdGlhbGl6ZSB2YWx1ZSwgc28gZWxlbWVudCBzdGF5cyBpbiBzYW1lIHNwb3QgYXMgSFRNTFxuICAgICAgICBwb3NpdGlvbnMgPSB1cGRhdGVQb3NpdGlvbihwZXJjZW50YWdlWCwgcGVyY2VudGFnZVksIGJsb2Nrc1tpXS5zcGVlZCk7Ly8gLSBibG9ja3NbaV0uYmFzZVg7XG4gICAgICAgIHZhciBwb3NpdGlvblkgPSBwb3NpdGlvbnMueSAtIGJsb2Nrc1tpXS5iYXNlWTtcbiAgICAgICAgdmFyIHBvc2l0aW9uWCA9IHBvc2l0aW9ucy54IC0gYmxvY2tzW2ldLmJhc2VYO1xuXG4gICAgICAgIHZhciB6aW5kZXggPSBibG9ja3NbaV0uemluZGV4O1xuXG4gICAgICAgIC8vIE1vdmUgdGhhdCBlbGVtZW50XG4gICAgICAgIC8vIChTZXQgdGhlIG5ldyB0cmFuc2xhdGlvbiBhbmQgYXBwZW5kIGluaXRpYWwgaW5saW5lIHRyYW5zZm9ybXMuKVxuICAgICAgICB2YXIgdHJhbnNsYXRlID0gJ3RyYW5zbGF0ZTNkKCcgKyAoc2VsZi5vcHRpb25zLmhvcml6b250YWwgPyBwb3NpdGlvblggOiAnMCcpICsgJ3B4LCcgKyAoc2VsZi5vcHRpb25zLnZlcnRpY2FsID8gcG9zaXRpb25ZIDogJzAnKSArICdweCwnICsgemluZGV4ICsgJ3B4KSAnICsgYmxvY2tzW2ldLnRyYW5zZm9ybTtcbiAgICAgICAgc2VsZi5lbGVtc1tpXS5zdHlsZVt0cmFuc2Zvcm1Qcm9wXSA9IHRyYW5zbGF0ZTtcbiAgICAgIH1cbiAgICAgIHNlbGYub3B0aW9ucy5jYWxsYmFjayhwb3NpdGlvbnMpO1xuICAgIH07XG5cbiAgICBzZWxmLmRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VsZi5lbGVtcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgIHNlbGYuZWxlbXNbaV0uc3R5bGUuY3NzVGV4dCA9IGJsb2Nrc1tpXS5zdHlsZTtcbiAgICAgIH1cblxuICAgICAgLy8gUmVtb3ZlIHJlc2l6ZSBldmVudCBsaXN0ZW5lciBpZiBub3QgcGF1c2UsIGFuZCBwYXVzZVxuICAgICAgaWYgKCFwYXVzZSkge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaW5pdCk7XG4gICAgICAgIHBhdXNlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgLy8gSW5pdFxuICAgIGluaXQoKTtcblxuICAgIC8vIFN0YXJ0IHRoZSBsb29wXG4gICAgdXBkYXRlKCk7XG5cbiAgICAvLyBBbGxvdyB0byByZWNhbGN1bGF0ZSB0aGUgaW5pdGlhbCB2YWx1ZXMgd2hlbmV2ZXIgd2Ugd2FudFxuICAgIHNlbGYucmVmcmVzaCA9IGluaXQ7XG5cbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcbiAgcmV0dXJuIFJlbGxheDtcbn0pKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL25vZGVfbW9kdWxlcy9yZWxsYXgvcmVsbGF4LmpzIiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjIuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTctMDMtMjBUMTg6NTlaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG5cblxuXHRmdW5jdGlvbiBET01FdmFsKCBjb2RlLCBkb2MgKSB7XG5cdFx0ZG9jID0gZG9jIHx8IGRvY3VtZW50O1xuXG5cdFx0dmFyIHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdCApLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIHNjcmlwdCApO1xuXHR9XG4vKiBnbG9iYWwgU3ltYm9sICovXG4vLyBEZWZpbmluZyB0aGlzIGdsb2JhbCBpbiAuZXNsaW50cmMuanNvbiB3b3VsZCBjcmVhdGUgYSBkYW5nZXIgb2YgdXNpbmcgdGhlIGdsb2JhbFxuLy8gdW5ndWFyZGVkIGluIGFub3RoZXIgcGxhY2UsIGl0IHNlZW1zIHNhZmVyIHRvIGRlZmluZSBnbG9iYWwgb25seSBmb3IgdGhpcyBtb2R1bGVcblxuXG5cbnZhclxuXHR2ZXJzaW9uID0gXCIzLjIuMVwiLFxuXG5cdC8vIERlZmluZSBhIGxvY2FsIGNvcHkgb2YgalF1ZXJ5XG5cdGpRdWVyeSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblxuXHRcdC8vIFRoZSBqUXVlcnkgb2JqZWN0IGlzIGFjdHVhbGx5IGp1c3QgdGhlIGluaXQgY29uc3RydWN0b3IgJ2VuaGFuY2VkJ1xuXHRcdC8vIE5lZWQgaW5pdCBpZiBqUXVlcnkgaXMgY2FsbGVkIChqdXN0IGFsbG93IGVycm9yIHRvIGJlIHRocm93biBpZiBub3QgaW5jbHVkZWQpXG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuZm4uaW5pdCggc2VsZWN0b3IsIGNvbnRleHQgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHdlIHRyaW0gQk9NIGFuZCBOQlNQXG5cdHJ0cmltID0gL15bXFxzXFx1RkVGRlxceEEwXSt8W1xcc1xcdUZFRkZcXHhBMF0rJC9nLFxuXG5cdC8vIE1hdGNoZXMgZGFzaGVkIHN0cmluZyBmb3IgY2FtZWxpemluZ1xuXHRybXNQcmVmaXggPSAvXi1tcy0vLFxuXHRyZGFzaEFscGhhID0gLy0oW2Etel0pL2csXG5cblx0Ly8gVXNlZCBieSBqUXVlcnkuY2FtZWxDYXNlIGFzIGNhbGxiYWNrIHRvIHJlcGxhY2UoKVxuXHRmY2FtZWxDYXNlID0gZnVuY3Rpb24oIGFsbCwgbGV0dGVyICkge1xuXHRcdHJldHVybiBsZXR0ZXIudG9VcHBlckNhc2UoKTtcblx0fTtcblxualF1ZXJ5LmZuID0galF1ZXJ5LnByb3RvdHlwZSA9IHtcblxuXHQvLyBUaGUgY3VycmVudCB2ZXJzaW9uIG9mIGpRdWVyeSBiZWluZyB1c2VkXG5cdGpxdWVyeTogdmVyc2lvbixcblxuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LFxuXG5cdC8vIFRoZSBkZWZhdWx0IGxlbmd0aCBvZiBhIGpRdWVyeSBvYmplY3QgaXMgMFxuXHRsZW5ndGg6IDAsXG5cblx0dG9BcnJheTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIE50aCBlbGVtZW50IGluIHRoZSBtYXRjaGVkIGVsZW1lbnQgc2V0IE9SXG5cdC8vIEdldCB0aGUgd2hvbGUgbWF0Y2hlZCBlbGVtZW50IHNldCBhcyBhIGNsZWFuIGFycmF5XG5cdGdldDogZnVuY3Rpb24oIG51bSApIHtcblxuXHRcdC8vIFJldHVybiBhbGwgdGhlIGVsZW1lbnRzIGluIGEgY2xlYW4gYXJyYXlcblx0XHRpZiAoIG51bSA9PSBudWxsICkge1xuXHRcdFx0cmV0dXJuIHNsaWNlLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4ganVzdCB0aGUgb25lIGVsZW1lbnQgZnJvbSB0aGUgc2V0XG5cdFx0cmV0dXJuIG51bSA8IDAgPyB0aGlzWyBudW0gKyB0aGlzLmxlbmd0aCBdIDogdGhpc1sgbnVtIF07XG5cdH0sXG5cblx0Ly8gVGFrZSBhbiBhcnJheSBvZiBlbGVtZW50cyBhbmQgcHVzaCBpdCBvbnRvIHRoZSBzdGFja1xuXHQvLyAocmV0dXJuaW5nIHRoZSBuZXcgbWF0Y2hlZCBlbGVtZW50IHNldClcblx0cHVzaFN0YWNrOiBmdW5jdGlvbiggZWxlbXMgKSB7XG5cblx0XHQvLyBCdWlsZCBhIG5ldyBqUXVlcnkgbWF0Y2hlZCBlbGVtZW50IHNldFxuXHRcdHZhciByZXQgPSBqUXVlcnkubWVyZ2UoIHRoaXMuY29uc3RydWN0b3IoKSwgZWxlbXMgKTtcblxuXHRcdC8vIEFkZCB0aGUgb2xkIG9iamVjdCBvbnRvIHRoZSBzdGFjayAoYXMgYSByZWZlcmVuY2UpXG5cdFx0cmV0LnByZXZPYmplY3QgPSB0aGlzO1xuXG5cdFx0Ly8gUmV0dXJuIHRoZSBuZXdseS1mb3JtZWQgZWxlbWVudCBzZXRcblx0XHRyZXR1cm4gcmV0O1xuXHR9LFxuXG5cdC8vIEV4ZWN1dGUgYSBjYWxsYmFjayBmb3IgZXZlcnkgZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBzZXQuXG5cdGVhY2g6IGZ1bmN0aW9uKCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmVhY2goIHRoaXMsIGNhbGxiYWNrICk7XG5cdH0sXG5cblx0bWFwOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqUXVlcnkubWFwKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiBjYWxsYmFjay5jYWxsKCBlbGVtLCBpLCBlbGVtICk7XG5cdFx0fSApICk7XG5cdH0sXG5cblx0c2xpY2U6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggc2xpY2UuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApICk7XG5cdH0sXG5cblx0Zmlyc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAwICk7XG5cdH0sXG5cblx0bGFzdDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMuZXEoIC0xICk7XG5cdH0sXG5cblx0ZXE6IGZ1bmN0aW9uKCBpICkge1xuXHRcdHZhciBsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdGogPSAraSArICggaSA8IDAgPyBsZW4gOiAwICk7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBqID49IDAgJiYgaiA8IGxlbiA/IFsgdGhpc1sgaiBdIF0gOiBbXSApO1xuXHR9LFxuXG5cdGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMucHJldk9iamVjdCB8fCB0aGlzLmNvbnN0cnVjdG9yKCk7XG5cdH0sXG5cblx0Ly8gRm9yIGludGVybmFsIHVzZSBvbmx5LlxuXHQvLyBCZWhhdmVzIGxpa2UgYW4gQXJyYXkncyBtZXRob2QsIG5vdCBsaWtlIGEgalF1ZXJ5IG1ldGhvZC5cblx0cHVzaDogcHVzaCxcblx0c29ydDogYXJyLnNvcnQsXG5cdHNwbGljZTogYXJyLnNwbGljZVxufTtcblxualF1ZXJ5LmV4dGVuZCA9IGpRdWVyeS5mbi5leHRlbmQgPSBmdW5jdGlvbigpIHtcblx0dmFyIG9wdGlvbnMsIG5hbWUsIHNyYywgY29weSwgY29weUlzQXJyYXksIGNsb25lLFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgMCBdIHx8IHt9LFxuXHRcdGkgPSAxLFxuXHRcdGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cdFx0ZGVlcCA9IGZhbHNlO1xuXG5cdC8vIEhhbmRsZSBhIGRlZXAgY29weSBzaXR1YXRpb25cblx0aWYgKCB0eXBlb2YgdGFyZ2V0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRkZWVwID0gdGFyZ2V0O1xuXG5cdFx0Ly8gU2tpcCB0aGUgYm9vbGVhbiBhbmQgdGhlIHRhcmdldFxuXHRcdHRhcmdldCA9IGFyZ3VtZW50c1sgaSBdIHx8IHt9O1xuXHRcdGkrKztcblx0fVxuXG5cdC8vIEhhbmRsZSBjYXNlIHdoZW4gdGFyZ2V0IGlzIGEgc3RyaW5nIG9yIHNvbWV0aGluZyAocG9zc2libGUgaW4gZGVlcCBjb3B5KVxuXHRpZiAoIHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIgJiYgIWpRdWVyeS5pc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIEFycmF5LmlzQXJyYXkoIHNyYyApID8gc3JjIDogW107XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNGdW5jdGlvbjogZnVuY3Rpb24oIG9iaiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LnR5cGUoIG9iaiApID09PSBcImZ1bmN0aW9uXCI7XG5cdH0sXG5cblx0aXNXaW5kb3c6IGZ1bmN0aW9uKCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fSxcblxuXHRpc051bWVyaWM6IGZ1bmN0aW9uKCBvYmogKSB7XG5cblx0XHQvLyBBcyBvZiBqUXVlcnkgMy4wLCBpc051bWVyaWMgaXMgbGltaXRlZCB0b1xuXHRcdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0XHQvLyB0aGF0IGNhbiBiZSBjb2VyY2VkIHRvIGZpbml0ZSBudW1iZXJzIChnaC0yNjYyKVxuXHRcdHZhciB0eXBlID0galF1ZXJ5LnR5cGUoIG9iaiApO1xuXHRcdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHRcdC8vIHBhcnNlRmxvYXQgTmFOcyBudW1lcmljLWNhc3QgZmFsc2UgcG9zaXRpdmVzIChcIlwiKVxuXHRcdFx0Ly8gLi4uYnV0IG1pc2ludGVycHJldHMgbGVhZGluZy1udW1iZXIgc3RyaW5ncywgcGFydGljdWxhcmx5IGhleCBsaXRlcmFscyAoXCIweC4uLlwiKVxuXHRcdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0XHQhaXNOYU4oIG9iaiAtIHBhcnNlRmxvYXQoIG9iaiApICk7XG5cdH0sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0LyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzYxMjVcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHR0eXBlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdGlmICggb2JqID09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0XHR9XG5cblx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9Mi4zIG9ubHkgKGZ1bmN0aW9uaXNoIFJlZ0V4cClcblx0XHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdFx0Y2xhc3MydHlwZVsgdG9TdHJpbmcuY2FsbCggb2JqICkgXSB8fCBcIm9iamVjdFwiIDpcblx0XHRcdHR5cGVvZiBvYmo7XG5cdH0sXG5cblx0Ly8gRXZhbHVhdGVzIGEgc2NyaXB0IGluIGEgZ2xvYmFsIGNvbnRleHRcblx0Z2xvYmFsRXZhbDogZnVuY3Rpb24oIGNvZGUgKSB7XG5cdFx0RE9NRXZhbCggY29kZSApO1xuXHR9LFxuXG5cdC8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcblx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHQvLyBNaWNyb3NvZnQgZm9yZ290IHRvIGh1bXAgdGhlaXIgdmVuZG9yIHByZWZpeCAoIzk1NzIpXG5cdGNhbWVsQ2FzZTogZnVuY3Rpb24oIHN0cmluZyApIHtcblx0XHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcblx0fSxcblxuXHRlYWNoOiBmdW5jdGlvbiggb2JqLCBjYWxsYmFjayApIHtcblx0XHR2YXIgbGVuZ3RoLCBpID0gMDtcblxuXHRcdGlmICggaXNBcnJheUxpa2UoIG9iaiApICkge1xuXHRcdFx0bGVuZ3RoID0gb2JqLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrLmNhbGwoIG9ialsgaSBdLCBpLCBvYmpbIGkgXSApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRmb3IgKCBpIGluIG9iaiApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gb2JqO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHR0cmltOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRyZXR1cm4gdGV4dCA9PSBudWxsID9cblx0XHRcdFwiXCIgOlxuXHRcdFx0KCB0ZXh0ICsgXCJcIiApLnJlcGxhY2UoIHJ0cmltLCBcIlwiICk7XG5cdH0sXG5cblx0Ly8gcmVzdWx0cyBpcyBmb3IgaW50ZXJuYWwgdXNhZ2Ugb25seVxuXHRtYWtlQXJyYXk6IGZ1bmN0aW9uKCBhcnIsIHJlc3VsdHMgKSB7XG5cdFx0dmFyIHJldCA9IHJlc3VsdHMgfHwgW107XG5cblx0XHRpZiAoIGFyciAhPSBudWxsICkge1xuXHRcdFx0aWYgKCBpc0FycmF5TGlrZSggT2JqZWN0KCBhcnIgKSApICkge1xuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHJldCxcblx0XHRcdFx0XHR0eXBlb2YgYXJyID09PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRbIGFyciBdIDogYXJyXG5cdFx0XHRcdCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwdXNoLmNhbGwoIHJldCwgYXJyICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHRpbkFycmF5OiBmdW5jdGlvbiggZWxlbSwgYXJyLCBpICkge1xuXHRcdHJldHVybiBhcnIgPT0gbnVsbCA/IC0xIDogaW5kZXhPZi5jYWxsKCBhcnIsIGVsZW0sIGkgKTtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRtZXJnZTogZnVuY3Rpb24oIGZpcnN0LCBzZWNvbmQgKSB7XG5cdFx0dmFyIGxlbiA9ICtzZWNvbmQubGVuZ3RoLFxuXHRcdFx0aiA9IDAsXG5cdFx0XHRpID0gZmlyc3QubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRmaXJzdFsgaSsrIF0gPSBzZWNvbmRbIGogXTtcblx0XHR9XG5cblx0XHRmaXJzdC5sZW5ndGggPSBpO1xuXG5cdFx0cmV0dXJuIGZpcnN0O1xuXHR9LFxuXG5cdGdyZXA6IGZ1bmN0aW9uKCBlbGVtcywgY2FsbGJhY2ssIGludmVydCApIHtcblx0XHR2YXIgY2FsbGJhY2tJbnZlcnNlLFxuXHRcdFx0bWF0Y2hlcyA9IFtdLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsZW5ndGggPSBlbGVtcy5sZW5ndGgsXG5cdFx0XHRjYWxsYmFja0V4cGVjdCA9ICFpbnZlcnQ7XG5cblx0XHQvLyBHbyB0aHJvdWdoIHRoZSBhcnJheSwgb25seSBzYXZpbmcgdGhlIGl0ZW1zXG5cdFx0Ly8gdGhhdCBwYXNzIHRoZSB2YWxpZGF0b3IgZnVuY3Rpb25cblx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdGNhbGxiYWNrSW52ZXJzZSA9ICFjYWxsYmFjayggZWxlbXNbIGkgXSwgaSApO1xuXHRcdFx0aWYgKCBjYWxsYmFja0ludmVyc2UgIT09IGNhbGxiYWNrRXhwZWN0ICkge1xuXHRcdFx0XHRtYXRjaGVzLnB1c2goIGVsZW1zWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gbWF0Y2hlcztcblx0fSxcblxuXHQvLyBhcmcgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBhcmcgKSB7XG5cdFx0dmFyIGxlbmd0aCwgdmFsdWUsXG5cdFx0XHRpID0gMCxcblx0XHRcdHJldCA9IFtdO1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIHRyYW5zbGF0aW5nIGVhY2ggb2YgdGhlIGl0ZW1zIHRvIHRoZWlyIG5ldyB2YWx1ZXNcblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBlbGVtcyApICkge1xuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0Ly8gR28gdGhyb3VnaCBldmVyeSBrZXkgb24gdGhlIG9iamVjdCxcblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBlbGVtcyApIHtcblx0XHRcdFx0dmFsdWUgPSBjYWxsYmFjayggZWxlbXNbIGkgXSwgaSwgYXJnICk7XG5cblx0XHRcdFx0aWYgKCB2YWx1ZSAhPSBudWxsICkge1xuXHRcdFx0XHRcdHJldC5wdXNoKCB2YWx1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRcdHJldHVybiBjb25jYXQuYXBwbHkoIFtdLCByZXQgKTtcblx0fSxcblxuXHQvLyBBIGdsb2JhbCBHVUlEIGNvdW50ZXIgZm9yIG9iamVjdHNcblx0Z3VpZDogMSxcblxuXHQvLyBCaW5kIGEgZnVuY3Rpb24gdG8gYSBjb250ZXh0LCBvcHRpb25hbGx5IHBhcnRpYWxseSBhcHBseWluZyBhbnlcblx0Ly8gYXJndW1lbnRzLlxuXHRwcm94eTogZnVuY3Rpb24oIGZuLCBjb250ZXh0ICkge1xuXHRcdHZhciB0bXAsIGFyZ3MsIHByb3h5O1xuXG5cdFx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRtcCA9IGZuWyBjb250ZXh0IF07XG5cdFx0XHRjb250ZXh0ID0gZm47XG5cdFx0XHRmbiA9IHRtcDtcblx0XHR9XG5cblx0XHQvLyBRdWljayBjaGVjayB0byBkZXRlcm1pbmUgaWYgdGFyZ2V0IGlzIGNhbGxhYmxlLCBpbiB0aGUgc3BlY1xuXHRcdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0XHRyZXR1cm4gdW5kZWZpbmVkO1xuXHRcdH1cblxuXHRcdC8vIFNpbXVsYXRlZCBiaW5kXG5cdFx0YXJncyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cywgMiApO1xuXHRcdHByb3h5ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0XHR9O1xuXG5cdFx0Ly8gU2V0IHRoZSBndWlkIG9mIHVuaXF1ZSBoYW5kbGVyIHRvIHRoZSBzYW1lIG9mIG9yaWdpbmFsIGhhbmRsZXIsIHNvIGl0IGNhbiBiZSByZW1vdmVkXG5cdFx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0XHRyZXR1cm4gcHJveHk7XG5cdH0sXG5cblx0bm93OiBEYXRlLm5vdyxcblxuXHQvLyBqUXVlcnkuc3VwcG9ydCBpcyBub3QgdXNlZCBpbiBDb3JlIGJ1dCBvdGhlciBwcm9qZWN0cyBhdHRhY2ggdGhlaXJcblx0Ly8gcHJvcGVydGllcyB0byBpdCBzbyBpdCBuZWVkcyB0byBleGlzdC5cblx0c3VwcG9ydDogc3VwcG9ydFxufSApO1xuXG5pZiAoIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiApIHtcblx0alF1ZXJ5LmZuWyBTeW1ib2wuaXRlcmF0b3IgXSA9IGFyclsgU3ltYm9sLml0ZXJhdG9yIF07XG59XG5cbi8vIFBvcHVsYXRlIHRoZSBjbGFzczJ0eXBlIG1hcFxualF1ZXJ5LmVhY2goIFwiQm9vbGVhbiBOdW1iZXIgU3RyaW5nIEZ1bmN0aW9uIEFycmF5IERhdGUgUmVnRXhwIE9iamVjdCBFcnJvciBTeW1ib2xcIi5zcGxpdCggXCIgXCIgKSxcbmZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHRjbGFzczJ0eXBlWyBcIltvYmplY3QgXCIgKyBuYW1lICsgXCJdXCIgXSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcbn0gKTtcblxuZnVuY3Rpb24gaXNBcnJheUxpa2UoIG9iaiApIHtcblxuXHQvLyBTdXBwb3J0OiByZWFsIGlPUyA4LjIgb25seSAobm90IHJlcHJvZHVjaWJsZSBpbiBzaW11bGF0b3IpXG5cdC8vIGBpbmAgY2hlY2sgdXNlZCB0byBwcmV2ZW50IEpJVCBlcnJvciAoZ2gtMjE0NSlcblx0Ly8gaGFzT3duIGlzbid0IHVzZWQgaGVyZSBkdWUgdG8gZmFsc2UgbmVnYXRpdmVzXG5cdC8vIHJlZ2FyZGluZyBOb2RlbGlzdCBsZW5ndGggaW4gSUVcblx0dmFyIGxlbmd0aCA9ICEhb2JqICYmIFwibGVuZ3RoXCIgaW4gb2JqICYmIG9iai5sZW5ndGgsXG5cdFx0dHlwZSA9IGpRdWVyeS50eXBlKCBvYmogKTtcblxuXHRpZiAoIHR5cGUgPT09IFwiZnVuY3Rpb25cIiB8fCBqUXVlcnkuaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE2LTA4LTA4XG4gKi9cbihmdW5jdGlvbiggd2luZG93ICkge1xuXG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cblx0cmF0dHJpYnV0ZVF1b3RlcyA9IG5ldyBSZWdFeHAoIFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XG5cdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXG5cdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xuXHRcdFx0ZXNjYXBlZCA6XG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGRpc2FibGVkQW5jZXN0b3IgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgKFwiZm9ybVwiIGluIGVsZW0gfHwgXCJsYWJlbFwiIGluIGVsZW0pO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHR9XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cblx0XHRcdFx0Ly8gcVNBIGxvb2tzIG91dHNpZGUgRWxlbWVudCBjb250ZXh0LCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50XG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHdvcmthcm91bmQgdGVjaG5pcXVlXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbmV3U2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0ZGlzYWJsZWRBbmNlc3RvciggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPT0gZG9jdW1lbnQgJiZcblx0XHQoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1zW2krK10pICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhY29tcGlsZXJDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge31cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxudmFyIHJpc1NpbXBsZSA9IC9eLlteOiNcXFtcXC4sXSokLztcblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBxdWFsaWZpZXIgKSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSwgaSApIHtcblx0XHRcdHJldHVybiAhIXF1YWxpZmllci5jYWxsKCBlbGVtLCBpLCBlbGVtICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBTaW5nbGUgZWxlbWVudFxuXHRpZiAoIHF1YWxpZmllci5ub2RlVHlwZSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGVsZW0gPT09IHF1YWxpZmllciApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gQXJyYXlsaWtlIG9mIGVsZW1lbnRzIChqUXVlcnksIGFyZ3VtZW50cywgQXJyYXkpXG5cdGlmICggdHlwZW9mIHF1YWxpZmllciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdyZXAoIGVsZW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3Q7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gU2ltcGxlIHNlbGVjdG9yIHRoYXQgY2FuIGJlIGZpbHRlcmVkIGRpcmVjdGx5LCByZW1vdmluZyBub24tRWxlbWVudHNcblx0aWYgKCByaXNTaW1wbGUudGVzdCggcXVhbGlmaWVyICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maWx0ZXIoIHF1YWxpZmllciwgZWxlbWVudHMsIG5vdCApO1xuXHR9XG5cblx0Ly8gQ29tcGxleCBzZWxlY3RvciwgY29tcGFyZSB0aGUgdHdvIHNldHMsIHJlbW92aW5nIG5vbi1FbGVtZW50c1xuXHRxdWFsaWZpZXIgPSBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzICk7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiAoIGluZGV4T2YuY2FsbCggcXVhbGlmaWVyLCBlbGVtICkgPiAtMSApICE9PSBub3QgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMTtcblx0fSApO1xufVxuXG5qUXVlcnkuZmlsdGVyID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1zLCBub3QgKSB7XG5cdHZhciBlbGVtID0gZWxlbXNbIDAgXTtcblxuXHRpZiAoIG5vdCApIHtcblx0XHRleHByID0gXCI6bm90KFwiICsgZXhwciArIFwiKVwiO1xuXHR9XG5cblx0aWYgKCBlbGVtcy5sZW5ndGggPT09IDEgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBlbGVtLCBleHByICkgPyBbIGVsZW0gXSA6IFtdO1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXMoIGV4cHIsIGpRdWVyeS5ncmVwKCBlbGVtcywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGVsZW0ubm9kZVR5cGUgPT09IDE7XG5cdH0gKSApO1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmaW5kOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dmFyIGksIHJldCxcblx0XHRcdGxlbiA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0c2VsZiA9IHRoaXM7XG5cblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5KCBzZWxlY3RvciApLmZpbHRlciggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHNlbGZbIGkgXSwgdGhpcyApICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9ICkgKTtcblx0XHR9XG5cblx0XHRyZXQgPSB0aGlzLnB1c2hTdGFjayggW10gKTtcblxuXHRcdGZvciAoIGkgPSAwOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRqUXVlcnkuZmluZCggc2VsZWN0b3IsIHNlbGZbIGkgXSwgcmV0ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGxlbiA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggcmV0ICkgOiByZXQ7XG5cdH0sXG5cdGZpbHRlcjogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggd2lubm93KCB0aGlzLCBzZWxlY3RvciB8fCBbXSwgZmFsc2UgKSApO1xuXHR9LFxuXHRub3Q6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIHRydWUgKSApO1xuXHR9LFxuXHRpczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiAhIXdpbm5vdyhcblx0XHRcdHRoaXMsXG5cblx0XHRcdC8vIElmIHRoaXMgaXMgYSBwb3NpdGlvbmFsL3JlbGF0aXZlIHNlbGVjdG9yLCBjaGVjayBtZW1iZXJzaGlwIGluIHRoZSByZXR1cm5lZCBzZXRcblx0XHRcdC8vIHNvICQoXCJwOmZpcnN0XCIpLmlzKFwicDpsYXN0XCIpIHdvbid0IHJldHVybiB0cnVlIGZvciBhIGRvYyB3aXRoIHR3byBcInBcIi5cblx0XHRcdHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiAmJiBybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICkgP1xuXHRcdFx0XHRqUXVlcnkoIHNlbGVjdG9yICkgOlxuXHRcdFx0XHRzZWxlY3RvciB8fCBbXSxcblx0XHRcdGZhbHNlXG5cdFx0KS5sZW5ndGg7XG5cdH1cbn0gKTtcblxuXG4vLyBJbml0aWFsaXplIGEgalF1ZXJ5IG9iamVjdFxuXG5cbi8vIEEgY2VudHJhbCByZWZlcmVuY2UgdG8gdGhlIHJvb3QgalF1ZXJ5KGRvY3VtZW50KVxudmFyIHJvb3RqUXVlcnksXG5cblx0Ly8gQSBzaW1wbGUgd2F5IHRvIGNoZWNrIGZvciBIVE1MIHN0cmluZ3Ncblx0Ly8gUHJpb3JpdGl6ZSAjaWQgb3ZlciA8dGFnPiB0byBhdm9pZCBYU1MgdmlhIGxvY2F0aW9uLmhhc2ggKCM5NTIxKVxuXHQvLyBTdHJpY3QgSFRNTCByZWNvZ25pdGlvbiAoIzExMjkwOiBtdXN0IHN0YXJ0IHdpdGggPClcblx0Ly8gU2hvcnRjdXQgc2ltcGxlICNpZCBjYXNlIGZvciBzcGVlZFxuXHRycXVpY2tFeHByID0gL14oPzpcXHMqKDxbXFx3XFxXXSs+KVtePl0qfCMoW1xcdy1dKykpJC8sXG5cblx0aW5pdCA9IGpRdWVyeS5mbi5pbml0ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0LCByb290ICkge1xuXHRcdHZhciBtYXRjaCwgZWxlbTtcblxuXHRcdC8vIEhBTkRMRTogJChcIlwiKSwgJChudWxsKSwgJCh1bmRlZmluZWQpLCAkKGZhbHNlKVxuXHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXG5cdFx0Ly8gTWV0aG9kIGluaXQoKSBhY2NlcHRzIGFuIGFsdGVybmF0ZSByb290alF1ZXJ5XG5cdFx0Ly8gc28gbWlncmF0ZSBjYW4gc3VwcG9ydCBqUXVlcnkuc3ViIChnaC0yMTAxKVxuXHRcdHJvb3QgPSByb290IHx8IHJvb3RqUXVlcnk7XG5cblx0XHQvLyBIYW5kbGUgSFRNTCBzdHJpbmdzXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRpZiAoIHNlbGVjdG9yWyAwIF0gPT09IFwiPFwiICYmXG5cdFx0XHRcdHNlbGVjdG9yWyBzZWxlY3Rvci5sZW5ndGggLSAxIF0gPT09IFwiPlwiICYmXG5cdFx0XHRcdHNlbGVjdG9yLmxlbmd0aCA+PSAzICkge1xuXG5cdFx0XHRcdC8vIEFzc3VtZSB0aGF0IHN0cmluZ3MgdGhhdCBzdGFydCBhbmQgZW5kIHdpdGggPD4gYXJlIEhUTUwgYW5kIHNraXAgdGhlIHJlZ2V4IGNoZWNrXG5cdFx0XHRcdG1hdGNoID0gWyBudWxsLCBzZWxlY3RvciwgbnVsbCBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtYXRjaCA9IHJxdWlja0V4cHIuZXhlYyggc2VsZWN0b3IgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWF0Y2ggaHRtbCBvciBtYWtlIHN1cmUgbm8gY29udGV4dCBpcyBzcGVjaWZpZWQgZm9yICNpZFxuXHRcdFx0aWYgKCBtYXRjaCAmJiAoIG1hdGNoWyAxIF0gfHwgIWNvbnRleHQgKSApIHtcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoaHRtbCkgLT4gJChhcnJheSlcblx0XHRcdFx0aWYgKCBtYXRjaFsgMSBdICkge1xuXHRcdFx0XHRcdGNvbnRleHQgPSBjb250ZXh0IGluc3RhbmNlb2YgalF1ZXJ5ID8gY29udGV4dFsgMCBdIDogY29udGV4dDtcblxuXHRcdFx0XHRcdC8vIE9wdGlvbiB0byBydW4gc2NyaXB0cyBpcyB0cnVlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRcdC8vIEludGVudGlvbmFsbHkgbGV0IHRoZSBlcnJvciBiZSB0aHJvd24gaWYgcGFyc2VIVE1MIGlzIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLCBqUXVlcnkucGFyc2VIVE1MKFxuXHRcdFx0XHRcdFx0bWF0Y2hbIDEgXSxcblx0XHRcdFx0XHRcdGNvbnRleHQgJiYgY29udGV4dC5ub2RlVHlwZSA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogZG9jdW1lbnQsXG5cdFx0XHRcdFx0XHR0cnVlXG5cdFx0XHRcdFx0KSApO1xuXG5cdFx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwsIHByb3BzKVxuXHRcdFx0XHRcdGlmICggcnNpbmdsZVRhZy50ZXN0KCBtYXRjaFsgMSBdICkgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGNvbnRleHQgKSApIHtcblx0XHRcdFx0XHRcdGZvciAoIG1hdGNoIGluIGNvbnRleHQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHJvcGVydGllcyBvZiBjb250ZXh0IGFyZSBjYWxsZWQgYXMgbWV0aG9kcyBpZiBwb3NzaWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBzZWxlY3RvciApICkge1xuXHRcdFx0cmV0dXJuIHJvb3QucmVhZHkgIT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdHJvb3QucmVhZHkoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIEV4ZWN1dGUgaW1tZWRpYXRlbHkgaWYgcmVhZHkgaXMgbm90IHByZXNlbnRcblx0XHRcdFx0c2VsZWN0b3IoIGpRdWVyeSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBqUXVlcnkubWFrZUFycmF5KCBzZWxlY3RvciwgdGhpcyApO1xuXHR9O1xuXG4vLyBHaXZlIHRoZSBpbml0IGZ1bmN0aW9uIHRoZSBqUXVlcnkgcHJvdG90eXBlIGZvciBsYXRlciBpbnN0YW50aWF0aW9uXG5pbml0LnByb3RvdHlwZSA9IGpRdWVyeS5mbjtcblxuLy8gSW5pdGlhbGl6ZSBjZW50cmFsIHJlZmVyZW5jZVxucm9vdGpRdWVyeSA9IGpRdWVyeSggZG9jdW1lbnQgKTtcblxuXG52YXIgcnBhcmVudHNwcmV2ID0gL14oPzpwYXJlbnRzfHByZXYoPzpVbnRpbHxBbGwpKS8sXG5cblx0Ly8gTWV0aG9kcyBndWFyYW50ZWVkIHRvIHByb2R1Y2UgYSB1bmlxdWUgc2V0IHdoZW4gc3RhcnRpbmcgZnJvbSBhIHVuaXF1ZSBzZXRcblx0Z3VhcmFudGVlZFVuaXF1ZSA9IHtcblx0XHRjaGlsZHJlbjogdHJ1ZSxcblx0XHRjb250ZW50czogdHJ1ZSxcblx0XHRuZXh0OiB0cnVlLFxuXHRcdHByZXY6IHRydWVcblx0fTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRoYXM6IGZ1bmN0aW9uKCB0YXJnZXQgKSB7XG5cdFx0dmFyIHRhcmdldHMgPSBqUXVlcnkoIHRhcmdldCwgdGhpcyApLFxuXHRcdFx0bCA9IHRhcmdldHMubGVuZ3RoO1xuXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpID0gMDtcblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBqUXVlcnkuY29udGFpbnMoIHRoaXMsIHRhcmdldHNbIGkgXSApICkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGNsb3Nlc3Q6IGZ1bmN0aW9uKCBzZWxlY3RvcnMsIGNvbnRleHQgKSB7XG5cdFx0dmFyIGN1cixcblx0XHRcdGkgPSAwLFxuXHRcdFx0bCA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0bWF0Y2hlZCA9IFtdLFxuXHRcdFx0dGFyZ2V0cyA9IHR5cGVvZiBzZWxlY3RvcnMgIT09IFwic3RyaW5nXCIgJiYgalF1ZXJ5KCBzZWxlY3RvcnMgKTtcblxuXHRcdC8vIFBvc2l0aW9uYWwgc2VsZWN0b3JzIG5ldmVyIG1hdGNoLCBzaW5jZSB0aGVyZSdzIG5vIF9zZWxlY3Rpb25fIGNvbnRleHRcblx0XHRpZiAoICFybmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9ycyApICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmb3IgKCBjdXIgPSB0aGlzWyBpIF07IGN1ciAmJiBjdXIgIT09IGNvbnRleHQ7IGN1ciA9IGN1ci5wYXJlbnROb2RlICkge1xuXG5cdFx0XHRcdFx0Ly8gQWx3YXlzIHNraXAgZG9jdW1lbnQgZnJhZ21lbnRzXG5cdFx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPCAxMSAmJiAoIHRhcmdldHMgP1xuXHRcdFx0XHRcdFx0dGFyZ2V0cy5pbmRleCggY3VyICkgPiAtMSA6XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IHBhc3Mgbm9uLWVsZW1lbnRzIHRvIFNpenpsZVxuXHRcdFx0XHRcdFx0Y3VyLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggY3VyLCBzZWxlY3RvcnMgKSApICkge1xuXG5cdFx0XHRcdFx0XHRtYXRjaGVkLnB1c2goIGN1ciApO1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCBtYXRjaGVkLmxlbmd0aCA+IDEgPyBqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApIDogbWF0Y2hlZCApO1xuXHR9LFxuXG5cdC8vIERldGVybWluZSB0aGUgcG9zaXRpb24gb2YgYW4gZWxlbWVudCB3aXRoaW4gdGhlIHNldFxuXHRpbmRleDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHQvLyBObyBhcmd1bWVudCwgcmV0dXJuIGluZGV4IGluIHBhcmVudFxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gKCB0aGlzWyAwIF0gJiYgdGhpc1sgMCBdLnBhcmVudE5vZGUgKSA/IHRoaXMuZmlyc3QoKS5wcmV2QWxsKCkubGVuZ3RoIDogLTE7XG5cdFx0fVxuXG5cdFx0Ly8gSW5kZXggaW4gc2VsZWN0b3Jcblx0XHRpZiAoIHR5cGVvZiBlbGVtID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggalF1ZXJ5KCBlbGVtICksIHRoaXNbIDAgXSApO1xuXHRcdH1cblxuXHRcdC8vIExvY2F0ZSB0aGUgcG9zaXRpb24gb2YgdGhlIGRlc2lyZWQgZWxlbWVudFxuXHRcdHJldHVybiBpbmRleE9mLmNhbGwoIHRoaXMsXG5cblx0XHRcdC8vIElmIGl0IHJlY2VpdmVzIGEgalF1ZXJ5IG9iamVjdCwgdGhlIGZpcnN0IGVsZW1lbnQgaXMgdXNlZFxuXHRcdFx0ZWxlbS5qcXVlcnkgPyBlbGVtWyAwIF0gOiBlbGVtXG5cdFx0KTtcblx0fSxcblxuXHRhZGQ6IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soXG5cdFx0XHRqUXVlcnkudW5pcXVlU29ydChcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCB0aGlzLmdldCgpLCBqUXVlcnkoIHNlbGVjdG9yLCBjb250ZXh0ICkgKVxuXHRcdFx0KVxuXHRcdCk7XG5cdH0sXG5cblx0YWRkQmFjazogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiB0aGlzLmFkZCggc2VsZWN0b3IgPT0gbnVsbCA/XG5cdFx0XHR0aGlzLnByZXZPYmplY3QgOiB0aGlzLnByZXZPYmplY3QuZmlsdGVyKCBzZWxlY3RvciApXG5cdFx0KTtcblx0fVxufSApO1xuXG5mdW5jdGlvbiBzaWJsaW5nKCBjdXIsIGRpciApIHtcblx0d2hpbGUgKCAoIGN1ciA9IGN1clsgZGlyIF0gKSAmJiBjdXIubm9kZVR5cGUgIT09IDEgKSB7fVxuXHRyZXR1cm4gY3VyO1xufVxuXG5qUXVlcnkuZWFjaCgge1xuXHRwYXJlbnQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0cmV0dXJuIHBhcmVudCAmJiBwYXJlbnQubm9kZVR5cGUgIT09IDExID8gcGFyZW50IDogbnVsbDtcblx0fSxcblx0cGFyZW50czogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIgKTtcblx0fSxcblx0cGFyZW50c1VudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwYXJlbnROb2RlXCIsIHVudGlsICk7XG5cdH0sXG5cdG5leHQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5nKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dEFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiICk7XG5cdH0sXG5cdHByZXZBbGw6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIgKTtcblx0fSxcblx0bmV4dFVudGlsOiBmdW5jdGlvbiggZWxlbSwgaSwgdW50aWwgKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJuZXh0U2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRwcmV2VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInByZXZpb3VzU2libGluZ1wiLCB1bnRpbCApO1xuXHR9LFxuXHRzaWJsaW5nczogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCAoIGVsZW0ucGFyZW50Tm9kZSB8fCB7fSApLmZpcnN0Q2hpbGQsIGVsZW0gKTtcblx0fSxcblx0Y2hpbGRyZW46IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBzaWJsaW5ncyggZWxlbS5maXJzdENoaWxkICk7XG5cdH0sXG5cdGNvbnRlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcbiAgICAgICAgaWYgKCBub2RlTmFtZSggZWxlbSwgXCJpZnJhbWVcIiApICkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW0uY29udGVudERvY3VtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHksIGlPUyA3IG9ubHksIEFuZHJvaWQgQnJvd3NlciA8PTQuMyBvbmx5XG4gICAgICAgIC8vIFRyZWF0IHRoZSB0ZW1wbGF0ZSBlbGVtZW50IGFzIGEgcmVndWxhciBvbmUgaW4gYnJvd3NlcnMgdGhhdFxuICAgICAgICAvLyBkb24ndCBzdXBwb3J0IGl0LlxuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcInRlbXBsYXRlXCIgKSApIHtcbiAgICAgICAgICAgIGVsZW0gPSBlbGVtLmNvbnRlbnQgfHwgZWxlbTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBlbGVtLmNoaWxkTm9kZXMgKTtcblx0fVxufSwgZnVuY3Rpb24oIG5hbWUsIGZuICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCB1bnRpbCwgc2VsZWN0b3IgKSB7XG5cdFx0dmFyIG1hdGNoZWQgPSBqUXVlcnkubWFwKCB0aGlzLCBmbiwgdW50aWwgKTtcblxuXHRcdGlmICggbmFtZS5zbGljZSggLTUgKSAhPT0gXCJVbnRpbFwiICkge1xuXHRcdFx0c2VsZWN0b3IgPSB1bnRpbDtcblx0XHR9XG5cblx0XHRpZiAoIHNlbGVjdG9yICYmIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG1hdGNoZWQgPSBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgbWF0Y2hlZCApO1xuXHRcdH1cblxuXHRcdGlmICggdGhpcy5sZW5ndGggPiAxICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgZHVwbGljYXRlc1xuXHRcdFx0aWYgKCAhZ3VhcmFudGVlZFVuaXF1ZVsgbmFtZSBdICkge1xuXHRcdFx0XHRqUXVlcnkudW5pcXVlU29ydCggbWF0Y2hlZCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBSZXZlcnNlIG9yZGVyIGZvciBwYXJlbnRzKiBhbmQgcHJldi1kZXJpdmF0aXZlc1xuXHRcdFx0aWYgKCBycGFyZW50c3ByZXYudGVzdCggbmFtZSApICkge1xuXHRcdFx0XHRtYXRjaGVkLnJldmVyc2UoKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQgKTtcblx0fTtcbn0gKTtcbnZhciBybm90aHRtbHdoaXRlID0gKCAvW15cXHgyMFxcdFxcclxcblxcZl0rL2cgKTtcblxuXG5cbi8vIENvbnZlcnQgU3RyaW5nLWZvcm1hdHRlZCBvcHRpb25zIGludG8gT2JqZWN0LWZvcm1hdHRlZCBvbmVzXG5mdW5jdGlvbiBjcmVhdGVPcHRpb25zKCBvcHRpb25zICkge1xuXHR2YXIgb2JqZWN0ID0ge307XG5cdGpRdWVyeS5lYWNoKCBvcHRpb25zLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10sIGZ1bmN0aW9uKCBfLCBmbGFnICkge1xuXHRcdG9iamVjdFsgZmxhZyBdID0gdHJ1ZTtcblx0fSApO1xuXHRyZXR1cm4gb2JqZWN0O1xufVxuXG4vKlxuICogQ3JlYXRlIGEgY2FsbGJhY2sgbGlzdCB1c2luZyB0aGUgZm9sbG93aW5nIHBhcmFtZXRlcnM6XG4gKlxuICpcdG9wdGlvbnM6IGFuIG9wdGlvbmFsIGxpc3Qgb2Ygc3BhY2Utc2VwYXJhdGVkIG9wdGlvbnMgdGhhdCB3aWxsIGNoYW5nZSBob3dcbiAqXHRcdFx0dGhlIGNhbGxiYWNrIGxpc3QgYmVoYXZlcyBvciBhIG1vcmUgdHJhZGl0aW9uYWwgb3B0aW9uIG9iamVjdFxuICpcbiAqIEJ5IGRlZmF1bHQgYSBjYWxsYmFjayBsaXN0IHdpbGwgYWN0IGxpa2UgYW4gZXZlbnQgY2FsbGJhY2sgbGlzdCBhbmQgY2FuIGJlXG4gKiBcImZpcmVkXCIgbXVsdGlwbGUgdGltZXMuXG4gKlxuICogUG9zc2libGUgb3B0aW9uczpcbiAqXG4gKlx0b25jZTpcdFx0XHR3aWxsIGVuc3VyZSB0aGUgY2FsbGJhY2sgbGlzdCBjYW4gb25seSBiZSBmaXJlZCBvbmNlIChsaWtlIGEgRGVmZXJyZWQpXG4gKlxuICpcdG1lbW9yeTpcdFx0XHR3aWxsIGtlZXAgdHJhY2sgb2YgcHJldmlvdXMgdmFsdWVzIGFuZCB3aWxsIGNhbGwgYW55IGNhbGxiYWNrIGFkZGVkXG4gKlx0XHRcdFx0XHRhZnRlciB0aGUgbGlzdCBoYXMgYmVlbiBmaXJlZCByaWdodCBhd2F5IHdpdGggdGhlIGxhdGVzdCBcIm1lbW9yaXplZFwiXG4gKlx0XHRcdFx0XHR2YWx1ZXMgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0dW5pcXVlOlx0XHRcdHdpbGwgZW5zdXJlIGEgY2FsbGJhY2sgY2FuIG9ubHkgYmUgYWRkZWQgb25jZSAobm8gZHVwbGljYXRlIGluIHRoZSBsaXN0KVxuICpcbiAqXHRzdG9wT25GYWxzZTpcdGludGVycnVwdCBjYWxsaW5ncyB3aGVuIGEgY2FsbGJhY2sgcmV0dXJucyBmYWxzZVxuICpcbiAqL1xualF1ZXJ5LkNhbGxiYWNrcyA9IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdC8vIENvbnZlcnQgb3B0aW9ucyBmcm9tIFN0cmluZy1mb3JtYXR0ZWQgdG8gT2JqZWN0LWZvcm1hdHRlZCBpZiBuZWVkZWRcblx0Ly8gKHdlIGNoZWNrIGluIGNhY2hlIGZpcnN0KVxuXHRvcHRpb25zID0gdHlwZW9mIG9wdGlvbnMgPT09IFwic3RyaW5nXCIgP1xuXHRcdGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSA6XG5cdFx0alF1ZXJ5LmV4dGVuZCgge30sIG9wdGlvbnMgKTtcblxuXHR2YXIgLy8gRmxhZyB0byBrbm93IGlmIGxpc3QgaXMgY3VycmVudGx5IGZpcmluZ1xuXHRcdGZpcmluZyxcblxuXHRcdC8vIExhc3QgZmlyZSB2YWx1ZSBmb3Igbm9uLWZvcmdldHRhYmxlIGxpc3RzXG5cdFx0bWVtb3J5LFxuXG5cdFx0Ly8gRmxhZyB0byBrbm93IGlmIGxpc3Qgd2FzIGFscmVhZHkgZmlyZWRcblx0XHRmaXJlZCxcblxuXHRcdC8vIEZsYWcgdG8gcHJldmVudCBmaXJpbmdcblx0XHRsb2NrZWQsXG5cblx0XHQvLyBBY3R1YWwgY2FsbGJhY2sgbGlzdFxuXHRcdGxpc3QgPSBbXSxcblxuXHRcdC8vIFF1ZXVlIG9mIGV4ZWN1dGlvbiBkYXRhIGZvciByZXBlYXRhYmxlIGxpc3RzXG5cdFx0cXVldWUgPSBbXSxcblxuXHRcdC8vIEluZGV4IG9mIGN1cnJlbnRseSBmaXJpbmcgY2FsbGJhY2sgKG1vZGlmaWVkIGJ5IGFkZC9yZW1vdmUgYXMgbmVlZGVkKVxuXHRcdGZpcmluZ0luZGV4ID0gLTEsXG5cblx0XHQvLyBGaXJlIGNhbGxiYWNrc1xuXHRcdGZpcmUgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5mb3JjZSBzaW5nbGUtZmlyaW5nXG5cdFx0XHRsb2NrZWQgPSBsb2NrZWQgfHwgb3B0aW9ucy5vbmNlO1xuXG5cdFx0XHQvLyBFeGVjdXRlIGNhbGxiYWNrcyBmb3IgYWxsIHBlbmRpbmcgZXhlY3V0aW9ucyxcblx0XHRcdC8vIHJlc3BlY3RpbmcgZmlyaW5nSW5kZXggb3ZlcnJpZGVzIGFuZCBydW50aW1lIGNoYW5nZXNcblx0XHRcdGZpcmVkID0gZmlyaW5nID0gdHJ1ZTtcblx0XHRcdGZvciAoIDsgcXVldWUubGVuZ3RoOyBmaXJpbmdJbmRleCA9IC0xICkge1xuXHRcdFx0XHRtZW1vcnkgPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0XHR3aGlsZSAoICsrZmlyaW5nSW5kZXggPCBsaXN0Lmxlbmd0aCApIHtcblxuXHRcdFx0XHRcdC8vIFJ1biBjYWxsYmFjayBhbmQgY2hlY2sgZm9yIGVhcmx5IHRlcm1pbmF0aW9uXG5cdFx0XHRcdFx0aWYgKCBsaXN0WyBmaXJpbmdJbmRleCBdLmFwcGx5KCBtZW1vcnlbIDAgXSwgbWVtb3J5WyAxIF0gKSA9PT0gZmFsc2UgJiZcblx0XHRcdFx0XHRcdG9wdGlvbnMuc3RvcE9uRmFsc2UgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEp1bXAgdG8gZW5kIGFuZCBmb3JnZXQgdGhlIGRhdGEgc28gLmFkZCBkb2Vzbid0IHJlLWZpcmVcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGg7XG5cdFx0XHRcdFx0XHRtZW1vcnkgPSBmYWxzZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gRm9yZ2V0IHRoZSBkYXRhIGlmIHdlJ3JlIGRvbmUgd2l0aCBpdFxuXHRcdFx0aWYgKCAhb3B0aW9ucy5tZW1vcnkgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0fVxuXG5cdFx0XHRmaXJpbmcgPSBmYWxzZTtcblxuXHRcdFx0Ly8gQ2xlYW4gdXAgaWYgd2UncmUgZG9uZSBmaXJpbmcgZm9yIGdvb2Rcblx0XHRcdGlmICggbG9ja2VkICkge1xuXG5cdFx0XHRcdC8vIEtlZXAgYW4gZW1wdHkgbGlzdCBpZiB3ZSBoYXZlIGRhdGEgZm9yIGZ1dHVyZSBhZGQgY2FsbHNcblx0XHRcdFx0aWYgKCBtZW1vcnkgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IFtdO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSwgdGhpcyBvYmplY3QgaXMgc3BlbnRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRsaXN0ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvLyBBY3R1YWwgQ2FsbGJhY2tzIG9iamVjdFxuXHRcdHNlbGYgPSB7XG5cblx0XHRcdC8vIEFkZCBhIGNhbGxiYWNrIG9yIGEgY29sbGVjdGlvbiBvZiBjYWxsYmFja3MgdG8gdGhlIGxpc3Rcblx0XHRcdGFkZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblxuXHRcdFx0XHRcdC8vIElmIHdlIGhhdmUgbWVtb3J5IGZyb20gYSBwYXN0IHJ1biwgd2Ugc2hvdWxkIGZpcmUgYWZ0ZXIgYWRkaW5nXG5cdFx0XHRcdFx0aWYgKCBtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRcdGZpcmluZ0luZGV4ID0gbGlzdC5sZW5ndGggLSAxO1xuXHRcdFx0XHRcdFx0cXVldWUucHVzaCggbWVtb3J5ICk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0KCBmdW5jdGlvbiBhZGQoIGFyZ3MgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkuZWFjaCggYXJncywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCAhb3B0aW9ucy51bmlxdWUgfHwgIXNlbGYuaGFzKCBhcmcgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGxpc3QucHVzaCggYXJnICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBhcmcgJiYgYXJnLmxlbmd0aCAmJiBqUXVlcnkudHlwZSggYXJnICkgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBJbnNwZWN0IHJlY3Vyc2l2ZWx5XG5cdFx0XHRcdFx0XHRcdFx0YWRkKCBhcmcgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdH0gKSggYXJndW1lbnRzICk7XG5cblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhIGNhbGxiYWNrIGZyb20gdGhlIGxpc3Rcblx0XHRcdHJlbW92ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBfLCBhcmcgKSB7XG5cdFx0XHRcdFx0dmFyIGluZGV4O1xuXHRcdFx0XHRcdHdoaWxlICggKCBpbmRleCA9IGpRdWVyeS5pbkFycmF5KCBhcmcsIGxpc3QsIGluZGV4ICkgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0bGlzdC5zcGxpY2UoIGluZGV4LCAxICk7XG5cblx0XHRcdFx0XHRcdC8vIEhhbmRsZSBmaXJpbmcgaW5kZXhlc1xuXHRcdFx0XHRcdFx0aWYgKCBpbmRleCA8PSBmaXJpbmdJbmRleCApIHtcblx0XHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXgtLTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDaGVjayBpZiBhIGdpdmVuIGNhbGxiYWNrIGlzIGluIHRoZSBsaXN0LlxuXHRcdFx0Ly8gSWYgbm8gYXJndW1lbnQgaXMgZ2l2ZW4sIHJldHVybiB3aGV0aGVyIG9yIG5vdCBsaXN0IGhhcyBjYWxsYmFja3MgYXR0YWNoZWQuXG5cdFx0XHRoYXM6IGZ1bmN0aW9uKCBmbiApIHtcblx0XHRcdFx0cmV0dXJuIGZuID9cblx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggZm4sIGxpc3QgKSA+IC0xIDpcblx0XHRcdFx0XHRsaXN0Lmxlbmd0aCA+IDA7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBSZW1vdmUgYWxsIGNhbGxiYWNrcyBmcm9tIHRoZSBsaXN0XG5cdFx0XHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggbGlzdCApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBEaXNhYmxlIC5maXJlIGFuZCAuYWRkXG5cdFx0XHQvLyBBYm9ydCBhbnkgY3VycmVudC9wZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdC8vIENsZWFyIGFsbCBjYWxsYmFja3MgYW5kIHZhbHVlc1xuXHRcdFx0ZGlzYWJsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGxvY2tlZCA9IHF1ZXVlID0gW107XG5cdFx0XHRcdGxpc3QgPSBtZW1vcnkgPSBcIlwiO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRkaXNhYmxlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhbGlzdDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmVcblx0XHRcdC8vIEFsc28gZGlzYWJsZSAuYWRkIHVubGVzcyB3ZSBoYXZlIG1lbW9yeSAoc2luY2UgaXQgd291bGQgaGF2ZSBubyBlZmZlY3QpXG5cdFx0XHQvLyBBYm9ydCBhbnkgcGVuZGluZyBleGVjdXRpb25zXG5cdFx0XHRsb2NrOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0aWYgKCAhbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXHRcdFx0bG9ja2VkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhbG9ja2VkO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgY2FsbGJhY2tzIHdpdGggdGhlIGdpdmVuIGNvbnRleHQgYW5kIGFyZ3VtZW50c1xuXHRcdFx0ZmlyZVdpdGg6IGZ1bmN0aW9uKCBjb250ZXh0LCBhcmdzICkge1xuXHRcdFx0XHRpZiAoICFsb2NrZWQgKSB7XG5cdFx0XHRcdFx0YXJncyA9IGFyZ3MgfHwgW107XG5cdFx0XHRcdFx0YXJncyA9IFsgY29udGV4dCwgYXJncy5zbGljZSA/IGFyZ3Muc2xpY2UoKSA6IGFyZ3MgXTtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBhcmdzICk7XG5cdFx0XHRcdFx0aWYgKCAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyZSgpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENhbGwgYWxsIHRoZSBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gYXJndW1lbnRzXG5cdFx0XHRmaXJlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0c2VsZi5maXJlV2l0aCggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiB0aGUgY2FsbGJhY2tzIGhhdmUgYWxyZWFkeSBiZWVuIGNhbGxlZCBhdCBsZWFzdCBvbmNlXG5cdFx0XHRmaXJlZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAhIWZpcmVkO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0cmV0dXJuIHNlbGY7XG59O1xuXG5cbmZ1bmN0aW9uIElkZW50aXR5KCB2ICkge1xuXHRyZXR1cm4gdjtcbn1cbmZ1bmN0aW9uIFRocm93ZXIoIGV4ICkge1xuXHR0aHJvdyBleDtcbn1cblxuZnVuY3Rpb24gYWRvcHRWYWx1ZSggdmFsdWUsIHJlc29sdmUsIHJlamVjdCwgbm9WYWx1ZSApIHtcblx0dmFyIG1ldGhvZDtcblxuXHR0cnkge1xuXG5cdFx0Ly8gQ2hlY2sgZm9yIHByb21pc2UgYXNwZWN0IGZpcnN0IHRvIHByaXZpbGVnZSBzeW5jaHJvbm91cyBiZWhhdmlvclxuXHRcdGlmICggdmFsdWUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oICggbWV0aG9kID0gdmFsdWUucHJvbWlzZSApICkgKSB7XG5cdFx0XHRtZXRob2QuY2FsbCggdmFsdWUgKS5kb25lKCByZXNvbHZlICkuZmFpbCggcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciB0aGVuYWJsZXNcblx0XHR9IGVsc2UgaWYgKCB2YWx1ZSAmJiBqUXVlcnkuaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0galF1ZXJ5LmlzRnVuY3Rpb24oIGZuc1sgdHVwbGVbIDQgXSBdICkgJiYgZm5zWyB0dXBsZVsgNCBdIF07XG5cblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQucHJvZ3Jlc3MoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIubm90aWZ5IH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmRvbmUoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVzb2x2ZSB9KVxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5mYWlsKGZ1bmN0aW9uKCkgeyBiaW5kIHRvIG5ld0RlZmVyIG9yIG5ld0RlZmVyLnJlamVjdCB9KVxuXHRcdFx0XHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDEgXSBdKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgcmV0dXJuZWQgPSBmbiAmJiBmbi5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCAmJiBqUXVlcnkuaXNGdW5jdGlvbiggcmV0dXJuZWQucHJvbWlzZSApICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQucHJvbWlzZSgpXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5wcm9ncmVzcyggbmV3RGVmZXIubm90aWZ5IClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmRvbmUoIG5ld0RlZmVyLnJlc29sdmUgKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQuZmFpbCggbmV3RGVmZXIucmVqZWN0ICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXShcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhpcyxcblx0XHRcdFx0XHRcdFx0XHRcdFx0Zm4gPyBbIHJldHVybmVkIF0gOiBhcmd1bWVudHNcblx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHRmbnMgPSBudWxsO1xuXHRcdFx0XHRcdH0gKS5wcm9taXNlKCk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHRoZW46IGZ1bmN0aW9uKCBvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCwgb25Qcm9ncmVzcyApIHtcblx0XHRcdFx0XHR2YXIgbWF4RGVwdGggPSAwO1xuXHRcdFx0XHRcdGZ1bmN0aW9uIHJlc29sdmUoIGRlcHRoLCBkZWZlcnJlZCwgaGFuZGxlciwgc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRoYXQgPSB0aGlzLFxuXHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBhcmd1bWVudHMsXG5cdFx0XHRcdFx0XHRcdFx0bWlnaHRUaHJvdyA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dmFyIHJldHVybmVkLCB0aGVuO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4zLjMuM1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTlcblx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBkb3VibGUtcmVzb2x1dGlvbiBhdHRlbXB0c1xuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCA8IG1heERlcHRoICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkID0gaGFuZGxlci5hcHBseSggdGhhdCwgYXJncyApO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy4xXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC00OFxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCByZXR1cm5lZCA9PT0gZGVmZXJyZWQucHJvbWlzZSgpICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCBcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiICk7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb25zIDIuMy4zLjEsIDMuNVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNTRcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTc1XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBSZXRyaWV2ZSBgdGhlbmAgb25seSBvbmNlXG5cdFx0XHRcdFx0XHRcdFx0XHR0aGVuID0gcmV0dXJuZWQgJiZcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9uIDIuMy40XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTY0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIE9ubHkgY2hlY2sgb2JqZWN0cyBhbmQgZnVuY3Rpb25zIGZvciB0aGVuYWJpbGl0eVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHR5cGVvZiByZXR1cm5lZCA9PT0gXCJvYmplY3RcIiB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiByZXR1cm5lZCA9PT0gXCJmdW5jdGlvblwiICkgJiZcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQudGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGEgcmV0dXJuZWQgdGhlbmFibGVcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvblByb2dyZXNzICkgP1xuXHRcdFx0XHRcdFx0XHRcdFx0b25Qcm9ncmVzcyA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eSxcblx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlci5ub3RpZnlXaXRoXG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDEgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5pc0Z1bmN0aW9uKCBvbkZ1bGZpbGxlZCApID9cblx0XHRcdFx0XHRcdFx0XHRcdG9uRnVsZmlsbGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5XG5cdFx0XHRcdFx0XHRcdClcblx0XHRcdFx0XHRcdCk7XG5cblx0XHRcdFx0XHRcdC8vIHJlamVjdGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMiBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19jYWxsYmFja3MubG9ja1xuXHRcdFx0XHRcdHR1cGxlc1sgMCBdWyAyIF0ubG9ja1xuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5maXJlXG5cdFx0XHQvLyBmdWxmaWxsZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0Ly8gcmVqZWN0ZWRfaGFuZGxlcnMuZmlyZVxuXHRcdFx0bGlzdC5hZGQoIHR1cGxlWyAzIF0uZmlyZSApO1xuXG5cdFx0XHQvLyBkZWZlcnJlZC5ub3RpZnkgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQubm90aWZ5V2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmUgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVzb2x2ZVdpdGgoLi4uKSB9XG5cdFx0XHQvLyBkZWZlcnJlZC5yZWplY3QgPSBmdW5jdGlvbigpIHsgZGVmZXJyZWQucmVqZWN0V2l0aCguLi4pIH1cblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gKyBcIldpdGhcIiBdKCB0aGlzID09PSBkZWZlcnJlZCA/IHVuZGVmaW5lZCA6IHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH07XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeVdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHQvLyBkZWZlcnJlZC5yZXNvbHZlV2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdFdpdGggPSBsaXN0LmZpcmVXaXRoXG5cdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0gPSBsaXN0LmZpcmVXaXRoO1xuXHRcdH0gKTtcblxuXHRcdC8vIE1ha2UgdGhlIGRlZmVycmVkIGEgcHJvbWlzZVxuXHRcdHByb21pc2UucHJvbWlzZSggZGVmZXJyZWQgKTtcblxuXHRcdC8vIENhbGwgZ2l2ZW4gZnVuYyBpZiBhbnlcblx0XHRpZiAoIGZ1bmMgKSB7XG5cdFx0XHRmdW5jLmNhbGwoIGRlZmVycmVkLCBkZWZlcnJlZCApO1xuXHRcdH1cblxuXHRcdC8vIEFsbCBkb25lIVxuXHRcdHJldHVybiBkZWZlcnJlZDtcblx0fSxcblxuXHQvLyBEZWZlcnJlZCBoZWxwZXJcblx0d2hlbjogZnVuY3Rpb24oIHNpbmdsZVZhbHVlICkge1xuXHRcdHZhclxuXG5cdFx0XHQvLyBjb3VudCBvZiB1bmNvbXBsZXRlZCBzdWJvcmRpbmF0ZXNcblx0XHRcdHJlbWFpbmluZyA9IGFyZ3VtZW50cy5sZW5ndGgsXG5cblx0XHRcdC8vIGNvdW50IG9mIHVucHJvY2Vzc2VkIGFyZ3VtZW50c1xuXHRcdFx0aSA9IHJlbWFpbmluZyxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgZnVsZmlsbG1lbnQgZGF0YVxuXHRcdFx0cmVzb2x2ZUNvbnRleHRzID0gQXJyYXkoIGkgKSxcblx0XHRcdHJlc29sdmVWYWx1ZXMgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSxcblxuXHRcdFx0Ly8gdGhlIG1hc3RlciBEZWZlcnJlZFxuXHRcdFx0bWFzdGVyID0galF1ZXJ5LkRlZmVycmVkKCksXG5cblx0XHRcdC8vIHN1Ym9yZGluYXRlIGNhbGxiYWNrIGZhY3Rvcnlcblx0XHRcdHVwZGF0ZUZ1bmMgPSBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXNvbHZlQ29udGV4dHNbIGkgXSA9IHRoaXM7XG5cdFx0XHRcdFx0cmVzb2x2ZVZhbHVlc1sgaSBdID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBzbGljZS5jYWxsKCBhcmd1bWVudHMgKSA6IHZhbHVlO1xuXHRcdFx0XHRcdGlmICggISggLS1yZW1haW5pbmcgKSApIHtcblx0XHRcdFx0XHRcdG1hc3Rlci5yZXNvbHZlV2l0aCggcmVzb2x2ZUNvbnRleHRzLCByZXNvbHZlVmFsdWVzICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblxuXHRcdC8vIFNpbmdsZS0gYW5kIGVtcHR5IGFyZ3VtZW50cyBhcmUgYWRvcHRlZCBsaWtlIFByb21pc2UucmVzb2x2ZVxuXHRcdGlmICggcmVtYWluaW5nIDw9IDEgKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCBzaW5nbGVWYWx1ZSwgbWFzdGVyLmRvbmUoIHVwZGF0ZUZ1bmMoIGkgKSApLnJlc29sdmUsIG1hc3Rlci5yZWplY3QsXG5cdFx0XHRcdCFyZW1haW5pbmcgKTtcblxuXHRcdFx0Ly8gVXNlIC50aGVuKCkgdG8gdW53cmFwIHNlY29uZGFyeSB0aGVuYWJsZXMgKGNmLiBnaC0zMDAwKVxuXHRcdFx0aWYgKCBtYXN0ZXIuc3RhdGUoKSA9PT0gXCJwZW5kaW5nXCIgfHxcblx0XHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHJlc29sdmVWYWx1ZXNbIGkgXSAmJiByZXNvbHZlVmFsdWVzWyBpIF0udGhlbiApICkge1xuXG5cdFx0XHRcdHJldHVybiBtYXN0ZXIudGhlbigpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIE11bHRpcGxlIGFyZ3VtZW50cyBhcmUgYWdncmVnYXRlZCBsaWtlIFByb21pc2UuYWxsIGFycmF5IGVsZW1lbnRzXG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRhZG9wdFZhbHVlKCByZXNvbHZlVmFsdWVzWyBpIF0sIHVwZGF0ZUZ1bmMoIGkgKSwgbWFzdGVyLnJlamVjdCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBtYXN0ZXIucHJvbWlzZSgpO1xuXHR9XG59ICk7XG5cblxuLy8gVGhlc2UgdXN1YWxseSBpbmRpY2F0ZSBhIHByb2dyYW1tZXIgbWlzdGFrZSBkdXJpbmcgZGV2ZWxvcG1lbnQsXG4vLyB3YXJuIGFib3V0IHRoZW0gQVNBUCByYXRoZXIgdGhhbiBzd2FsbG93aW5nIHRoZW0gYnkgZGVmYXVsdC5cbnZhciByZXJyb3JOYW1lcyA9IC9eKEV2YWx8SW50ZXJuYWx8UmFuZ2V8UmVmZXJlbmNlfFN5bnRheHxUeXBlfFVSSSlFcnJvciQvO1xuXG5qUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayA9IGZ1bmN0aW9uKCBlcnJvciwgc3RhY2sgKSB7XG5cblx0Ly8gU3VwcG9ydDogSUUgOCAtIDkgb25seVxuXHQvLyBDb25zb2xlIGV4aXN0cyB3aGVuIGRldiB0b29scyBhcmUgb3Blbiwgd2hpY2ggY2FuIGhhcHBlbiBhdCBhbnkgdGltZVxuXHRpZiAoIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLndhcm4gJiYgZXJyb3IgJiYgcmVycm9yTmFtZXMudGVzdCggZXJyb3IubmFtZSApICkge1xuXHRcdHdpbmRvdy5jb25zb2xlLndhcm4oIFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIgKyBlcnJvci5tZXNzYWdlLCBlcnJvci5zdGFjaywgc3RhY2sgKTtcblx0fVxufTtcblxuXG5cblxualF1ZXJ5LnJlYWR5RXhjZXB0aW9uID0gZnVuY3Rpb24oIGVycm9yICkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0dGhyb3cgZXJyb3I7XG5cdH0gKTtcbn07XG5cblxuXG5cbi8vIFRoZSBkZWZlcnJlZCB1c2VkIG9uIERPTSByZWFkeVxudmFyIHJlYWR5TGlzdCA9IGpRdWVyeS5EZWZlcnJlZCgpO1xuXG5qUXVlcnkuZm4ucmVhZHkgPSBmdW5jdGlvbiggZm4gKSB7XG5cblx0cmVhZHlMaXN0XG5cdFx0LnRoZW4oIGZuIClcblxuXHRcdC8vIFdyYXAgalF1ZXJ5LnJlYWR5RXhjZXB0aW9uIGluIGEgZnVuY3Rpb24gc28gdGhhdCB0aGUgbG9va3VwXG5cdFx0Ly8gaGFwcGVucyBhdCB0aGUgdGltZSBvZiBlcnJvciBoYW5kbGluZyBpbnN0ZWFkIG9mIGNhbGxiYWNrXG5cdFx0Ly8gcmVnaXN0cmF0aW9uLlxuXHRcdC5jYXRjaCggZnVuY3Rpb24oIGVycm9yICkge1xuXHRcdFx0alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKCBlcnJvciApO1xuXHRcdH0gKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmpRdWVyeS5leHRlbmQoIHtcblxuXHQvLyBJcyB0aGUgRE9NIHJlYWR5IHRvIGJlIHVzZWQ/IFNldCB0byB0cnVlIG9uY2UgaXQgb2NjdXJzLlxuXHRpc1JlYWR5OiBmYWxzZSxcblxuXHQvLyBBIGNvdW50ZXIgdG8gdHJhY2sgaG93IG1hbnkgaXRlbXMgdG8gd2FpdCBmb3IgYmVmb3JlXG5cdC8vIHRoZSByZWFkeSBldmVudCBmaXJlcy4gU2VlICM2NzgxXG5cdHJlYWR5V2FpdDogMSxcblxuXHQvLyBIYW5kbGUgd2hlbiB0aGUgRE9NIGlzIHJlYWR5XG5cdHJlYWR5OiBmdW5jdGlvbiggd2FpdCApIHtcblxuXHRcdC8vIEFib3J0IGlmIHRoZXJlIGFyZSBwZW5kaW5nIGhvbGRzIG9yIHdlJ3JlIGFscmVhZHkgcmVhZHlcblx0XHRpZiAoIHdhaXQgPT09IHRydWUgPyAtLWpRdWVyeS5yZWFkeVdhaXQgOiBqUXVlcnkuaXNSZWFkeSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciB0aGF0IHRoZSBET00gaXMgcmVhZHlcblx0XHRqUXVlcnkuaXNSZWFkeSA9IHRydWU7XG5cblx0XHQvLyBJZiBhIG5vcm1hbCBET00gUmVhZHkgZXZlbnQgZmlyZWQsIGRlY3JlbWVudCwgYW5kIHdhaXQgaWYgbmVlZCBiZVxuXHRcdGlmICggd2FpdCAhPT0gdHJ1ZSAmJiAtLWpRdWVyeS5yZWFkeVdhaXQgPiAwICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIElmIHRoZXJlIGFyZSBmdW5jdGlvbnMgYm91bmQsIHRvIGV4ZWN1dGVcblx0XHRyZWFkeUxpc3QucmVzb2x2ZVdpdGgoIGRvY3VtZW50LCBbIGpRdWVyeSBdICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LnJlYWR5LnRoZW4gPSByZWFkeUxpc3QudGhlbjtcblxuLy8gVGhlIHJlYWR5IGV2ZW50IGhhbmRsZXIgYW5kIHNlbGYgY2xlYW51cCBtZXRob2RcbmZ1bmN0aW9uIGNvbXBsZXRlZCgpIHtcblx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXHR3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xuXHRqUXVlcnkucmVhZHkoKTtcbn1cblxuLy8gQ2F0Y2ggY2FzZXMgd2hlcmUgJChkb2N1bWVudCkucmVhZHkoKSBpcyBjYWxsZWRcbi8vIGFmdGVyIHRoZSBicm93c2VyIGV2ZW50IGhhcyBhbHJlYWR5IG9jY3VycmVkLlxuLy8gU3VwcG9ydDogSUUgPD05IC0gMTAgb25seVxuLy8gT2xkZXIgSUUgc29tZXRpbWVzIHNpZ25hbHMgXCJpbnRlcmFjdGl2ZVwiIHRvbyBzb29uXG5pZiAoIGRvY3VtZW50LnJlYWR5U3RhdGUgPT09IFwiY29tcGxldGVcIiB8fFxuXHQoIGRvY3VtZW50LnJlYWR5U3RhdGUgIT09IFwibG9hZGluZ1wiICYmICFkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZG9TY3JvbGwgKSApIHtcblxuXHQvLyBIYW5kbGUgaXQgYXN5bmNocm9ub3VzbHkgdG8gYWxsb3cgc2NyaXB0cyB0aGUgb3Bwb3J0dW5pdHkgdG8gZGVsYXkgcmVhZHlcblx0d2luZG93LnNldFRpbWVvdXQoIGpRdWVyeS5yZWFkeSApO1xuXG59IGVsc2Uge1xuXG5cdC8vIFVzZSB0aGUgaGFuZHkgZXZlbnQgY2FsbGJhY2tcblx0ZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggXCJET01Db250ZW50TG9hZGVkXCIsIGNvbXBsZXRlZCApO1xuXG5cdC8vIEEgZmFsbGJhY2sgdG8gd2luZG93Lm9ubG9hZCwgdGhhdCB3aWxsIGFsd2F5cyB3b3JrXG5cdHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcImxvYWRcIiwgY29tcGxldGVkICk7XG59XG5cblxuXG5cbi8vIE11bHRpZnVuY3Rpb25hbCBtZXRob2QgdG8gZ2V0IGFuZCBzZXQgdmFsdWVzIG9mIGEgY29sbGVjdGlvblxuLy8gVGhlIHZhbHVlL3MgY2FuIG9wdGlvbmFsbHkgYmUgZXhlY3V0ZWQgaWYgaXQncyBhIGZ1bmN0aW9uXG52YXIgYWNjZXNzID0gZnVuY3Rpb24oIGVsZW1zLCBmbiwga2V5LCB2YWx1ZSwgY2hhaW5hYmxlLCBlbXB0eUdldCwgcmF3ICkge1xuXHR2YXIgaSA9IDAsXG5cdFx0bGVuID0gZWxlbXMubGVuZ3RoLFxuXHRcdGJ1bGsgPSBrZXkgPT0gbnVsbDtcblxuXHQvLyBTZXRzIG1hbnkgdmFsdWVzXG5cdGlmICggalF1ZXJ5LnR5cGUoIGtleSApID09PSBcIm9iamVjdFwiICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cdFx0Zm9yICggaSBpbiBrZXkgKSB7XG5cdFx0XHRhY2Nlc3MoIGVsZW1zLCBmbiwgaSwga2V5WyBpIF0sIHRydWUsIGVtcHR5R2V0LCByYXcgKTtcblx0XHR9XG5cblx0Ly8gU2V0cyBvbmUgdmFsdWVcblx0fSBlbHNlIGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRjaGFpbmFibGUgPSB0cnVlO1xuXG5cdFx0aWYgKCAhalF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICkgKSB7XG5cdFx0XHRyYXcgPSB0cnVlO1xuXHRcdH1cblxuXHRcdGlmICggYnVsayApIHtcblxuXHRcdFx0Ly8gQnVsayBvcGVyYXRpb25zIHJ1biBhZ2FpbnN0IHRoZSBlbnRpcmUgc2V0XG5cdFx0XHRpZiAoIHJhdyApIHtcblx0XHRcdFx0Zm4uY2FsbCggZWxlbXMsIHZhbHVlICk7XG5cdFx0XHRcdGZuID0gbnVsbDtcblxuXHRcdFx0Ly8gLi4uZXhjZXB0IHdoZW4gZXhlY3V0aW5nIGZ1bmN0aW9uIHZhbHVlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0YnVsayA9IGZuO1xuXHRcdFx0XHRmbiA9IGZ1bmN0aW9uKCBlbGVtLCBrZXksIHZhbHVlICkge1xuXHRcdFx0XHRcdHJldHVybiBidWxrLmNhbGwoIGpRdWVyeSggZWxlbSApLCB2YWx1ZSApO1xuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggZm4gKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRcdFx0Zm4oXG5cdFx0XHRcdFx0ZWxlbXNbIGkgXSwga2V5LCByYXcgP1xuXHRcdFx0XHRcdHZhbHVlIDpcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCBlbGVtc1sgaSBdLCBpLCBmbiggZWxlbXNbIGkgXSwga2V5ICkgKVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggY2hhaW5hYmxlICkge1xuXHRcdHJldHVybiBlbGVtcztcblx0fVxuXG5cdC8vIEdldHNcblx0aWYgKCBidWxrICkge1xuXHRcdHJldHVybiBmbi5jYWxsKCBlbGVtcyApO1xuXHR9XG5cblx0cmV0dXJuIGxlbiA/IGZuKCBlbGVtc1sgMCBdLCBrZXkgKSA6IGVtcHR5R2V0O1xufTtcbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBqUXVlcnkuY2FtZWxDYXNlKCBkYXRhICkgXSA9IHZhbHVlO1xuXG5cdFx0Ly8gSGFuZGxlOiBbIG93bmVyLCB7IHByb3BlcnRpZXMgfSBdIGFyZ3Ncblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBDb3B5IHRoZSBwcm9wZXJ0aWVzIG9uZS1ieS1vbmUgdG8gdGhlIGNhY2hlIG9iamVjdFxuXHRcdFx0Zm9yICggcHJvcCBpbiBkYXRhICkge1xuXHRcdFx0XHRjYWNoZVsgalF1ZXJ5LmNhbWVsQ2FzZSggcHJvcCApIF0gPSBkYXRhWyBwcm9wIF07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBjYWNoZTtcblx0fSxcblx0Z2V0OiBmdW5jdGlvbiggb3duZXIsIGtleSApIHtcblx0XHRyZXR1cm4ga2V5ID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcy5jYWNoZSggb3duZXIgKSA6XG5cblx0XHRcdC8vIEFsd2F5cyB1c2UgY2FtZWxDYXNlIGtleSAoZ2gtMjI1Nylcblx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSAmJiBvd25lclsgdGhpcy5leHBhbmRvIF1bIGpRdWVyeS5jYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggalF1ZXJ5LmNhbWVsQ2FzZSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0a2V5ID0galF1ZXJ5LmNhbWVsQ2FzZSgga2V5ICk7XG5cblx0XHRcdFx0Ly8gSWYgYSBrZXkgd2l0aCB0aGUgc3BhY2VzIGV4aXN0cywgdXNlIGl0LlxuXHRcdFx0XHQvLyBPdGhlcndpc2UsIGNyZWF0ZSBhbiBhcnJheSBieSBtYXRjaGluZyBub24td2hpdGVzcGFjZVxuXHRcdFx0XHRrZXkgPSBrZXkgaW4gY2FjaGUgP1xuXHRcdFx0XHRcdFsga2V5IF0gOlxuXHRcdFx0XHRcdCgga2V5Lm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW10gKTtcblx0XHRcdH1cblxuXHRcdFx0aSA9IGtleS5sZW5ndGg7XG5cblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRkZWxldGUgY2FjaGVbIGtleVsgaSBdIF07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUmVtb3ZlIHRoZSBleHBhbmRvIGlmIHRoZXJlJ3Mgbm8gbW9yZSBkYXRhXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCB8fCBqUXVlcnkuaXNFbXB0eU9iamVjdCggY2FjaGUgKSApIHtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NVxuXHRcdFx0Ly8gV2Via2l0ICYgQmxpbmsgcGVyZm9ybWFuY2Ugc3VmZmVycyB3aGVuIGRlbGV0aW5nIHByb3BlcnRpZXNcblx0XHRcdC8vIGZyb20gRE9NIG5vZGVzLCBzbyBzZXQgdG8gdW5kZWZpbmVkIGluc3RlYWRcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTM3ODYwNyAoYnVnIHJlc3RyaWN0ZWQpXG5cdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRkZWxldGUgb3duZXJbIHRoaXMuZXhwYW5kbyBdO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0aGFzRGF0YTogZnVuY3Rpb24oIG93bmVyICkge1xuXHRcdHZhciBjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRyZXR1cm4gY2FjaGUgIT09IHVuZGVmaW5lZCAmJiAhalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICk7XG5cdH1cbn07XG52YXIgZGF0YVByaXYgPSBuZXcgRGF0YSgpO1xuXG52YXIgZGF0YVVzZXIgPSBuZXcgRGF0YSgpO1xuXG5cblxuLy9cdEltcGxlbWVudGF0aW9uIFN1bW1hcnlcbi8vXG4vL1x0MS4gRW5mb3JjZSBBUEkgc3VyZmFjZSBhbmQgc2VtYW50aWMgY29tcGF0aWJpbGl0eSB3aXRoIDEuOS54IGJyYW5jaFxuLy9cdDIuIEltcHJvdmUgdGhlIG1vZHVsZSdzIG1haW50YWluYWJpbGl0eSBieSByZWR1Y2luZyB0aGUgc3RvcmFnZVxuLy9cdFx0cGF0aHMgdG8gYSBzaW5nbGUgbWVjaGFuaXNtLlxuLy9cdDMuIFVzZSB0aGUgc2FtZSBzaW5nbGUgbWVjaGFuaXNtIHRvIHN1cHBvcnQgXCJwcml2YXRlXCIgYW5kIFwidXNlclwiIGRhdGEuXG4vL1x0NC4gX05ldmVyXyBleHBvc2UgXCJwcml2YXRlXCIgZGF0YSB0byB1c2VyIGNvZGUgKFRPRE86IERyb3AgX2RhdGEsIF9yZW1vdmVEYXRhKVxuLy9cdDUuIEF2b2lkIGV4cG9zaW5nIGltcGxlbWVudGF0aW9uIGRldGFpbHMgb24gdXNlciBvYmplY3RzIChlZy4gZXhwYW5kbyBwcm9wZXJ0aWVzKVxuLy9cdDYuIFByb3ZpZGUgYSBjbGVhciBwYXRoIGZvciBpbXBsZW1lbnRhdGlvbiB1cGdyYWRlIHRvIFdlYWtNYXAgaW4gMjAxNFxuXG52YXIgcmJyYWNlID0gL14oPzpcXHtbXFx3XFxXXSpcXH18XFxbW1xcd1xcV10qXFxdKSQvLFxuXHRybXVsdGlEYXNoID0gL1tBLVpdL2c7XG5cbmZ1bmN0aW9uIGdldERhdGEoIGRhdGEgKSB7XG5cdGlmICggZGF0YSA9PT0gXCJ0cnVlXCIgKSB7XG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwiZmFsc2VcIiApIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRpZiAoIGRhdGEgPT09IFwibnVsbFwiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gT25seSBjb252ZXJ0IHRvIGEgbnVtYmVyIGlmIGl0IGRvZXNuJ3QgY2hhbmdlIHRoZSBzdHJpbmdcblx0aWYgKCBkYXRhID09PSArZGF0YSArIFwiXCIgKSB7XG5cdFx0cmV0dXJuICtkYXRhO1xuXHR9XG5cblx0aWYgKCByYnJhY2UudGVzdCggZGF0YSApICkge1xuXHRcdHJldHVybiBKU09OLnBhcnNlKCBkYXRhICk7XG5cdH1cblxuXHRyZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gZGF0YUF0dHIoIGVsZW0sIGtleSwgZGF0YSApIHtcblx0dmFyIG5hbWU7XG5cblx0Ly8gSWYgbm90aGluZyB3YXMgZm91bmQgaW50ZXJuYWxseSwgdHJ5IHRvIGZldGNoIGFueVxuXHQvLyBkYXRhIGZyb20gdGhlIEhUTUw1IGRhdGEtKiBhdHRyaWJ1dGVcblx0aWYgKCBkYXRhID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRuYW1lID0gXCJkYXRhLVwiICsga2V5LnJlcGxhY2UoIHJtdWx0aURhc2gsIFwiLSQmXCIgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdGRhdGEgPSBlbGVtLmdldEF0dHJpYnV0ZSggbmFtZSApO1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGRhdGEgPSBnZXREYXRhKCBkYXRhICk7XG5cdFx0XHR9IGNhdGNoICggZSApIHt9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGRhdGEgc28gaXQgaXNuJ3QgY2hhbmdlZCBsYXRlclxuXHRcdFx0ZGF0YVVzZXIuc2V0KCBlbGVtLCBrZXksIGRhdGEgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aGFzRGF0YTogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmhhc0RhdGEoIGVsZW0gKSB8fCBkYXRhUHJpdi5oYXNEYXRhKCBlbGVtICk7XG5cdH0sXG5cblx0ZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFVc2VyLmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdHJlbW92ZURhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lICkge1xuXHRcdGRhdGFVc2VyLnJlbW92ZSggZWxlbSwgbmFtZSApO1xuXHR9LFxuXG5cdC8vIFRPRE86IE5vdyB0aGF0IGFsbCBjYWxscyB0byBfZGF0YSBhbmQgX3JlbW92ZURhdGEgaGF2ZSBiZWVuIHJlcGxhY2VkXG5cdC8vIHdpdGggZGlyZWN0IGNhbGxzIHRvIGRhdGFQcml2IG1ldGhvZHMsIHRoZXNlIGNhbiBiZSBkZXByZWNhdGVkLlxuXHRfZGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGRhdGEgKSB7XG5cdFx0cmV0dXJuIGRhdGFQcml2LmFjY2VzcyggZWxlbSwgbmFtZSwgZGF0YSApO1xuXHR9LFxuXG5cdF9yZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRhdGE6IGZ1bmN0aW9uKCBrZXksIHZhbHVlICkge1xuXHRcdHZhciBpLCBuYW1lLCBkYXRhLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdGF0dHJzID0gZWxlbSAmJiBlbGVtLmF0dHJpYnV0ZXM7XG5cblx0XHQvLyBHZXRzIGFsbCB2YWx1ZXNcblx0XHRpZiAoIGtleSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB0aGlzLmxlbmd0aCApIHtcblx0XHRcdFx0ZGF0YSA9IGRhdGFVc2VyLmdldCggZWxlbSApO1xuXG5cdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAhZGF0YVByaXYuZ2V0KCBlbGVtLCBcImhhc0RhdGFBdHRyc1wiICkgKSB7XG5cdFx0XHRcdFx0aSA9IGF0dHJzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0XHRcdFx0Ly8gVGhlIGF0dHJzIGVsZW1lbnRzIGNhbiBiZSBudWxsICgjMTQ4OTQpXG5cdFx0XHRcdFx0XHRpZiAoIGF0dHJzWyBpIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG5hbWUgPSBhdHRyc1sgaSBdLm5hbWU7XG5cdFx0XHRcdFx0XHRcdGlmICggbmFtZS5pbmRleE9mKCBcImRhdGEtXCIgKSA9PT0gMCApIHtcblx0XHRcdFx0XHRcdFx0XHRuYW1lID0galF1ZXJ5LmNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLFxuXHRcdHNjYWxlID0gMSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gVHJ1c3QgdW5pdHMgcmVwb3J0ZWQgYnkgalF1ZXJ5LmNzc1xuXHRcdHVuaXQgPSB1bml0IHx8IGluaXRpYWxJblVuaXRbIDMgXTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblxuXHRcdC8vIEl0ZXJhdGl2ZWx5IGFwcHJveGltYXRlIGZyb20gYSBub256ZXJvIHN0YXJ0aW5nIHBvaW50XG5cdFx0aW5pdGlhbEluVW5pdCA9ICtpbml0aWFsIHx8IDE7XG5cblx0XHRkbyB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIGl0ZXJhdGlvbiB6ZXJvZWQgb3V0LCBkb3VibGUgdW50aWwgd2UgZ2V0ICpzb21ldGhpbmcqLlxuXHRcdFx0Ly8gVXNlIHN0cmluZyBmb3IgZG91Ymxpbmcgc28gd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IHNlZSBzY2FsZSBhcyB1bmNoYW5nZWQgYmVsb3dcblx0XHRcdHNjYWxlID0gc2NhbGUgfHwgXCIuNVwiO1xuXG5cdFx0XHQvLyBBZGp1c3QgYW5kIGFwcGx5XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBpbml0aWFsSW5Vbml0ICsgdW5pdCApO1xuXG5cdFx0Ly8gVXBkYXRlIHNjYWxlLCB0b2xlcmF0aW5nIHplcm8gb3IgTmFOIGZyb20gdHdlZW4uY3VyKClcblx0XHQvLyBCcmVhayB0aGUgbG9vcCBpZiBzY2FsZSBpcyB1bmNoYW5nZWQgb3IgcGVyZmVjdCwgb3IgaWYgd2UndmUganVzdCBoYWQgZW5vdWdoLlxuXHRcdH0gd2hpbGUgKFxuXHRcdFx0c2NhbGUgIT09ICggc2NhbGUgPSBjdXJyZW50VmFsdWUoKSAvIGluaXRpYWwgKSAmJiBzY2FsZSAhPT0gMSAmJiAtLW1heEl0ZXJhdGlvbnNcblx0XHQpO1xuXHR9XG5cblx0aWYgKCB2YWx1ZVBhcnRzICkge1xuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbEluVW5pdCB8fCAraW5pdGlhbCB8fCAwO1xuXG5cdFx0Ly8gQXBwbHkgcmVsYXRpdmUgb2Zmc2V0ICgrPS8tPSkgaWYgc3BlY2lmaWVkXG5cdFx0YWRqdXN0ZWQgPSB2YWx1ZVBhcnRzWyAxIF0gP1xuXHRcdFx0aW5pdGlhbEluVW5pdCArICggdmFsdWVQYXJ0c1sgMSBdICsgMSApICogdmFsdWVQYXJ0c1sgMiBdIDpcblx0XHRcdCt2YWx1ZVBhcnRzWyAyIF07XG5cdFx0aWYgKCB0d2VlbiApIHtcblx0XHRcdHR3ZWVuLnVuaXQgPSB1bml0O1xuXHRcdFx0dHdlZW4uc3RhcnQgPSBpbml0aWFsSW5Vbml0O1xuXHRcdFx0dHdlZW4uZW5kID0gYWRqdXN0ZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBhZGp1c3RlZDtcbn1cblxuXG52YXIgZGVmYXVsdERpc3BsYXlNYXAgPSB7fTtcblxuZnVuY3Rpb24gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKSB7XG5cdHZhciB0ZW1wLFxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudCxcblx0XHRub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUsXG5cdFx0ZGlzcGxheSA9IGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdO1xuXG5cdGlmICggZGlzcGxheSApIHtcblx0XHRyZXR1cm4gZGlzcGxheTtcblx0fVxuXG5cdHRlbXAgPSBkb2MuYm9keS5hcHBlbmRDaGlsZCggZG9jLmNyZWF0ZUVsZW1lbnQoIG5vZGVOYW1lICkgKTtcblx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIHRlbXAsIFwiZGlzcGxheVwiICk7XG5cblx0dGVtcC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCB0ZW1wICk7XG5cblx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRkaXNwbGF5ID0gXCJibG9ja1wiO1xuXHR9XG5cdGRlZmF1bHREaXNwbGF5TWFwWyBub2RlTmFtZSBdID0gZGlzcGxheTtcblxuXHRyZXR1cm4gZGlzcGxheTtcbn1cblxuZnVuY3Rpb24gc2hvd0hpZGUoIGVsZW1lbnRzLCBzaG93ICkge1xuXHR2YXIgZGlzcGxheSwgZWxlbSxcblx0XHR2YWx1ZXMgPSBbXSxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gZWxlbWVudHMubGVuZ3RoO1xuXG5cdC8vIERldGVybWluZSBuZXcgZGlzcGxheSB2YWx1ZSBmb3IgZWxlbWVudHMgdGhhdCBuZWVkIHRvIGNoYW5nZVxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGVsZW0gPSBlbGVtZW50c1sgaW5kZXggXTtcblx0XHRpZiAoICFlbGVtLnN0eWxlICkge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0ZGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheTtcblx0XHRpZiAoIHNob3cgKSB7XG5cblx0XHRcdC8vIFNpbmNlIHdlIGZvcmNlIHZpc2liaWxpdHkgdXBvbiBjYXNjYWRlLWhpZGRlbiBlbGVtZW50cywgYW4gaW1tZWRpYXRlIChhbmQgc2xvdylcblx0XHRcdC8vIGNoZWNrIGlzIHJlcXVpcmVkIGluIHRoaXMgZmlyc3QgbG9vcCB1bmxlc3Mgd2UgaGF2ZSBhIG5vbmVtcHR5IGRpc3BsYXkgdmFsdWUgKGVpdGhlclxuXHRcdFx0Ly8gaW5saW5lIG9yIGFib3V0LXRvLWJlLXJlc3RvcmVkKVxuXHRcdFx0aWYgKCBkaXNwbGF5ID09PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApIHx8IG51bGw7XG5cdFx0XHRcdGlmICggIXZhbHVlc1sgaW5kZXggXSApIHtcblx0XHRcdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVsZW0uc3R5bGUuZGlzcGxheSA9PT0gXCJcIiAmJiBpc0hpZGRlbldpdGhpblRyZWUoIGVsZW0gKSApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gZ2V0RGVmYXVsdERpc3BsYXkoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKCBkaXNwbGF5ICE9PSBcIm5vbmVcIiApIHtcblx0XHRcdFx0dmFsdWVzWyBpbmRleCBdID0gXCJub25lXCI7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgd2hhdCB3ZSdyZSBvdmVyd3JpdGluZ1xuXHRcdFx0XHRkYXRhUHJpdi5zZXQoIGVsZW0sIFwiZGlzcGxheVwiLCBkaXNwbGF5ICk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2V0IHRoZSBkaXNwbGF5IG9mIHRoZSBlbGVtZW50cyBpbiBhIHNlY29uZCBsb29wIHRvIGF2b2lkIGNvbnN0YW50IHJlZmxvd1xuXHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggdmFsdWVzWyBpbmRleCBdICE9IG51bGwgKSB7XG5cdFx0XHRlbGVtZW50c1sgaW5kZXggXS5zdHlsZS5kaXNwbGF5ID0gdmFsdWVzWyBpbmRleCBdO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRzaG93OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gc2hvd0hpZGUoIHRoaXMsIHRydWUgKTtcblx0fSxcblx0aGlkZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzICk7XG5cdH0sXG5cdHRvZ2dsZTogZnVuY3Rpb24oIHN0YXRlICkge1xuXHRcdGlmICggdHlwZW9mIHN0YXRlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdHJldHVybiBzdGF0ZSA/IHRoaXMuc2hvdygpIDogdGhpcy5oaWRlKCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGlzSGlkZGVuV2l0aGluVHJlZSggdGhpcyApICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5zaG93KCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5oaWRlKCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG52YXIgcmNoZWNrYWJsZVR5cGUgPSAoIC9eKD86Y2hlY2tib3h8cmFkaW8pJC9pICk7XG5cbnZhciBydGFnTmFtZSA9ICggLzwoW2Etel1bXlxcL1xcMD5cXHgyMFxcdFxcclxcblxcZl0rKS9pICk7XG5cbnZhciByc2NyaXB0VHlwZSA9ICggL14kfFxcLyg/OmphdmF8ZWNtYSlzY3JpcHQvaSApO1xuXG5cblxuLy8gV2UgaGF2ZSB0byBjbG9zZSB0aGVzZSB0YWdzIHRvIHN1cHBvcnQgWEhUTUwgKCMxMzIwMClcbnZhciB3cmFwTWFwID0ge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdG9wdGlvbjogWyAxLCBcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIiwgXCI8L3NlbGVjdD5cIiBdLFxuXG5cdC8vIFhIVE1MIHBhcnNlcnMgZG8gbm90IG1hZ2ljYWxseSBpbnNlcnQgZWxlbWVudHMgaW4gdGhlXG5cdC8vIHNhbWUgd2F5IHRoYXQgdGFnIHNvdXAgcGFyc2VycyBkby4gU28gd2UgY2Fubm90IHNob3J0ZW5cblx0Ly8gdGhpcyBieSBvbWl0dGluZyA8dGJvZHk+IG9yIG90aGVyIHJlcXVpcmVkIGVsZW1lbnRzLlxuXHR0aGVhZDogWyAxLCBcIjx0YWJsZT5cIiwgXCI8L3RhYmxlPlwiIF0sXG5cdGNvbDogWyAyLCBcIjx0YWJsZT48Y29sZ3JvdXA+XCIsIFwiPC9jb2xncm91cD48L3RhYmxlPlwiIF0sXG5cdHRyOiBbIDIsIFwiPHRhYmxlPjx0Ym9keT5cIiwgXCI8L3Rib2R5PjwvdGFibGU+XCIgXSxcblx0dGQ6IFsgMywgXCI8dGFibGU+PHRib2R5Pjx0cj5cIiwgXCI8L3RyPjwvdGJvZHk+PC90YWJsZT5cIiBdLFxuXG5cdF9kZWZhdWx0OiBbIDAsIFwiXCIsIFwiXCIgXVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbndyYXBNYXAub3B0Z3JvdXAgPSB3cmFwTWFwLm9wdGlvbjtcblxud3JhcE1hcC50Ym9keSA9IHdyYXBNYXAudGZvb3QgPSB3cmFwTWFwLmNvbGdyb3VwID0gd3JhcE1hcC5jYXB0aW9uID0gd3JhcE1hcC50aGVhZDtcbndyYXBNYXAudGggPSB3cmFwTWFwLnRkO1xuXG5cbmZ1bmN0aW9uIGdldEFsbCggY29udGV4dCwgdGFnICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gVXNlIHR5cGVvZiB0byBhdm9pZCB6ZXJvLWFyZ3VtZW50IG1ldGhvZCBpbnZvY2F0aW9uIG9uIGhvc3Qgb2JqZWN0cyAoIzE1MTUxKVxuXHR2YXIgcmV0O1xuXG5cdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnIHx8IFwiKlwiICk7XG5cblx0fSBlbHNlIGlmICggdHlwZW9mIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCAhPT0gXCJ1bmRlZmluZWRcIiApIHtcblx0XHRyZXQgPSBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSB7XG5cdFx0cmV0ID0gW107XG5cdH1cblxuXHRpZiAoIHRhZyA9PT0gdW5kZWZpbmVkIHx8IHRhZyAmJiBub2RlTmFtZSggY29udGV4dCwgdGFnICkgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5tZXJnZSggWyBjb250ZXh0IF0sIHJldCApO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuXG4vLyBNYXJrIHNjcmlwdHMgYXMgaGF2aW5nIGFscmVhZHkgYmVlbiBldmFsdWF0ZWRcbmZ1bmN0aW9uIHNldEdsb2JhbEV2YWwoIGVsZW1zLCByZWZFbGVtZW50cyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGwgPSBlbGVtcy5sZW5ndGg7XG5cblx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdGRhdGFQcml2LnNldChcblx0XHRcdGVsZW1zWyBpIF0sXG5cdFx0XHRcImdsb2JhbEV2YWxcIixcblx0XHRcdCFyZWZFbGVtZW50cyB8fCBkYXRhUHJpdi5nZXQoIHJlZkVsZW1lbnRzWyBpIF0sIFwiZ2xvYmFsRXZhbFwiIClcblx0XHQpO1xuXHR9XG59XG5cblxudmFyIHJodG1sID0gLzx8JiM/XFx3KzsvO1xuXG5mdW5jdGlvbiBidWlsZEZyYWdtZW50KCBlbGVtcywgY29udGV4dCwgc2NyaXB0cywgc2VsZWN0aW9uLCBpZ25vcmVkICkge1xuXHR2YXIgZWxlbSwgdG1wLCB0YWcsIHdyYXAsIGNvbnRhaW5zLCBqLFxuXHRcdGZyYWdtZW50ID0gY29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksXG5cdFx0bm9kZXMgPSBbXSxcblx0XHRpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRlbGVtID0gZWxlbXNbIGkgXTtcblxuXHRcdGlmICggZWxlbSB8fCBlbGVtID09PSAwICkge1xuXG5cdFx0XHQvLyBBZGQgbm9kZXMgZGlyZWN0bHlcblx0XHRcdGlmICggalF1ZXJ5LnR5cGUoIGVsZW0gKSA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHksIFBoYW50b21KUyAxIG9ubHlcblx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIG5vZGVzLCBlbGVtLm5vZGVUeXBlID8gWyBlbGVtIF0gOiBlbGVtICk7XG5cblx0XHRcdC8vIENvbnZlcnQgbm9uLWh0bWwgaW50byBhIHRleHQgbm9kZVxuXHRcdFx0fSBlbHNlIGlmICggIXJodG1sLnRlc3QoIGVsZW0gKSApIHtcblx0XHRcdFx0bm9kZXMucHVzaCggY29udGV4dC5jcmVhdGVUZXh0Tm9kZSggZWxlbSApICk7XG5cblx0XHRcdC8vIENvbnZlcnQgaHRtbCBpbnRvIERPTSBub2Rlc1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dG1wID0gdG1wIHx8IGZyYWdtZW50LmFwcGVuZENoaWxkKCBjb250ZXh0LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSApO1xuXG5cdFx0XHRcdC8vIERlc2VyaWFsaXplIGEgc3RhbmRhcmQgcmVwcmVzZW50YXRpb25cblx0XHRcdFx0dGFnID0gKCBydGFnTmFtZS5leGVjKCBlbGVtICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRcdHdyYXAgPSB3cmFwTWFwWyB0YWcgXSB8fCB3cmFwTWFwLl9kZWZhdWx0O1xuXHRcdFx0XHR0bXAuaW5uZXJIVE1MID0gd3JhcFsgMSBdICsgalF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIGVsZW0gKSArIHdyYXBbIDIgXTtcblxuXHRcdFx0XHQvLyBEZXNjZW5kIHRocm91Z2ggd3JhcHBlcnMgdG8gdGhlIHJpZ2h0IGNvbnRlbnRcblx0XHRcdFx0aiA9IHdyYXBbIDAgXTtcblx0XHRcdFx0d2hpbGUgKCBqLS0gKSB7XG5cdFx0XHRcdFx0dG1wID0gdG1wLmxhc3RDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIHRtcC5jaGlsZE5vZGVzICk7XG5cblx0XHRcdFx0Ly8gUmVtZW1iZXIgdGhlIHRvcC1sZXZlbCBjb250YWluZXJcblx0XHRcdFx0dG1wID0gZnJhZ21lbnQuZmlyc3RDaGlsZDtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhlIGNyZWF0ZWQgbm9kZXMgYXJlIG9ycGhhbmVkICgjMTIzOTIpXG5cdFx0XHRcdHRtcC50ZXh0Q29udGVudCA9IFwiXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gUmVtb3ZlIHdyYXBwZXIgZnJvbSBmcmFnbWVudFxuXHRmcmFnbWVudC50ZXh0Q29udGVudCA9IFwiXCI7XG5cblx0aSA9IDA7XG5cdHdoaWxlICggKCBlbGVtID0gbm9kZXNbIGkrKyBdICkgKSB7XG5cblx0XHQvLyBTa2lwIGVsZW1lbnRzIGFscmVhZHkgaW4gdGhlIGNvbnRleHQgY29sbGVjdGlvbiAodHJhYy00MDg3KVxuXHRcdGlmICggc2VsZWN0aW9uICYmIGpRdWVyeS5pbkFycmF5KCBlbGVtLCBzZWxlY3Rpb24gKSA+IC0xICkge1xuXHRcdFx0aWYgKCBpZ25vcmVkICkge1xuXHRcdFx0XHRpZ25vcmVkLnB1c2goIGVsZW0gKTtcblx0XHRcdH1cblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5zID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEFwcGVuZCB0byBmcmFnbWVudFxuXHRcdHRtcCA9IGdldEFsbCggZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGVsZW0gKSwgXCJzY3JpcHRcIiApO1xuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGlmICggY29udGFpbnMgKSB7XG5cdFx0XHRzZXRHbG9iYWxFdmFsKCB0bXAgKTtcblx0XHR9XG5cblx0XHQvLyBDYXB0dXJlIGV4ZWN1dGFibGVzXG5cdFx0aWYgKCBzY3JpcHRzICkge1xuXHRcdFx0aiA9IDA7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRtcFsgaisrIF0gKSApIHtcblx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBlbGVtLnR5cGUgfHwgXCJcIiApICkge1xuXHRcdFx0XHRcdHNjcmlwdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGZyYWdtZW50O1xufVxuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKSxcblx0XHRkaXYgPSBmcmFnbWVudC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICksXG5cdFx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDQuMCAtIDQuMyBvbmx5XG5cdC8vIENoZWNrIHN0YXRlIGxvc3QgaWYgdGhlIG5hbWUgaXMgc2V0ICgjMTEyMTcpXG5cdC8vIFN1cHBvcnQ6IFdpbmRvd3MgV2ViIEFwcHMgKFdXQSlcblx0Ly8gYG5hbWVgIGFuZCBgdHlwZWAgbXVzdCB1c2UgLnNldEF0dHJpYnV0ZSBmb3IgV1dBICgjMTQ5MDEpXG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIFwicmFkaW9cIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwiY2hlY2tlZFwiLCBcImNoZWNrZWRcIiApO1xuXHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcInRcIiApO1xuXG5cdGRpdi5hcHBlbmRDaGlsZCggaW5wdXQgKTtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4xIG9ubHlcblx0Ly8gT2xkZXIgV2ViS2l0IGRvZXNuJ3QgY2xvbmUgY2hlY2tlZCBzdGF0ZSBjb3JyZWN0bHkgaW4gZnJhZ21lbnRzXG5cdHN1cHBvcnQuY2hlY2tDbG9uZSA9IGRpdi5jbG9uZU5vZGUoIHRydWUgKS5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuY2hlY2tlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTWFrZSBzdXJlIHRleHRhcmVhIChhbmQgY2hlY2tib3gpIGRlZmF1bHRWYWx1ZSBpcyBwcm9wZXJseSBjbG9uZWRcblx0ZGl2LmlubmVySFRNTCA9IFwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiO1xuXHRzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkID0gISFkaXYuY2xvbmVOb2RlKCB0cnVlICkubGFzdENoaWxkLmRlZmF1bHRWYWx1ZTtcbn0gKSgpO1xudmFyIGRvY3VtZW50RWxlbWVudCA9IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcblxuXG5cbnZhclxuXHRya2V5RXZlbnQgPSAvXmtleS8sXG5cdHJtb3VzZUV2ZW50ID0gL14oPzptb3VzZXxwb2ludGVyfGNvbnRleHRtZW51fGRyYWd8ZHJvcCl8Y2xpY2svLFxuXHRydHlwZW5hbWVzcGFjZSA9IC9eKFteLl0qKSg/OlxcLiguKyl8KS87XG5cbmZ1bmN0aW9uIHJldHVyblRydWUoKSB7XG5cdHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiByZXR1cm5GYWxzZSgpIHtcblx0cmV0dXJuIGZhbHNlO1xufVxuXG4vLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuLy8gU2VlICMxMzM5MyBmb3IgbW9yZSBpbmZvXG5mdW5jdGlvbiBzYWZlQWN0aXZlRWxlbWVudCgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcblx0fSBjYXRjaCAoIGVyciApIHsgfVxufVxuXG5mdW5jdGlvbiBvbiggZWxlbSwgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgb25lICkge1xuXHR2YXIgb3JpZ0ZuLCB0eXBlO1xuXG5cdC8vIFR5cGVzIGNhbiBiZSBhIG1hcCBvZiB0eXBlcy9oYW5kbGVyc1xuXHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdC8vICggdHlwZXMtT2JqZWN0LCBzZWxlY3RvciwgZGF0YSApXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMtT2JqZWN0LCBkYXRhIClcblx0XHRcdGRhdGEgPSBkYXRhIHx8IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRvbiggZWxlbSwgdHlwZSwgc2VsZWN0b3IsIGRhdGEsIHR5cGVzWyB0eXBlIF0sIG9uZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggZGF0YSA9PSBudWxsICYmIGZuID09IG51bGwgKSB7XG5cblx0XHQvLyAoIHR5cGVzLCBmbiApXG5cdFx0Zm4gPSBzZWxlY3Rvcjtcblx0XHRkYXRhID0gc2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdH0gZWxzZSBpZiAoIGZuID09IG51bGwgKSB7XG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMsIHNlbGVjdG9yLCBmbiApXG5cdFx0XHRmbiA9IGRhdGE7XG5cdFx0XHRkYXRhID0gdW5kZWZpbmVkO1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vICggdHlwZXMsIGRhdGEsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSBzZWxlY3Rvcjtcblx0XHRcdHNlbGVjdG9yID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0fVxuXHRpZiAoIGZuID09PSBmYWxzZSApIHtcblx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHR9IGVsc2UgaWYgKCAhZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW07XG5cdH1cblxuXHRpZiAoIG9uZSA9PT0gMSApIHtcblx0XHRvcmlnRm4gPSBmbjtcblx0XHRmbiA9IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0Ly8gQ2FuIHVzZSBhbiBlbXB0eSBzZXQsIHNpbmNlIGV2ZW50IGNvbnRhaW5zIHRoZSBpbmZvXG5cdFx0XHRqUXVlcnkoKS5vZmYoIGV2ZW50ICk7XG5cdFx0XHRyZXR1cm4gb3JpZ0ZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHR9O1xuXG5cdFx0Ly8gVXNlIHNhbWUgZ3VpZCBzbyBjYWxsZXIgY2FuIHJlbW92ZSB1c2luZyBvcmlnRm5cblx0XHRmbi5ndWlkID0gb3JpZ0ZuLmd1aWQgfHwgKCBvcmlnRm4uZ3VpZCA9IGpRdWVyeS5ndWlkKysgKTtcblx0fVxuXHRyZXR1cm4gZWxlbS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRqUXVlcnkuZXZlbnQuYWRkKCB0aGlzLCB0eXBlcywgZm4sIGRhdGEsIHNlbGVjdG9yICk7XG5cdH0gKTtcbn1cblxuLypcbiAqIEhlbHBlciBmdW5jdGlvbnMgZm9yIG1hbmFnaW5nIGV2ZW50cyAtLSBub3QgcGFydCBvZiB0aGUgcHVibGljIGludGVyZmFjZS5cbiAqIFByb3BzIHRvIERlYW4gRWR3YXJkcycgYWRkRXZlbnQgbGlicmFyeSBmb3IgbWFueSBvZiB0aGUgaWRlYXMuXG4gKi9cbmpRdWVyeS5ldmVudCA9IHtcblxuXHRnbG9iYWw6IHt9LFxuXG5cdGFkZDogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBkYXRhLCBzZWxlY3RvciApIHtcblxuXHRcdHZhciBoYW5kbGVPYmpJbiwgZXZlbnRIYW5kbGUsIHRtcCxcblx0XHRcdGV2ZW50cywgdCwgaGFuZGxlT2JqLFxuXHRcdFx0c3BlY2lhbCwgaGFuZGxlcnMsIHR5cGUsIG5hbWVzcGFjZXMsIG9yaWdUeXBlLFxuXHRcdFx0ZWxlbURhdGEgPSBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdC8vIERvbid0IGF0dGFjaCBldmVudHMgdG8gbm9EYXRhIG9yIHRleHQvY29tbWVudCBub2RlcyAoYnV0IGFsbG93IHBsYWluIG9iamVjdHMpXG5cdFx0aWYgKCAhZWxlbURhdGEgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGVyIGNhbiBwYXNzIGluIGFuIG9iamVjdCBvZiBjdXN0b20gZGF0YSBpbiBsaWV1IG9mIHRoZSBoYW5kbGVyXG5cdFx0aWYgKCBoYW5kbGVyLmhhbmRsZXIgKSB7XG5cdFx0XHRoYW5kbGVPYmpJbiA9IGhhbmRsZXI7XG5cdFx0XHRoYW5kbGVyID0gaGFuZGxlT2JqSW4uaGFuZGxlcjtcblx0XHRcdHNlbGVjdG9yID0gaGFuZGxlT2JqSW4uc2VsZWN0b3I7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHRoYXQgaW52YWxpZCBzZWxlY3RvcnMgdGhyb3cgZXhjZXB0aW9ucyBhdCBhdHRhY2ggdGltZVxuXHRcdC8vIEV2YWx1YXRlIGFnYWluc3QgZG9jdW1lbnRFbGVtZW50IGluIGNhc2UgZWxlbSBpcyBhIG5vbi1lbGVtZW50IG5vZGUgKGUuZy4sIGRvY3VtZW50KVxuXHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoIGRvY3VtZW50RWxlbWVudCwgc2VsZWN0b3IgKTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB0aGUgaGFuZGxlciBoYXMgYSB1bmlxdWUgSUQsIHVzZWQgdG8gZmluZC9yZW1vdmUgaXQgbGF0ZXJcblx0XHRpZiAoICFoYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRoYW5kbGVyLmd1aWQgPSBqUXVlcnkuZ3VpZCsrO1xuXHRcdH1cblxuXHRcdC8vIEluaXQgdGhlIGVsZW1lbnQncyBldmVudCBzdHJ1Y3R1cmUgYW5kIG1haW4gaGFuZGxlciwgaWYgdGhpcyBpcyB0aGUgZmlyc3Rcblx0XHRpZiAoICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0ZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzID0ge307XG5cdFx0fVxuXHRcdGlmICggISggZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgKSApIHtcblx0XHRcdGV2ZW50SGFuZGxlID0gZWxlbURhdGEuaGFuZGxlID0gZnVuY3Rpb24oIGUgKSB7XG5cblx0XHRcdFx0Ly8gRGlzY2FyZCB0aGUgc2Vjb25kIGV2ZW50IG9mIGEgalF1ZXJ5LmV2ZW50LnRyaWdnZXIoKSBhbmRcblx0XHRcdFx0Ly8gd2hlbiBhbiBldmVudCBpcyBjYWxsZWQgYWZ0ZXIgYSBwYWdlIGhhcyB1bmxvYWRlZFxuXHRcdFx0XHRyZXR1cm4gdHlwZW9mIGpRdWVyeSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICE9PSBlLnR5cGUgP1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseSggZWxlbSwgYXJndW1lbnRzICkgOiB1bmRlZmluZWQ7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEhhbmRsZSBtdWx0aXBsZSBldmVudHMgc2VwYXJhdGVkIGJ5IGEgc3BhY2Vcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVGhlcmUgKm11c3QqIGJlIGEgdHlwZSwgbm8gYXR0YWNoaW5nIG5hbWVzcGFjZS1vbmx5IGhhbmRsZXJzXG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgZXZlbnQgY2hhbmdlcyBpdHMgdHlwZSwgdXNlIHRoZSBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzIGZvciB0aGUgY2hhbmdlZCB0eXBlXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblxuXHRcdFx0Ly8gSWYgc2VsZWN0b3IgZGVmaW5lZCwgZGV0ZXJtaW5lIHNwZWNpYWwgZXZlbnQgYXBpIHR5cGUsIG90aGVyd2lzZSBnaXZlbiB0eXBlXG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cblx0XHRcdC8vIFVwZGF0ZSBzcGVjaWFsIGJhc2VkIG9uIG5ld2x5IHJlc2V0IHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBoYW5kbGVPYmogaXMgcGFzc2VkIHRvIGFsbCBldmVudCBoYW5kbGVyc1xuXHRcdFx0aGFuZGxlT2JqID0galF1ZXJ5LmV4dGVuZCgge1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRvcmlnVHlwZTogb3JpZ1R5cGUsXG5cdFx0XHRcdGRhdGE6IGRhdGEsXG5cdFx0XHRcdGhhbmRsZXI6IGhhbmRsZXIsXG5cdFx0XHRcdGd1aWQ6IGhhbmRsZXIuZ3VpZCxcblx0XHRcdFx0c2VsZWN0b3I6IHNlbGVjdG9yLFxuXHRcdFx0XHRuZWVkc0NvbnRleHQ6IHNlbGVjdG9yICYmIGpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApLFxuXHRcdFx0XHRuYW1lc3BhY2U6IG5hbWVzcGFjZXMuam9pbiggXCIuXCIgKVxuXHRcdFx0fSwgaGFuZGxlT2JqSW4gKTtcblxuXHRcdFx0Ly8gSW5pdCB0aGUgZXZlbnQgaGFuZGxlciBxdWV1ZSBpZiB3ZSdyZSB0aGUgZmlyc3Rcblx0XHRcdGlmICggISggaGFuZGxlcnMgPSBldmVudHNbIHR5cGUgXSApICkge1xuXHRcdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdID0gW107XG5cdFx0XHRcdGhhbmRsZXJzLmRlbGVnYXRlQ291bnQgPSAwO1xuXG5cdFx0XHRcdC8vIE9ubHkgdXNlIGFkZEV2ZW50TGlzdGVuZXIgaWYgdGhlIHNwZWNpYWwgZXZlbnRzIGhhbmRsZXIgcmV0dXJucyBmYWxzZVxuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnNldHVwIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC5zZXR1cC5jYWxsKCBlbGVtLCBkYXRhLCBuYW1lc3BhY2VzLCBldmVudEhhbmRsZSApID09PSBmYWxzZSApIHtcblxuXHRcdFx0XHRcdGlmICggZWxlbS5hZGRFdmVudExpc3RlbmVyICkge1xuXHRcdFx0XHRcdFx0ZWxlbS5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBldmVudEhhbmRsZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHNwZWNpYWwuYWRkICkge1xuXHRcdFx0XHRzcGVjaWFsLmFkZC5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblxuXHRcdFx0XHRpZiAoICFoYW5kbGVPYmouaGFuZGxlci5ndWlkICkge1xuXHRcdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyLmd1aWQgPSBoYW5kbGVyLmd1aWQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIHRvIHRoZSBlbGVtZW50J3MgaGFuZGxlciBsaXN0LCBkZWxlZ2F0ZXMgaW4gZnJvbnRcblx0XHRcdGlmICggc2VsZWN0b3IgKSB7XG5cdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaGFuZGxlcnMuZGVsZWdhdGVDb3VudCsrLCAwLCBoYW5kbGVPYmogKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGhhbmRsZXJzLnB1c2goIGhhbmRsZU9iaiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBLZWVwIHRyYWNrIG9mIHdoaWNoIGV2ZW50cyBoYXZlIGV2ZXIgYmVlbiB1c2VkLCBmb3IgZXZlbnQgb3B0aW1pemF0aW9uXG5cdFx0XHRqUXVlcnkuZXZlbnQuZ2xvYmFsWyB0eXBlIF0gPSB0cnVlO1xuXHRcdH1cblxuXHR9LFxuXG5cdC8vIERldGFjaCBhbiBldmVudCBvciBzZXQgb2YgZXZlbnRzIGZyb20gYW4gZWxlbWVudFxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBlbGVtLCB0eXBlcywgaGFuZGxlciwgc2VsZWN0b3IsIG1hcHBlZFR5cGVzICkge1xuXG5cdFx0dmFyIGosIG9yaWdDb3VudCwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2Lmhhc0RhdGEoIGVsZW0gKSAmJiBkYXRhUHJpdi5nZXQoIGVsZW0gKTtcblxuXHRcdGlmICggIWVsZW1EYXRhIHx8ICEoIGV2ZW50cyA9IGVsZW1EYXRhLmV2ZW50cyApICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIE9uY2UgZm9yIGVhY2ggdHlwZS5uYW1lc3BhY2UgaW4gdHlwZXM7IHR5cGUgbWF5IGJlIG9taXR0ZWRcblx0XHR0eXBlcyA9ICggdHlwZXMgfHwgXCJcIiApLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgWyBcIlwiIF07XG5cdFx0dCA9IHR5cGVzLmxlbmd0aDtcblx0XHR3aGlsZSAoIHQtLSApIHtcblx0XHRcdHRtcCA9IHJ0eXBlbmFtZXNwYWNlLmV4ZWMoIHR5cGVzWyB0IF0gKSB8fCBbXTtcblx0XHRcdHR5cGUgPSBvcmlnVHlwZSA9IHRtcFsgMSBdO1xuXHRcdFx0bmFtZXNwYWNlcyA9ICggdG1wWyAyIF0gfHwgXCJcIiApLnNwbGl0KCBcIi5cIiApLnNvcnQoKTtcblxuXHRcdFx0Ly8gVW5iaW5kIGFsbCBldmVudHMgKG9uIHRoaXMgbmFtZXNwYWNlLCBpZiBwcm92aWRlZCkgZm9yIHRoZSBlbGVtZW50XG5cdFx0XHRpZiAoICF0eXBlICkge1xuXHRcdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCBlbGVtLCB0eXBlICsgdHlwZXNbIHQgXSwgaGFuZGxlciwgc2VsZWN0b3IsIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cdFx0XHR0eXBlID0gKCBzZWxlY3RvciA/IHNwZWNpYWwuZGVsZWdhdGVUeXBlIDogc3BlY2lhbC5iaW5kVHlwZSApIHx8IHR5cGU7XG5cdFx0XHRoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdIHx8IFtdO1xuXHRcdFx0dG1wID0gdG1wWyAyIF0gJiZcblx0XHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICk7XG5cblx0XHRcdC8vIFJlbW92ZSBtYXRjaGluZyBldmVudHNcblx0XHRcdG9yaWdDb3VudCA9IGogPSBoYW5kbGVycy5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGogXTtcblxuXHRcdFx0XHRpZiAoICggbWFwcGVkVHlwZXMgfHwgb3JpZ1R5cGUgPT09IGhhbmRsZU9iai5vcmlnVHlwZSApICYmXG5cdFx0XHRcdFx0KCAhaGFuZGxlciB8fCBoYW5kbGVyLmd1aWQgPT09IGhhbmRsZU9iai5ndWlkICkgJiZcblx0XHRcdFx0XHQoICF0bXAgfHwgdG1wLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApICYmXG5cdFx0XHRcdFx0KCAhc2VsZWN0b3IgfHwgc2VsZWN0b3IgPT09IGhhbmRsZU9iai5zZWxlY3RvciB8fFxuXHRcdFx0XHRcdFx0c2VsZWN0b3IgPT09IFwiKipcIiAmJiBoYW5kbGVPYmouc2VsZWN0b3IgKSApIHtcblx0XHRcdFx0XHRoYW5kbGVycy5zcGxpY2UoIGosIDEgKTtcblxuXHRcdFx0XHRcdGlmICggaGFuZGxlT2JqLnNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudC0tO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRpZiAoIHNwZWNpYWwucmVtb3ZlICkge1xuXHRcdFx0XHRcdFx0c3BlY2lhbC5yZW1vdmUuY2FsbCggZWxlbSwgaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBnZW5lcmljIGV2ZW50IGhhbmRsZXIgaWYgd2UgcmVtb3ZlZCBzb21ldGhpbmcgYW5kIG5vIG1vcmUgaGFuZGxlcnMgZXhpc3Rcblx0XHRcdC8vIChhdm9pZHMgcG90ZW50aWFsIGZvciBlbmRsZXNzIHJlY3Vyc2lvbiBkdXJpbmcgcmVtb3ZhbCBvZiBzcGVjaWFsIGV2ZW50IGhhbmRsZXJzKVxuXHRcdFx0aWYgKCBvcmlnQ291bnQgJiYgIWhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0aWYgKCAhc3BlY2lhbC50ZWFyZG93biB8fFxuXHRcdFx0XHRcdHNwZWNpYWwudGVhcmRvd24uY2FsbCggZWxlbSwgbmFtZXNwYWNlcywgZWxlbURhdGEuaGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBlbGVtRGF0YS5oYW5kbGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBldmVudHNbIHR5cGUgXTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBSZW1vdmUgZGF0YSBhbmQgdGhlIGV4cGFuZG8gaWYgaXQncyBubyBsb25nZXIgdXNlZFxuXHRcdGlmICggalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGV2ZW50cyApICkge1xuXHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBcImhhbmRsZSBldmVudHNcIiApO1xuXHRcdH1cblx0fSxcblxuXHRkaXNwYXRjaDogZnVuY3Rpb24oIG5hdGl2ZUV2ZW50ICkge1xuXG5cdFx0Ly8gTWFrZSBhIHdyaXRhYmxlIGpRdWVyeS5FdmVudCBmcm9tIHRoZSBuYXRpdmUgZXZlbnQgb2JqZWN0XG5cdFx0dmFyIGV2ZW50ID0galF1ZXJ5LmV2ZW50LmZpeCggbmF0aXZlRXZlbnQgKTtcblxuXHRcdHZhciBpLCBqLCByZXQsIG1hdGNoZWQsIGhhbmRsZU9iaiwgaGFuZGxlclF1ZXVlLFxuXHRcdFx0YXJncyA9IG5ldyBBcnJheSggYXJndW1lbnRzLmxlbmd0aCApLFxuXHRcdFx0aGFuZGxlcnMgPSAoIGRhdGFQcml2LmdldCggdGhpcywgXCJldmVudHNcIiApIHx8IHt9IClbIGV2ZW50LnR5cGUgXSB8fCBbXSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZXZlbnQudHlwZSBdIHx8IHt9O1xuXG5cdFx0Ly8gVXNlIHRoZSBmaXgtZWQgalF1ZXJ5LkV2ZW50IHJhdGhlciB0aGFuIHRoZSAocmVhZC1vbmx5KSBuYXRpdmUgZXZlbnRcblx0XHRhcmdzWyAwIF0gPSBldmVudDtcblxuXHRcdGZvciAoIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrICkge1xuXHRcdFx0YXJnc1sgaSBdID0gYXJndW1lbnRzWyBpIF07XG5cdFx0fVxuXG5cdFx0ZXZlbnQuZGVsZWdhdGVUYXJnZXQgPSB0aGlzO1xuXG5cdFx0Ly8gQ2FsbCB0aGUgcHJlRGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlLCBhbmQgbGV0IGl0IGJhaWwgaWYgZGVzaXJlZFxuXHRcdGlmICggc3BlY2lhbC5wcmVEaXNwYXRjaCAmJiBzcGVjaWFsLnByZURpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICkgPT09IGZhbHNlICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERldGVybWluZSBoYW5kbGVyc1xuXHRcdGhhbmRsZXJRdWV1ZSA9IGpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKCB0aGlzLCBldmVudCwgaGFuZGxlcnMgKTtcblxuXHRcdC8vIFJ1biBkZWxlZ2F0ZXMgZmlyc3Q7IHRoZXkgbWF5IHdhbnQgdG8gc3RvcCBwcm9wYWdhdGlvbiBiZW5lYXRoIHVzXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIG1hdGNoZWQgPSBoYW5kbGVyUXVldWVbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRldmVudC5jdXJyZW50VGFyZ2V0ID0gbWF0Y2hlZC5lbGVtO1xuXG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBoYW5kbGVPYmogPSBtYXRjaGVkLmhhbmRsZXJzWyBqKysgXSApICYmXG5cdFx0XHRcdCFldmVudC5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXG5cdFx0XHRcdC8vIFRyaWdnZXJlZCBldmVudCBtdXN0IGVpdGhlciAxKSBoYXZlIG5vIG5hbWVzcGFjZSwgb3IgMikgaGF2ZSBuYW1lc3BhY2Uocylcblx0XHRcdFx0Ly8gYSBzdWJzZXQgb3IgZXF1YWwgdG8gdGhvc2UgaW4gdGhlIGJvdW5kIGV2ZW50IChib3RoIGNhbiBoYXZlIG5vIG5hbWVzcGFjZSkuXG5cdFx0XHRcdGlmICggIWV2ZW50LnJuYW1lc3BhY2UgfHwgZXZlbnQucm5hbWVzcGFjZS50ZXN0KCBoYW5kbGVPYmoubmFtZXNwYWNlICkgKSB7XG5cblx0XHRcdFx0XHRldmVudC5oYW5kbGVPYmogPSBoYW5kbGVPYmo7XG5cdFx0XHRcdFx0ZXZlbnQuZGF0YSA9IGhhbmRsZU9iai5kYXRhO1xuXG5cdFx0XHRcdFx0cmV0ID0gKCAoIGpRdWVyeS5ldmVudC5zcGVjaWFsWyBoYW5kbGVPYmoub3JpZ1R5cGUgXSB8fCB7fSApLmhhbmRsZSB8fFxuXHRcdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIgKS5hcHBseSggbWF0Y2hlZC5lbGVtLCBhcmdzICk7XG5cblx0XHRcdFx0XHRpZiAoIHJldCAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGV2ZW50LnJlc3VsdCA9IHJldCApID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRcdFx0ZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbCB0aGUgcG9zdERpc3BhdGNoIGhvb2sgZm9yIHRoZSBtYXBwZWQgdHlwZVxuXHRcdGlmICggc3BlY2lhbC5wb3N0RGlzcGF0Y2ggKSB7XG5cdFx0XHRzcGVjaWFsLnBvc3REaXNwYXRjaC5jYWxsKCB0aGlzLCBldmVudCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC5yZXN1bHQ7XG5cdH0sXG5cblx0aGFuZGxlcnM6IGZ1bmN0aW9uKCBldmVudCwgaGFuZGxlcnMgKSB7XG5cdFx0dmFyIGksIGhhbmRsZU9iaiwgc2VsLCBtYXRjaGVkSGFuZGxlcnMsIG1hdGNoZWRTZWxlY3RvcnMsXG5cdFx0XHRoYW5kbGVyUXVldWUgPSBbXSxcblx0XHRcdGRlbGVnYXRlQ291bnQgPSBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LFxuXHRcdFx0Y3VyID0gZXZlbnQudGFyZ2V0O1xuXG5cdFx0Ly8gRmluZCBkZWxlZ2F0ZSBoYW5kbGVyc1xuXHRcdGlmICggZGVsZWdhdGVDb3VudCAmJlxuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTlcblx0XHRcdC8vIEJsYWNrLWhvbGUgU1ZHIDx1c2U+IGluc3RhbmNlIHRyZWVzICh0cmFjLTEzMTgwKVxuXHRcdFx0Y3VyLm5vZGVUeXBlICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggPD00MlxuXHRcdFx0Ly8gU3VwcHJlc3Mgc3BlYy12aW9sYXRpbmcgY2xpY2tzIGluZGljYXRpbmcgYSBub24tcHJpbWFyeSBwb2ludGVyIGJ1dHRvbiAodHJhYy0zODYxKVxuXHRcdFx0Ly8gaHR0cHM6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnQtdHlwZS1jbGlja1xuXHRcdFx0Ly8gU3VwcG9ydDogSUUgMTEgb25seVxuXHRcdFx0Ly8gLi4uYnV0IG5vdCBhcnJvdyBrZXkgXCJjbGlja3NcIiBvZiByYWRpbyBpbnB1dHMsIHdoaWNoIGNhbiBoYXZlIGBidXR0b25gIC0xIChnaC0yMzQzKVxuXHRcdFx0ISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGV2ZW50LmJ1dHRvbiA+PSAxICkgKSB7XG5cblx0XHRcdGZvciAoIDsgY3VyICE9PSB0aGlzOyBjdXIgPSBjdXIucGFyZW50Tm9kZSB8fCB0aGlzICkge1xuXG5cdFx0XHRcdC8vIERvbid0IGNoZWNrIG5vbi1lbGVtZW50cyAoIzEzMjA4KVxuXHRcdFx0XHQvLyBEb24ndCBwcm9jZXNzIGNsaWNrcyBvbiBkaXNhYmxlZCBlbGVtZW50cyAoIzY5MTEsICM4MTY1LCAjMTEzODIsICMxMTc2NClcblx0XHRcdFx0aWYgKCBjdXIubm9kZVR5cGUgPT09IDEgJiYgISggZXZlbnQudHlwZSA9PT0gXCJjbGlja1wiICYmIGN1ci5kaXNhYmxlZCA9PT0gdHJ1ZSApICkge1xuXHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycyA9IFtdO1xuXHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnMgPSB7fTtcblx0XHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGRlbGVnYXRlQ291bnQ7IGkrKyApIHtcblx0XHRcdFx0XHRcdGhhbmRsZU9iaiA9IGhhbmRsZXJzWyBpIF07XG5cblx0XHRcdFx0XHRcdC8vIERvbid0IGNvbmZsaWN0IHdpdGggT2JqZWN0LnByb3RvdHlwZSBwcm9wZXJ0aWVzICgjMTMyMDMpXG5cdFx0XHRcdFx0XHRzZWwgPSBoYW5kbGVPYmouc2VsZWN0b3IgKyBcIiBcIjtcblxuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkU2VsZWN0b3JzWyBzZWwgXSA9IGhhbmRsZU9iai5uZWVkc0NvbnRleHQgP1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeSggc2VsLCB0aGlzICkuaW5kZXgoIGN1ciApID4gLTEgOlxuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5maW5kKCBzZWwsIHRoaXMsIG51bGwsIFsgY3VyIF0gKS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdICkge1xuXHRcdFx0XHRcdFx0XHRtYXRjaGVkSGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggbWF0Y2hlZEhhbmRsZXJzLmxlbmd0aCApIHtcblx0XHRcdFx0XHRcdGhhbmRsZXJRdWV1ZS5wdXNoKCB7IGVsZW06IGN1ciwgaGFuZGxlcnM6IG1hdGNoZWRIYW5kbGVycyB9ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHRoZSByZW1haW5pbmcgKGRpcmVjdGx5LWJvdW5kKSBoYW5kbGVyc1xuXHRcdGN1ciA9IHRoaXM7XG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50IDwgaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogaGFuZGxlcnMuc2xpY2UoIGRlbGVnYXRlQ291bnQgKSB9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGhhbmRsZXJRdWV1ZTtcblx0fSxcblxuXHRhZGRQcm9wOiBmdW5jdGlvbiggbmFtZSwgaG9vayApIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIGpRdWVyeS5FdmVudC5wcm90b3R5cGUsIG5hbWUsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cblx0XHRcdGdldDogalF1ZXJ5LmlzRnVuY3Rpb24oIGhvb2sgKSA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gaG9vayggdGhpcy5vcmlnaW5hbEV2ZW50ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDpcblx0XHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm9yaWdpbmFsRXZlbnQgKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbIG5hbWUgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoIHRoaXMsIG5hbWUsIHtcblx0XHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR3cml0YWJsZTogdHJ1ZSxcblx0XHRcdFx0XHR2YWx1ZTogdmFsdWVcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRmaXg6IGZ1bmN0aW9uKCBvcmlnaW5hbEV2ZW50ICkge1xuXHRcdHJldHVybiBvcmlnaW5hbEV2ZW50WyBqUXVlcnkuZXhwYW5kbyBdID9cblx0XHRcdG9yaWdpbmFsRXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggb3JpZ2luYWxFdmVudCApO1xuXHR9LFxuXG5cdHNwZWNpYWw6IHtcblx0XHRsb2FkOiB7XG5cblx0XHRcdC8vIFByZXZlbnQgdHJpZ2dlcmVkIGltYWdlLmxvYWQgZXZlbnRzIGZyb20gYnViYmxpbmcgdG8gd2luZG93LmxvYWRcblx0XHRcdG5vQnViYmxlOiB0cnVlXG5cdFx0fSxcblx0XHRmb2N1czoge1xuXG5cdFx0XHQvLyBGaXJlIG5hdGl2ZSBldmVudCBpZiBwb3NzaWJsZSBzbyBibHVyL2ZvY3VzIHNlcXVlbmNlIGlzIGNvcnJlY3Rcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgIT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5mb2N1cyApIHtcblx0XHRcdFx0XHR0aGlzLmZvY3VzKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3VzaW5cIlxuXHRcdH0sXG5cdFx0Ymx1cjoge1xuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcyA9PT0gc2FmZUFjdGl2ZUVsZW1lbnQoKSAmJiB0aGlzLmJsdXIgKSB7XG5cdFx0XHRcdFx0dGhpcy5ibHVyKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0ZGVsZWdhdGVUeXBlOiBcImZvY3Vzb3V0XCJcblx0XHR9LFxuXHRcdGNsaWNrOiB7XG5cblx0XHRcdC8vIEZvciBjaGVja2JveCwgZmlyZSBuYXRpdmUgZXZlbnQgc28gY2hlY2tlZCBzdGF0ZSB3aWxsIGJlIHJpZ2h0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzLnR5cGUgPT09IFwiY2hlY2tib3hcIiAmJiB0aGlzLmNsaWNrICYmIG5vZGVOYW1lKCB0aGlzLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR0aGlzLmNsaWNrKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBGb3IgY3Jvc3MtYnJvd3NlciBjb25zaXN0ZW5jeSwgZG9uJ3QgZmlyZSBuYXRpdmUgLmNsaWNrKCkgb24gbGlua3Ncblx0XHRcdF9kZWZhdWx0OiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRcdHJldHVybiBub2RlTmFtZSggZXZlbnQudGFyZ2V0LCBcImFcIiApO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRiZWZvcmV1bmxvYWQ6IHtcblx0XHRcdHBvc3REaXNwYXRjaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEZpcmVmb3ggMjArXG5cdFx0XHRcdC8vIEZpcmVmb3ggZG9lc24ndCBhbGVydCBpZiB0aGUgcmV0dXJuVmFsdWUgZmllbGQgaXMgbm90IHNldC5cblx0XHRcdFx0aWYgKCBldmVudC5yZXN1bHQgIT09IHVuZGVmaW5lZCAmJiBldmVudC5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdGV2ZW50Lm9yaWdpbmFsRXZlbnQucmV0dXJuVmFsdWUgPSBldmVudC5yZXN1bHQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5yZW1vdmVFdmVudCA9IGZ1bmN0aW9uKCBlbGVtLCB0eXBlLCBoYW5kbGUgKSB7XG5cblx0Ly8gVGhpcyBcImlmXCIgaXMgbmVlZGVkIGZvciBwbGFpbiBvYmplY3RzXG5cdGlmICggZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyICkge1xuXHRcdGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgaGFuZGxlICk7XG5cdH1cbn07XG5cbmpRdWVyeS5FdmVudCA9IGZ1bmN0aW9uKCBzcmMsIHByb3BzICkge1xuXG5cdC8vIEFsbG93IGluc3RhbnRpYXRpb24gd2l0aG91dCB0aGUgJ25ldycga2V5d29yZFxuXHRpZiAoICEoIHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQgKSApIHtcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5FdmVudCggc3JjLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gRXZlbnQgb2JqZWN0XG5cdGlmICggc3JjICYmIHNyYy50eXBlICkge1xuXHRcdHRoaXMub3JpZ2luYWxFdmVudCA9IHNyYztcblx0XHR0aGlzLnR5cGUgPSBzcmMudHlwZTtcblxuXHRcdC8vIEV2ZW50cyBidWJibGluZyB1cCB0aGUgZG9jdW1lbnQgbWF5IGhhdmUgYmVlbiBtYXJrZWQgYXMgcHJldmVudGVkXG5cdFx0Ly8gYnkgYSBoYW5kbGVyIGxvd2VyIGRvd24gdGhlIHRyZWU7IHJlZmxlY3QgdGhlIGNvcnJlY3QgdmFsdWUuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSBzcmMuZGVmYXVsdFByZXZlbnRlZCB8fFxuXHRcdFx0XHRzcmMuZGVmYXVsdFByZXZlbnRlZCA9PT0gdW5kZWZpbmVkICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTIuMyBvbmx5XG5cdFx0XHRcdHNyYy5yZXR1cm5WYWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0cmV0dXJuVHJ1ZSA6XG5cdFx0XHRyZXR1cm5GYWxzZTtcblxuXHRcdC8vIENyZWF0ZSB0YXJnZXQgcHJvcGVydGllc1xuXHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA8PTYgLSA3IG9ubHlcblx0XHQvLyBUYXJnZXQgc2hvdWxkIG5vdCBiZSBhIHRleHQgbm9kZSAoIzUwNCwgIzEzMTQzKVxuXHRcdHRoaXMudGFyZ2V0ID0gKCBzcmMudGFyZ2V0ICYmIHNyYy50YXJnZXQubm9kZVR5cGUgPT09IDMgKSA/XG5cdFx0XHRzcmMudGFyZ2V0LnBhcmVudE5vZGUgOlxuXHRcdFx0c3JjLnRhcmdldDtcblxuXHRcdHRoaXMuY3VycmVudFRhcmdldCA9IHNyYy5jdXJyZW50VGFyZ2V0O1xuXHRcdHRoaXMucmVsYXRlZFRhcmdldCA9IHNyYy5yZWxhdGVkVGFyZ2V0O1xuXG5cdC8vIEV2ZW50IHR5cGVcblx0fSBlbHNlIHtcblx0XHR0aGlzLnR5cGUgPSBzcmM7XG5cdH1cblxuXHQvLyBQdXQgZXhwbGljaXRseSBwcm92aWRlZCBwcm9wZXJ0aWVzIG9udG8gdGhlIGV2ZW50IG9iamVjdFxuXHRpZiAoIHByb3BzICkge1xuXHRcdGpRdWVyeS5leHRlbmQoIHRoaXMsIHByb3BzICk7XG5cdH1cblxuXHQvLyBDcmVhdGUgYSB0aW1lc3RhbXAgaWYgaW5jb21pbmcgZXZlbnQgZG9lc24ndCBoYXZlIG9uZVxuXHR0aGlzLnRpbWVTdGFtcCA9IHNyYyAmJiBzcmMudGltZVN0YW1wIHx8IGpRdWVyeS5ub3coKTtcblxuXHQvLyBNYXJrIGl0IGFzIGZpeGVkXG5cdHRoaXNbIGpRdWVyeS5leHBhbmRvIF0gPSB0cnVlO1xufTtcblxuLy8galF1ZXJ5LkV2ZW50IGlzIGJhc2VkIG9uIERPTTMgRXZlbnRzIGFzIHNwZWNpZmllZCBieSB0aGUgRUNNQVNjcmlwdCBMYW5ndWFnZSBCaW5kaW5nXG4vLyBodHRwczovL3d3dy53My5vcmcvVFIvMjAwMy9XRC1ET00tTGV2ZWwtMy1FdmVudHMtMjAwMzAzMzEvZWNtYS1zY3JpcHQtYmluZGluZy5odG1sXG5qUXVlcnkuRXZlbnQucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogalF1ZXJ5LkV2ZW50LFxuXHRpc0RlZmF1bHRQcmV2ZW50ZWQ6IHJldHVybkZhbHNlLFxuXHRpc1Byb3BhZ2F0aW9uU3RvcHBlZDogcmV0dXJuRmFsc2UsXG5cdGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNTaW11bGF0ZWQ6IGZhbHNlLFxuXG5cdHByZXZlbnREZWZhdWx0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXHR9LFxuXHRzdG9wSW1tZWRpYXRlUHJvcGFnYXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCA9IHJldHVyblRydWU7XG5cblx0XHRpZiAoIGUgJiYgIXRoaXMuaXNTaW11bGF0ZWQgKSB7XG5cdFx0XHRlLnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuXHRcdH1cblxuXHRcdHRoaXMuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdH1cbn07XG5cbi8vIEluY2x1ZGVzIGFsbCBjb21tb24gZXZlbnQgcHJvcHMgaW5jbHVkaW5nIEtleUV2ZW50IGFuZCBNb3VzZUV2ZW50IHNwZWNpZmljIHByb3BzXG5qUXVlcnkuZWFjaCgge1xuXHRhbHRLZXk6IHRydWUsXG5cdGJ1YmJsZXM6IHRydWUsXG5cdGNhbmNlbGFibGU6IHRydWUsXG5cdGNoYW5nZWRUb3VjaGVzOiB0cnVlLFxuXHRjdHJsS2V5OiB0cnVlLFxuXHRkZXRhaWw6IHRydWUsXG5cdGV2ZW50UGhhc2U6IHRydWUsXG5cdG1ldGFLZXk6IHRydWUsXG5cdHBhZ2VYOiB0cnVlLFxuXHRwYWdlWTogdHJ1ZSxcblx0c2hpZnRLZXk6IHRydWUsXG5cdHZpZXc6IHRydWUsXG5cdFwiY2hhclwiOiB0cnVlLFxuXHRjaGFyQ29kZTogdHJ1ZSxcblx0a2V5OiB0cnVlLFxuXHRrZXlDb2RlOiB0cnVlLFxuXHRidXR0b246IHRydWUsXG5cdGJ1dHRvbnM6IHRydWUsXG5cdGNsaWVudFg6IHRydWUsXG5cdGNsaWVudFk6IHRydWUsXG5cdG9mZnNldFg6IHRydWUsXG5cdG9mZnNldFk6IHRydWUsXG5cdHBvaW50ZXJJZDogdHJ1ZSxcblx0cG9pbnRlclR5cGU6IHRydWUsXG5cdHNjcmVlblg6IHRydWUsXG5cdHNjcmVlblk6IHRydWUsXG5cdHRhcmdldFRvdWNoZXM6IHRydWUsXG5cdHRvRWxlbWVudDogdHJ1ZSxcblx0dG91Y2hlczogdHJ1ZSxcblxuXHR3aGljaDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdHZhciBidXR0b24gPSBldmVudC5idXR0b247XG5cblx0XHQvLyBBZGQgd2hpY2ggZm9yIGtleSBldmVudHNcblx0XHRpZiAoIGV2ZW50LndoaWNoID09IG51bGwgJiYgcmtleUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdHJldHVybiBldmVudC5jaGFyQ29kZSAhPSBudWxsID8gZXZlbnQuY2hhckNvZGUgOiBldmVudC5rZXlDb2RlO1xuXHRcdH1cblxuXHRcdC8vIEFkZCB3aGljaCBmb3IgY2xpY2s6IDEgPT09IGxlZnQ7IDIgPT09IG1pZGRsZTsgMyA9PT0gcmlnaHRcblx0XHRpZiAoICFldmVudC53aGljaCAmJiBidXR0b24gIT09IHVuZGVmaW5lZCAmJiBybW91c2VFdmVudC50ZXN0KCBldmVudC50eXBlICkgKSB7XG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDEgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDIgKSB7XG5cdFx0XHRcdHJldHVybiAzO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGJ1dHRvbiAmIDQgKSB7XG5cdFx0XHRcdHJldHVybiAyO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQud2hpY2g7XG5cdH1cbn0sIGpRdWVyeS5ldmVudC5hZGRQcm9wICk7XG5cbi8vIENyZWF0ZSBtb3VzZWVudGVyL2xlYXZlIGV2ZW50cyB1c2luZyBtb3VzZW92ZXIvb3V0IGFuZCBldmVudC10aW1lIGNoZWNrc1xuLy8gc28gdGhhdCBldmVudCBkZWxlZ2F0aW9uIHdvcmtzIGluIGpRdWVyeS5cbi8vIERvIHRoZSBzYW1lIGZvciBwb2ludGVyZW50ZXIvcG9pbnRlcmxlYXZlIGFuZCBwb2ludGVyb3Zlci9wb2ludGVyb3V0XG4vL1xuLy8gU3VwcG9ydDogU2FmYXJpIDcgb25seVxuLy8gU2FmYXJpIHNlbmRzIG1vdXNlZW50ZXIgdG9vIG9mdGVuOyBzZWU6XG4vLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NzAyNThcbi8vIGZvciB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1ZyAoaXQgZXhpc3RlZCBpbiBvbGRlciBDaHJvbWUgdmVyc2lvbnMgYXMgd2VsbCkuXG5qUXVlcnkuZWFjaCgge1xuXHRtb3VzZWVudGVyOiBcIm1vdXNlb3ZlclwiLFxuXHRtb3VzZWxlYXZlOiBcIm1vdXNlb3V0XCIsXG5cdHBvaW50ZXJlbnRlcjogXCJwb2ludGVyb3ZlclwiLFxuXHRwb2ludGVybGVhdmU6IFwicG9pbnRlcm91dFwiXG59LCBmdW5jdGlvbiggb3JpZywgZml4ICkge1xuXHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgb3JpZyBdID0ge1xuXHRcdGRlbGVnYXRlVHlwZTogZml4LFxuXHRcdGJpbmRUeXBlOiBmaXgsXG5cblx0XHRoYW5kbGU6IGZ1bmN0aW9uKCBldmVudCApIHtcblx0XHRcdHZhciByZXQsXG5cdFx0XHRcdHRhcmdldCA9IHRoaXMsXG5cdFx0XHRcdHJlbGF0ZWQgPSBldmVudC5yZWxhdGVkVGFyZ2V0LFxuXHRcdFx0XHRoYW5kbGVPYmogPSBldmVudC5oYW5kbGVPYmo7XG5cblx0XHRcdC8vIEZvciBtb3VzZWVudGVyL2xlYXZlIGNhbGwgdGhlIGhhbmRsZXIgaWYgcmVsYXRlZCBpcyBvdXRzaWRlIHRoZSB0YXJnZXQuXG5cdFx0XHQvLyBOQjogTm8gcmVsYXRlZFRhcmdldCBpZiB0aGUgbW91c2UgbGVmdC9lbnRlcmVkIHRoZSBicm93c2VyIHdpbmRvd1xuXHRcdFx0aWYgKCAhcmVsYXRlZCB8fCAoIHJlbGF0ZWQgIT09IHRhcmdldCAmJiAhalF1ZXJ5LmNvbnRhaW5zKCB0YXJnZXQsIHJlbGF0ZWQgKSApICkge1xuXHRcdFx0XHRldmVudC50eXBlID0gaGFuZGxlT2JqLm9yaWdUeXBlO1xuXHRcdFx0XHRyZXQgPSBoYW5kbGVPYmouaGFuZGxlci5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBmaXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdG9uOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4gKTtcblx0fSxcblx0b25lOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gb24oIHRoaXMsIHR5cGVzLCBzZWxlY3RvciwgZGF0YSwgZm4sIDEgKTtcblx0fSxcblx0b2ZmOiBmdW5jdGlvbiggdHlwZXMsIHNlbGVjdG9yLCBmbiApIHtcblx0XHR2YXIgaGFuZGxlT2JqLCB0eXBlO1xuXHRcdGlmICggdHlwZXMgJiYgdHlwZXMucHJldmVudERlZmF1bHQgJiYgdHlwZXMuaGFuZGxlT2JqICkge1xuXG5cdFx0XHQvLyAoIGV2ZW50ICkgIGRpc3BhdGNoZWQgalF1ZXJ5LkV2ZW50XG5cdFx0XHRoYW5kbGVPYmogPSB0eXBlcy5oYW5kbGVPYmo7XG5cdFx0XHRqUXVlcnkoIHR5cGVzLmRlbGVnYXRlVGFyZ2V0ICkub2ZmKFxuXHRcdFx0XHRoYW5kbGVPYmoubmFtZXNwYWNlID9cblx0XHRcdFx0XHRoYW5kbGVPYmoub3JpZ1R5cGUgKyBcIi5cIiArIGhhbmRsZU9iai5uYW1lc3BhY2UgOlxuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSxcblx0XHRcdFx0aGFuZGxlT2JqLnNlbGVjdG9yLFxuXHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlclxuXHRcdFx0KTtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblx0XHRpZiAoIHR5cGVvZiB0eXBlcyA9PT0gXCJvYmplY3RcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1vYmplY3QgWywgc2VsZWN0b3JdIClcblx0XHRcdGZvciAoIHR5cGUgaW4gdHlwZXMgKSB7XG5cdFx0XHRcdHRoaXMub2ZmKCB0eXBlLCBzZWxlY3RvciwgdHlwZXNbIHR5cGUgXSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggc2VsZWN0b3IgPT09IGZhbHNlIHx8IHR5cGVvZiBzZWxlY3RvciA9PT0gXCJmdW5jdGlvblwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzIFssIGZuXSApXG5cdFx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdFx0Zm4gPSByZXR1cm5GYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQucmVtb3ZlKCB0aGlzLCB0eXBlcywgZm4sIHNlbGVjdG9yICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxudmFyXG5cblx0LyogZXNsaW50LWRpc2FibGUgbWF4LWxlbiAqL1xuXG5cdC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXNsaW50L2VzbGludC9pc3N1ZXMvMzIyOVxuXHRyeGh0bWxUYWcgPSAvPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxcblxuXHQvKiBlc2xpbnQtZW5hYmxlICovXG5cblx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExLCBFZGdlIDEyIC0gMTNcblx0Ly8gSW4gSUUvRWRnZSB1c2luZyByZWdleCBncm91cHMgaGVyZSBjYXVzZXMgc2V2ZXJlIHNsb3dkb3ducy5cblx0Ly8gU2VlIGh0dHBzOi8vY29ubmVjdC5taWNyb3NvZnQuY29tL0lFL2ZlZWRiYWNrL2RldGFpbHMvMTczNjUxMi9cblx0cm5vSW5uZXJodG1sID0gLzxzY3JpcHR8PHN0eWxlfDxsaW5rL2ksXG5cblx0Ly8gY2hlY2tlZD1cImNoZWNrZWRcIiBvciBjaGVja2VkXG5cdHJjaGVja2VkID0gL2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxcblx0cnNjcmlwdFR5cGVNYXNrZWQgPSAvXnRydWVcXC8oLiopLyxcblx0cmNsZWFuU2NyaXB0ID0gL15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO1xuXG4vLyBQcmVmZXIgYSB0Ym9keSBvdmVyIGl0cyBwYXJlbnQgdGFibGUgZm9yIGNvbnRhaW5pbmcgbmV3IHJvd3NcbmZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldCggZWxlbSwgY29udGVudCApIHtcblx0aWYgKCBub2RlTmFtZSggZWxlbSwgXCJ0YWJsZVwiICkgJiZcblx0XHRub2RlTmFtZSggY29udGVudC5ub2RlVHlwZSAhPT0gMTEgPyBjb250ZW50IDogY29udGVudC5maXJzdENoaWxkLCBcInRyXCIgKSApIHtcblxuXHRcdHJldHVybiBqUXVlcnkoIFwiPnRib2R5XCIsIGVsZW0gKVsgMCBdIHx8IGVsZW07XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuLy8gUmVwbGFjZS9yZXN0b3JlIHRoZSB0eXBlIGF0dHJpYnV0ZSBvZiBzY3JpcHQgZWxlbWVudHMgZm9yIHNhZmUgRE9NIG1hbmlwdWxhdGlvblxuZnVuY3Rpb24gZGlzYWJsZVNjcmlwdCggZWxlbSApIHtcblx0ZWxlbS50eXBlID0gKCBlbGVtLmdldEF0dHJpYnV0ZSggXCJ0eXBlXCIgKSAhPT0gbnVsbCApICsgXCIvXCIgKyBlbGVtLnR5cGU7XG5cdHJldHVybiBlbGVtO1xufVxuZnVuY3Rpb24gcmVzdG9yZVNjcmlwdCggZWxlbSApIHtcblx0dmFyIG1hdGNoID0gcnNjcmlwdFR5cGVNYXNrZWQuZXhlYyggZWxlbS50eXBlICk7XG5cblx0aWYgKCBtYXRjaCApIHtcblx0XHRlbGVtLnR5cGUgPSBtYXRjaFsgMSBdO1xuXHR9IGVsc2Uge1xuXHRcdGVsZW0ucmVtb3ZlQXR0cmlidXRlKCBcInR5cGVcIiApO1xuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmZ1bmN0aW9uIGNsb25lQ29weUV2ZW50KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBpLCBsLCB0eXBlLCBwZGF0YU9sZCwgcGRhdGFDdXIsIHVkYXRhT2xkLCB1ZGF0YUN1ciwgZXZlbnRzO1xuXG5cdGlmICggZGVzdC5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyAxLiBDb3B5IHByaXZhdGUgZGF0YTogZXZlbnRzLCBoYW5kbGVycywgZXRjLlxuXHRpZiAoIGRhdGFQcml2Lmhhc0RhdGEoIHNyYyApICkge1xuXHRcdHBkYXRhT2xkID0gZGF0YVByaXYuYWNjZXNzKCBzcmMgKTtcblx0XHRwZGF0YUN1ciA9IGRhdGFQcml2LnNldCggZGVzdCwgcGRhdGFPbGQgKTtcblx0XHRldmVudHMgPSBwZGF0YU9sZC5ldmVudHM7XG5cblx0XHRpZiAoIGV2ZW50cyApIHtcblx0XHRcdGRlbGV0ZSBwZGF0YUN1ci5oYW5kbGU7XG5cdFx0XHRwZGF0YUN1ci5ldmVudHMgPSB7fTtcblxuXHRcdFx0Zm9yICggdHlwZSBpbiBldmVudHMgKSB7XG5cdFx0XHRcdGZvciAoIGkgPSAwLCBsID0gZXZlbnRzWyB0eXBlIF0ubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5hZGQoIGRlc3QsIHR5cGUsIGV2ZW50c1sgdHlwZSBdWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIDIuIENvcHkgdXNlciBkYXRhXG5cdGlmICggZGF0YVVzZXIuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0dWRhdGFPbGQgPSBkYXRhVXNlci5hY2Nlc3MoIHNyYyApO1xuXHRcdHVkYXRhQ3VyID0galF1ZXJ5LmV4dGVuZCgge30sIHVkYXRhT2xkICk7XG5cblx0XHRkYXRhVXNlci5zZXQoIGRlc3QsIHVkYXRhQ3VyICk7XG5cdH1cbn1cblxuLy8gRml4IElFIGJ1Z3MsIHNlZSBzdXBwb3J0IHRlc3RzXG5mdW5jdGlvbiBmaXhJbnB1dCggc3JjLCBkZXN0ICkge1xuXHR2YXIgbm9kZU5hbWUgPSBkZXN0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0Ly8gRmFpbHMgdG8gcGVyc2lzdCB0aGUgY2hlY2tlZCBzdGF0ZSBvZiBhIGNsb25lZCBjaGVja2JveCBvciByYWRpbyBidXR0b24uXG5cdGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiByY2hlY2thYmxlVHlwZS50ZXN0KCBzcmMudHlwZSApICkge1xuXHRcdGRlc3QuY2hlY2tlZCA9IHNyYy5jaGVja2VkO1xuXG5cdC8vIEZhaWxzIHRvIHJldHVybiB0aGUgc2VsZWN0ZWQgb3B0aW9uIHRvIHRoZSBkZWZhdWx0IHNlbGVjdGVkIHN0YXRlIHdoZW4gY2xvbmluZyBvcHRpb25zXG5cdH0gZWxzZSBpZiAoIG5vZGVOYW1lID09PSBcImlucHV0XCIgfHwgbm9kZU5hbWUgPT09IFwidGV4dGFyZWFcIiApIHtcblx0XHRkZXN0LmRlZmF1bHRWYWx1ZSA9IHNyYy5kZWZhdWx0VmFsdWU7XG5cdH1cbn1cblxuZnVuY3Rpb24gZG9tTWFuaXAoIGNvbGxlY3Rpb24sIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICkge1xuXG5cdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0YXJncyA9IGNvbmNhdC5hcHBseSggW10sIGFyZ3MgKTtcblxuXHR2YXIgZnJhZ21lbnQsIGZpcnN0LCBzY3JpcHRzLCBoYXNTY3JpcHRzLCBub2RlLCBkb2MsXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGNvbGxlY3Rpb24ubGVuZ3RoLFxuXHRcdGlOb0Nsb25lID0gbCAtIDEsXG5cdFx0dmFsdWUgPSBhcmdzWyAwIF0sXG5cdFx0aXNGdW5jdGlvbiA9IGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIGlzRnVuY3Rpb24gfHxcblx0XHRcdCggbCA+IDEgJiYgdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCFzdXBwb3J0LmNoZWNrQ2xvbmUgJiYgcmNoZWNrZWQudGVzdCggdmFsdWUgKSApICkge1xuXHRcdHJldHVybiBjb2xsZWN0aW9uLmVhY2goIGZ1bmN0aW9uKCBpbmRleCApIHtcblx0XHRcdHZhciBzZWxmID0gY29sbGVjdGlvbi5lcSggaW5kZXggKTtcblx0XHRcdGlmICggaXNGdW5jdGlvbiApIHtcblx0XHRcdFx0YXJnc1sgMCBdID0gdmFsdWUuY2FsbCggdGhpcywgaW5kZXgsIHNlbGYuaHRtbCgpICk7XG5cdFx0XHR9XG5cdFx0XHRkb21NYW5pcCggc2VsZiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKTtcblx0XHR9ICk7XG5cdH1cblxuXHRpZiAoIGwgKSB7XG5cdFx0ZnJhZ21lbnQgPSBidWlsZEZyYWdtZW50KCBhcmdzLCBjb2xsZWN0aW9uWyAwIF0ub3duZXJEb2N1bWVudCwgZmFsc2UsIGNvbGxlY3Rpb24sIGlnbm9yZWQgKTtcblx0XHRmaXJzdCA9IGZyYWdtZW50LmZpcnN0Q2hpbGQ7XG5cblx0XHRpZiAoIGZyYWdtZW50LmNoaWxkTm9kZXMubGVuZ3RoID09PSAxICkge1xuXHRcdFx0ZnJhZ21lbnQgPSBmaXJzdDtcblx0XHR9XG5cblx0XHQvLyBSZXF1aXJlIGVpdGhlciBuZXcgY29udGVudCBvciBhbiBpbnRlcmVzdCBpbiBpZ25vcmVkIGVsZW1lbnRzIHRvIGludm9rZSB0aGUgY2FsbGJhY2tcblx0XHRpZiAoIGZpcnN0IHx8IGlnbm9yZWQgKSB7XG5cdFx0XHRzY3JpcHRzID0galF1ZXJ5Lm1hcCggZ2V0QWxsKCBmcmFnbWVudCwgXCJzY3JpcHRcIiApLCBkaXNhYmxlU2NyaXB0ICk7XG5cdFx0XHRoYXNTY3JpcHRzID0gc2NyaXB0cy5sZW5ndGg7XG5cblx0XHRcdC8vIFVzZSB0aGUgb3JpZ2luYWwgZnJhZ21lbnQgZm9yIHRoZSBsYXN0IGl0ZW1cblx0XHRcdC8vIGluc3RlYWQgb2YgdGhlIGZpcnN0IGJlY2F1c2UgaXQgY2FuIGVuZCB1cFxuXHRcdFx0Ly8gYmVpbmcgZW1wdGllZCBpbmNvcnJlY3RseSBpbiBjZXJ0YWluIHNpdHVhdGlvbnMgKCM4MDcwKS5cblx0XHRcdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0bm9kZSA9IGZyYWdtZW50O1xuXG5cdFx0XHRcdGlmICggaSAhPT0gaU5vQ2xvbmUgKSB7XG5cdFx0XHRcdFx0bm9kZSA9IGpRdWVyeS5jbG9uZSggbm9kZSwgdHJ1ZSwgdHJ1ZSApO1xuXG5cdFx0XHRcdFx0Ly8gS2VlcCByZWZlcmVuY2VzIHRvIGNsb25lZCBzY3JpcHRzIGZvciBsYXRlciByZXN0b3JhdGlvblxuXHRcdFx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblxuXHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdFx0XHRqUXVlcnkubWVyZ2UoIHNjcmlwdHMsIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y2FsbGJhY2suY2FsbCggY29sbGVjdGlvblsgaSBdLCBub2RlLCBpICk7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggaGFzU2NyaXB0cyApIHtcblx0XHRcdFx0ZG9jID0gc2NyaXB0c1sgc2NyaXB0cy5sZW5ndGggLSAxIF0ub3duZXJEb2N1bWVudDtcblxuXHRcdFx0XHQvLyBSZWVuYWJsZSBzY3JpcHRzXG5cdFx0XHRcdGpRdWVyeS5tYXAoIHNjcmlwdHMsIHJlc3RvcmVTY3JpcHQgKTtcblxuXHRcdFx0XHQvLyBFdmFsdWF0ZSBleGVjdXRhYmxlIHNjcmlwdHMgb24gZmlyc3QgZG9jdW1lbnQgaW5zZXJ0aW9uXG5cdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgaGFzU2NyaXB0czsgaSsrICkge1xuXHRcdFx0XHRcdG5vZGUgPSBzY3JpcHRzWyBpIF07XG5cdFx0XHRcdFx0aWYgKCByc2NyaXB0VHlwZS50ZXN0KCBub2RlLnR5cGUgfHwgXCJcIiApICYmXG5cdFx0XHRcdFx0XHQhZGF0YVByaXYuYWNjZXNzKCBub2RlLCBcImdsb2JhbEV2YWxcIiApICYmXG5cdFx0XHRcdFx0XHRqUXVlcnkuY29udGFpbnMoIGRvYywgbm9kZSApICkge1xuXG5cdFx0XHRcdFx0XHRpZiAoIG5vZGUuc3JjICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIE9wdGlvbmFsIEFKQVggZGVwZW5kZW5jeSwgYnV0IHdvbid0IHJ1biBzY3JpcHRzIGlmIG5vdCBwcmVzZW50XG5cdFx0XHRcdFx0XHRcdGlmICggalF1ZXJ5Ll9ldmFsVXJsICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5fZXZhbFVybCggbm9kZS5zcmMgKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0RE9NRXZhbCggbm9kZS50ZXh0Q29udGVudC5yZXBsYWNlKCByY2xlYW5TY3JpcHQsIFwiXCIgKSwgZG9jICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGNvbGxlY3Rpb247XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSggZWxlbSwgc2VsZWN0b3IsIGtlZXBEYXRhICkge1xuXHR2YXIgbm9kZSxcblx0XHRub2RlcyA9IHNlbGVjdG9yID8galF1ZXJ5LmZpbHRlciggc2VsZWN0b3IsIGVsZW0gKSA6IGVsZW0sXG5cdFx0aSA9IDA7XG5cblx0Zm9yICggOyAoIG5vZGUgPSBub2Rlc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdGlmICggIWtlZXBEYXRhICYmIG5vZGUubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIG5vZGUgKSApO1xuXHRcdH1cblxuXHRcdGlmICggbm9kZS5wYXJlbnROb2RlICkge1xuXHRcdFx0aWYgKCBrZWVwRGF0YSAmJiBqUXVlcnkuY29udGFpbnMoIG5vZGUub3duZXJEb2N1bWVudCwgbm9kZSApICkge1xuXHRcdFx0XHRzZXRHbG9iYWxFdmFsKCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0fVxuXHRcdFx0bm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKCBub2RlICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW07XG59XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0aHRtbFByZWZpbHRlcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0cmV0dXJuIGh0bWwucmVwbGFjZSggcnhodG1sVGFnLCBcIjwkMT48LyQyPlwiICk7XG5cdH0sXG5cblx0Y2xvbmU6IGZ1bmN0aW9uKCBlbGVtLCBkYXRhQW5kRXZlbnRzLCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHR2YXIgaSwgbCwgc3JjRWxlbWVudHMsIGRlc3RFbGVtZW50cyxcblx0XHRcdGNsb25lID0gZWxlbS5jbG9uZU5vZGUoIHRydWUgKSxcblx0XHRcdGluUGFnZSA9IGpRdWVyeS5jb250YWlucyggZWxlbS5vd25lckRvY3VtZW50LCBlbGVtICk7XG5cblx0XHQvLyBGaXggSUUgY2xvbmluZyBpc3N1ZXNcblx0XHRpZiAoICFzdXBwb3J0Lm5vQ2xvbmVDaGVja2VkICYmICggZWxlbS5ub2RlVHlwZSA9PT0gMSB8fCBlbGVtLm5vZGVUeXBlID09PSAxMSApICYmXG5cdFx0XHRcdCFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gV2UgZXNjaGV3IFNpenpsZSBoZXJlIGZvciBwZXJmb3JtYW5jZSByZWFzb25zOiBodHRwczovL2pzcGVyZi5jb20vZ2V0YWxsLXZzLXNpenpsZS8yXG5cdFx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lICk7XG5cdFx0XHRzcmNFbGVtZW50cyA9IGdldEFsbCggZWxlbSApO1xuXG5cdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0Zml4SW5wdXQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ29weSB0aGUgZXZlbnRzIGZyb20gdGhlIG9yaWdpbmFsIHRvIHRoZSBjbG9uZVxuXHRcdGlmICggZGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdGlmICggZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0XHRcdHNyY0VsZW1lbnRzID0gc3JjRWxlbWVudHMgfHwgZ2V0QWxsKCBlbGVtICk7XG5cdFx0XHRcdGRlc3RFbGVtZW50cyA9IGRlc3RFbGVtZW50cyB8fCBnZXRBbGwoIGNsb25lICk7XG5cblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBzcmNFbGVtZW50cy5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIHNyY0VsZW1lbnRzWyBpIF0sIGRlc3RFbGVtZW50c1sgaSBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNsb25lQ29weUV2ZW50KCBlbGVtLCBjbG9uZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFByZXNlcnZlIHNjcmlwdCBldmFsdWF0aW9uIGhpc3Rvcnlcblx0XHRkZXN0RWxlbWVudHMgPSBnZXRBbGwoIGNsb25lLCBcInNjcmlwdFwiICk7XG5cdFx0aWYgKCBkZXN0RWxlbWVudHMubGVuZ3RoID4gMCApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIGRlc3RFbGVtZW50cywgIWluUGFnZSAmJiBnZXRBbGwoIGVsZW0sIFwic2NyaXB0XCIgKSApO1xuXHRcdH1cblxuXHRcdC8vIFJldHVybiB0aGUgY2xvbmVkIHNldFxuXHRcdHJldHVybiBjbG9uZTtcblx0fSxcblxuXHRjbGVhbkRhdGE6IGZ1bmN0aW9uKCBlbGVtcyApIHtcblx0XHR2YXIgZGF0YSwgZWxlbSwgdHlwZSxcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbCxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyAoIGVsZW0gPSBlbGVtc1sgaSBdICkgIT09IHVuZGVmaW5lZDsgaSsrICkge1xuXHRcdFx0aWYgKCBhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cdFx0XHRcdGlmICggKCBkYXRhID0gZWxlbVsgZGF0YVByaXYuZXhwYW5kbyBdICkgKSB7XG5cdFx0XHRcdFx0aWYgKCBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdGZvciAoIHR5cGUgaW4gZGF0YS5ldmVudHMgKSB7XG5cdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbFsgdHlwZSBdICkge1xuXHRcdFx0XHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBUaGlzIGlzIGEgc2hvcnRjdXQgdG8gYXZvaWQgalF1ZXJ5LmV2ZW50LnJlbW92ZSdzIG92ZXJoZWFkXG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LnJlbW92ZUV2ZW50KCBlbGVtLCB0eXBlLCBkYXRhLmhhbmRsZSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogQ2hyb21lIDw9MzUgLSA0NStcblx0XHRcdFx0XHQvLyBBc3NpZ24gdW5kZWZpbmVkIGluc3RlYWQgb2YgdXNpbmcgZGVsZXRlLCBzZWUgRGF0YSNyZW1vdmVcblx0XHRcdFx0XHRlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gPSB1bmRlZmluZWQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0aWYgKCBlbGVtWyBkYXRhVXNlci5leHBhbmRvIF0gKSB7XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGRldGFjaDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHJldHVybiByZW1vdmUoIHRoaXMsIHNlbGVjdG9yLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IgKTtcblx0fSxcblxuXHR0ZXh0OiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkudGV4dCggdGhpcyApIDpcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdFx0dGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0YXBwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0cHJlcGVuZDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHZhciB0YXJnZXQgPSBtYW5pcHVsYXRpb25UYXJnZXQoIHRoaXMsIGVsZW0gKTtcblx0XHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZSggZWxlbSwgdGFyZ2V0LmZpcnN0Q2hpbGQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0YmVmb3JlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRhZnRlcjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0aWYgKCB0aGlzLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoIGVsZW0sIHRoaXMubmV4dFNpYmxpbmcgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0ZW1wdHk6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IHRoaXNbIGkgXSApICE9IG51bGw7IGkrKyApIHtcblx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHQvLyBQcmV2ZW50IG1lbW9yeSBsZWFrc1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIGVsZW0sIGZhbHNlICkgKTtcblxuXHRcdFx0XHQvLyBSZW1vdmUgYW55IHJlbWFpbmluZyBub2Rlc1xuXHRcdFx0XHRlbGVtLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdGRhdGFBbmRFdmVudHMgPSBkYXRhQW5kRXZlbnRzID09IG51bGwgPyBmYWxzZSA6IGRhdGFBbmRFdmVudHM7XG5cdFx0ZGVlcERhdGFBbmRFdmVudHMgPSBkZWVwRGF0YUFuZEV2ZW50cyA9PSBudWxsID8gZGF0YUFuZEV2ZW50cyA6IGRlZXBEYXRhQW5kRXZlbnRzO1xuXG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBqUXVlcnkuY2xvbmUoIHRoaXMsIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdGh0bWw6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXSB8fCB7fSxcblx0XHRcdFx0aSA9IDAsXG5cdFx0XHRcdGwgPSB0aGlzLmxlbmd0aDtcblxuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmlubmVySFRNTDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2VlIGlmIHdlIGNhbiB0YWtlIGEgc2hvcnRjdXQgYW5kIGp1c3QgdXNlIGlubmVySFRNTFxuXHRcdFx0aWYgKCB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiYgIXJub0lubmVyaHRtbC50ZXN0KCB2YWx1ZSApICYmXG5cdFx0XHRcdCF3cmFwTWFwWyAoIHJ0YWdOYW1lLmV4ZWMoIHZhbHVlICkgfHwgWyBcIlwiLCBcIlwiIF0gKVsgMSBdLnRvTG93ZXJDYXNlKCkgXSApIHtcblxuXHRcdFx0XHR2YWx1ZSA9IGpRdWVyeS5odG1sUHJlZmlsdGVyKCB2YWx1ZSApO1xuXG5cdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRcdFx0ZWxlbSA9IHRoaXNbIGkgXSB8fCB7fTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVtb3ZlIGVsZW1lbnQgbm9kZXMgYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHRcdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXHRcdFx0XHRcdFx0XHRlbGVtLmlubmVySFRNTCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW0gPSAwO1xuXG5cdFx0XHRcdC8vIElmIHVzaW5nIGlubmVySFRNTCB0aHJvd3MgYW4gZXhjZXB0aW9uLCB1c2UgdGhlIGZhbGxiYWNrIG1ldGhvZFxuXHRcdFx0XHR9IGNhdGNoICggZSApIHt9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggZWxlbSApIHtcblx0XHRcdFx0dGhpcy5lbXB0eSgpLmFwcGVuZCggdmFsdWUgKTtcblx0XHRcdH1cblx0XHR9LCBudWxsLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCApO1xuXHR9LFxuXG5cdHJlcGxhY2VXaXRoOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaWdub3JlZCA9IFtdO1xuXG5cdFx0Ly8gTWFrZSB0aGUgY2hhbmdlcywgcmVwbGFjaW5nIGVhY2ggbm9uLWlnbm9yZWQgY29udGV4dCBlbGVtZW50IHdpdGggdGhlIG5ldyBjb250ZW50XG5cdFx0cmV0dXJuIGRvbU1hbmlwKCB0aGlzLCBhcmd1bWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIHBhcmVudCA9IHRoaXMucGFyZW50Tm9kZTtcblxuXHRcdFx0aWYgKCBqUXVlcnkuaW5BcnJheSggdGhpcywgaWdub3JlZCApIDwgMCApIHtcblx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCB0aGlzICkgKTtcblx0XHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnJlcGxhY2VDaGlsZCggZWxlbSwgdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBGb3JjZSBjYWxsYmFjayBpbnZvY2F0aW9uXG5cdFx0fSwgaWdub3JlZCApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCB7XG5cdGFwcGVuZFRvOiBcImFwcGVuZFwiLFxuXHRwcmVwZW5kVG86IFwicHJlcGVuZFwiLFxuXHRpbnNlcnRCZWZvcmU6IFwiYmVmb3JlXCIsXG5cdGluc2VydEFmdGVyOiBcImFmdGVyXCIsXG5cdHJlcGxhY2VBbGw6IFwicmVwbGFjZVdpdGhcIlxufSwgZnVuY3Rpb24oIG5hbWUsIG9yaWdpbmFsICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgZWxlbXMsXG5cdFx0XHRyZXQgPSBbXSxcblx0XHRcdGluc2VydCA9IGpRdWVyeSggc2VsZWN0b3IgKSxcblx0XHRcdGxhc3QgPSBpbnNlcnQubGVuZ3RoIC0gMSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0Zm9yICggOyBpIDw9IGxhc3Q7IGkrKyApIHtcblx0XHRcdGVsZW1zID0gaSA9PT0gbGFzdCA/IHRoaXMgOiB0aGlzLmNsb25lKCB0cnVlICk7XG5cdFx0XHRqUXVlcnkoIGluc2VydFsgaSBdIClbIG9yaWdpbmFsIF0oIGVsZW1zICk7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0Ly8gLmdldCgpIGJlY2F1c2UgcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0cHVzaC5hcHBseSggcmV0LCBlbGVtcy5nZXQoKSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggcmV0ICk7XG5cdH07XG59ICk7XG52YXIgcm1hcmdpbiA9ICggL15tYXJnaW4vICk7XG5cbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxuXG5cbiggZnVuY3Rpb24oKSB7XG5cblx0Ly8gRXhlY3V0aW5nIGJvdGggcGl4ZWxQb3NpdGlvbiAmIGJveFNpemluZ1JlbGlhYmxlIHRlc3RzIHJlcXVpcmUgb25seSBvbmUgbGF5b3V0XG5cdC8vIHNvIHRoZXkncmUgZXhlY3V0ZWQgYXQgdGhlIHNhbWUgdGltZSB0byBzYXZlIHRoZSBzZWNvbmQgY29tcHV0YXRpb24uXG5cdGZ1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCkge1xuXG5cdFx0Ly8gVGhpcyBpcyBhIHNpbmdsZXRvbiwgd2UgbmVlZCB0byBleGVjdXRlIGl0IG9ubHkgb25jZVxuXHRcdGlmICggIWRpdiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcImJveC1zaXppbmc6Ym9yZGVyLWJveDtcIiArXG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7XCIgK1xuXHRcdFx0XCJtYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O1wiICtcblx0XHRcdFwidG9wOjElO3dpZHRoOjUwJVwiO1xuXHRcdGRpdi5pbm5lckhUTUwgPSBcIlwiO1xuXHRcdGRvY3VtZW50RWxlbWVudC5hcHBlbmRDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IGRpdlN0eWxlLm1hcmdpbkxlZnQgPT09IFwiMnB4XCI7XG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSBkaXZTdHlsZS53aWR0aCA9PT0gXCI0cHhcIjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0XHQvLyBTb21lIHN0eWxlcyBjb21lIGJhY2sgd2l0aCBwZXJjZW50YWdlIHZhbHVlcywgZXZlbiB0aG91Z2ggdGhleSBzaG91bGRuJ3Rcblx0XHRkaXYuc3R5bGUubWFyZ2luUmlnaHQgPSBcIjUwJVwiO1xuXHRcdHBpeGVsTWFyZ2luUmlnaHRWYWwgPSBkaXZTdHlsZS5tYXJnaW5SaWdodCA9PT0gXCI0cHhcIjtcblxuXHRcdGRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZCggY29udGFpbmVyICk7XG5cblx0XHQvLyBOdWxsaWZ5IHRoZSBkaXYgc28gaXQgd291bGRuJ3QgYmUgc3RvcmVkIGluIHRoZSBtZW1vcnkgYW5kXG5cdFx0Ly8gaXQgd2lsbCBhbHNvIGJlIGEgc2lnbiB0aGF0IGNoZWNrcyBhbHJlYWR5IHBlcmZvcm1lZFxuXHRcdGRpdiA9IG51bGw7XG5cdH1cblxuXHR2YXIgcGl4ZWxQb3NpdGlvblZhbCwgYm94U2l6aW5nUmVsaWFibGVWYWwsIHBpeGVsTWFyZ2luUmlnaHRWYWwsIHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxcblx0XHRjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICksXG5cdFx0ZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApO1xuXG5cdC8vIEZpbmlzaCBlYXJseSBpbiBsaW1pdGVkIChub24tYnJvd3NlcikgZW52aXJvbm1lbnRzXG5cdGlmICggIWRpdi5zdHlsZSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFN0eWxlIG9mIGNsb25lZCBlbGVtZW50IGFmZmVjdHMgc291cmNlIGVsZW1lbnQgY2xvbmVkICgjODkwOClcblx0ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID0gXCJjb250ZW50LWJveFwiO1xuXHRkaXYuY2xvbmVOb2RlKCB0cnVlICkuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcIlwiO1xuXHRzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSA9IGRpdi5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9PT0gXCJjb250ZW50LWJveFwiO1xuXG5cdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJib3JkZXI6MDt3aWR0aDo4cHg7aGVpZ2h0OjA7dG9wOjA7bGVmdDotOTk5OXB4O1wiICtcblx0XHRcInBhZGRpbmc6MDttYXJnaW4tdG9wOjFweDtwb3NpdGlvbjphYnNvbHV0ZVwiO1xuXHRjb250YWluZXIuYXBwZW5kQ2hpbGQoIGRpdiApO1xuXG5cdGpRdWVyeS5leHRlbmQoIHN1cHBvcnQsIHtcblx0XHRwaXhlbFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxQb3NpdGlvblZhbDtcblx0XHR9LFxuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbE1hcmdpblJpZ2h0OiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gcGl4ZWxNYXJnaW5SaWdodFZhbDtcblx0XHR9LFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdDogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHJlbGlhYmxlTWFyZ2luTGVmdFZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbE1hcmdpblJpZ2h0KCkgJiYgcm51bW5vbnB4LnRlc3QoIHJldCApICYmIHJtYXJnaW4udGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fSxcblxuXHRjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGU7XG5cbi8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHByb3BlcnR5IG1hcHBlZCBhbG9uZyB3aGF0IGpRdWVyeS5jc3NQcm9wcyBzdWdnZXN0cyBvciB0b1xuLy8gYSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHkuXG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgcmV0ID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF07XG5cdGlmICggIXJldCApIHtcblx0XHRyZXQgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcblx0fVxuXHRyZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBhdWdtZW50V2lkdGhPckhlaWdodCggZWxlbSwgbmFtZSwgZXh0cmEsIGlzQm9yZGVyQm94LCBzdHlsZXMgKSB7XG5cdHZhciBpLFxuXHRcdHZhbCA9IDA7XG5cblx0Ly8gSWYgd2UgYWxyZWFkeSBoYXZlIHRoZSByaWdodCBtZWFzdXJlbWVudCwgYXZvaWQgYXVnbWVudGF0aW9uXG5cdGlmICggZXh0cmEgPT09ICggaXNCb3JkZXJCb3ggPyBcImJvcmRlclwiIDogXCJjb250ZW50XCIgKSApIHtcblx0XHRpID0gNDtcblxuXHQvLyBPdGhlcndpc2UgaW5pdGlhbGl6ZSBmb3IgaG9yaXpvbnRhbCBvciB2ZXJ0aWNhbCBwcm9wZXJ0aWVzXG5cdH0gZWxzZSB7XG5cdFx0aSA9IG5hbWUgPT09IFwid2lkdGhcIiA/IDEgOiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luLCBzbyBhZGQgaXQgaWYgd2Ugd2FudCBpdFxuXHRcdGlmICggZXh0cmEgPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHR2YWwgKz0galF1ZXJ5LmNzcyggZWxlbSwgZXh0cmEgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0JvcmRlckJveCApIHtcblxuXHRcdFx0Ly8gYm9yZGVyLWJveCBpbmNsdWRlcyBwYWRkaW5nLCBzbyByZW1vdmUgaXQgaWYgd2Ugd2FudCBjb250ZW50XG5cdFx0XHRpZiAoIGV4dHJhID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwicGFkZGluZ1wiICsgY3NzRXhwYW5kWyBpIF0sIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBdCB0aGlzIHBvaW50LCBleHRyYSBpc24ndCBib3JkZXIgbm9yIG1hcmdpbiwgc28gcmVtb3ZlIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0dmFsIC09IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm9yZGVyXCIgKyBjc3NFeHBhbmRbIGkgXSArIFwiV2lkdGhcIiwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCwgc28gYWRkIHBhZGRpbmdcblx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBhZGRpbmdcIiArIGNzc0V4cGFuZFsgaSBdLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgZXh0cmEgaXNuJ3QgY29udGVudCBub3IgcGFkZGluZywgc28gYWRkIGJvcmRlclxuXHRcdFx0aWYgKCBleHRyYSAhPT0gXCJwYWRkaW5nXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB2YWw7XG59XG5cbmZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICkge1xuXG5cdC8vIFN0YXJ0IHdpdGggY29tcHV0ZWQgc3R5bGVcblx0dmFyIHZhbHVlSXNCb3JkZXJCb3gsXG5cdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICksXG5cdFx0dmFsID0gY3VyQ1NTKCBlbGVtLCBuYW1lLCBzdHlsZXMgKSxcblx0XHRpc0JvcmRlckJveCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiYm94U2l6aW5nXCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJib3JkZXItYm94XCI7XG5cblx0Ly8gQ29tcHV0ZWQgdW5pdCBpcyBub3QgcGl4ZWxzLiBTdG9wIGhlcmUgYW5kIHJldHVybi5cblx0aWYgKCBybnVtbm9ucHgudGVzdCggdmFsICkgKSB7XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXG5cdC8vIENoZWNrIGZvciBzdHlsZSBpbiBjYXNlIGEgYnJvd3NlciB3aGljaCByZXR1cm5zIHVucmVsaWFibGUgdmFsdWVzXG5cdC8vIGZvciBnZXRDb21wdXRlZFN0eWxlIHNpbGVudGx5IGZhbGxzIGJhY2sgdG8gdGhlIHJlbGlhYmxlIGVsZW0uc3R5bGVcblx0dmFsdWVJc0JvcmRlckJveCA9IGlzQm9yZGVyQm94ICYmXG5cdFx0KCBzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBuYW1lIF0gKTtcblxuXHQvLyBGYWxsIGJhY2sgdG8gb2Zmc2V0V2lkdGgvSGVpZ2h0IHdoZW4gdmFsdWUgaXMgXCJhdXRvXCJcblx0Ly8gVGhpcyBoYXBwZW5zIGZvciBpbmxpbmUgZWxlbWVudHMgd2l0aCBubyBleHBsaWNpdCBzZXR0aW5nIChnaC0zNTcxKVxuXHRpZiAoIHZhbCA9PT0gXCJhdXRvXCIgKSB7XG5cdFx0dmFsID0gZWxlbVsgXCJvZmZzZXRcIiArIG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApIF07XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiwgYXV0bywgYW5kIHByZXBhcmUgZm9yIGV4dHJhXG5cdHZhbCA9IHBhcnNlRmxvYXQoIHZhbCApIHx8IDA7XG5cblx0Ly8gVXNlIHRoZSBhY3RpdmUgYm94LXNpemluZyBtb2RlbCB0byBhZGQvc3VidHJhY3QgaXJyZWxldmFudCBzdHlsZXNcblx0cmV0dXJuICggdmFsICtcblx0XHRhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdGVsZW0sXG5cdFx0XHRuYW1lLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlc1xuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHtcblx0XHRcImZsb2F0XCI6IFwiY3NzRmxvYXRcIlxuXHR9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKSxcblx0XHRcdHN0eWxlID0gZWxlbS5zdHlsZTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIHF1ZXJ5IHRoZSB2YWx1ZSBpZiBpdCBpcyBhIENTUyBjdXN0b20gcHJvcGVydHlcblx0XHQvLyBzaW5jZSB0aGV5IGFyZSB1c2VyLWRlZmluZWQuXG5cdFx0aWYgKCAhaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0bmFtZSA9IGZpbmFsUHJvcE5hbWUoIG9yaWdOYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gR2V0cyBob29rIGZvciB0aGUgcHJlZml4ZWQgdmVyc2lvbiwgdGhlbiB1bnByZWZpeGVkIHZlcnNpb25cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIENoZWNrIGlmIHdlJ3JlIHNldHRpbmcgYSB2YWx1ZVxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHR5cGUgPSB0eXBlb2YgdmFsdWU7XG5cblx0XHRcdC8vIENvbnZlcnQgXCIrPVwiIG9yIFwiLT1cIiB0byByZWxhdGl2ZSBudW1iZXJzICgjNzM0NSlcblx0XHRcdGlmICggdHlwZSA9PT0gXCJzdHJpbmdcIiAmJiAoIHJldCA9IHJjc3NOdW0uZXhlYyggdmFsdWUgKSApICYmIHJldFsgMSBdICkge1xuXHRcdFx0XHR2YWx1ZSA9IGFkanVzdENTUyggZWxlbSwgbmFtZSwgcmV0ICk7XG5cblx0XHRcdFx0Ly8gRml4ZXMgYnVnICM5MjM3XG5cdFx0XHRcdHR5cGUgPSBcIm51bWJlclwiO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCBudWxsIGFuZCBOYU4gdmFsdWVzIGFyZW4ndCBzZXQgKCM3MTE2KVxuXHRcdFx0aWYgKCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlICE9PSB2YWx1ZSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBhIG51bWJlciB3YXMgcGFzc2VkIGluLCBhZGQgdGhlIHVuaXQgKGV4Y2VwdCBmb3IgY2VydGFpbiBDU1MgcHJvcGVydGllcylcblx0XHRcdGlmICggdHlwZSA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsdWUgKz0gcmV0ICYmIHJldFsgMyBdIHx8ICggalF1ZXJ5LmNzc051bWJlclsgb3JpZ05hbWUgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gYmFja2dyb3VuZC0qIHByb3BzIGFmZmVjdCBvcmlnaW5hbCBjbG9uZSdzIHZhbHVlc1xuXHRcdFx0aWYgKCAhc3VwcG9ydC5jbGVhckNsb25lU3R5bGUgJiYgdmFsdWUgPT09IFwiXCIgJiYgbmFtZS5pbmRleE9mKCBcImJhY2tncm91bmRcIiApID09PSAwICkge1xuXHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gXCJpbmhlcml0XCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQsIHVzZSB0aGF0IHZhbHVlLCBvdGhlcndpc2UganVzdCBzZXQgdGhlIHNwZWNpZmllZCB2YWx1ZVxuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8XG5cdFx0XHRcdCggdmFsdWUgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRpZiAoIGlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdFx0XHRzdHlsZS5zZXRQcm9wZXJ0eSggbmFtZSwgdmFsdWUgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdHlsZVsgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBub24tY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBmYWxzZSwgZXh0cmEgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gT3RoZXJ3aXNlIGp1c3QgZ2V0IHRoZSB2YWx1ZSBmcm9tIHRoZSBzdHlsZSBvYmplY3Rcblx0XHRcdHJldHVybiBzdHlsZVsgbmFtZSBdO1xuXHRcdH1cblx0fSxcblxuXHRjc3M6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBleHRyYSwgc3R5bGVzICkge1xuXHRcdHZhciB2YWwsIG51bSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGpRdWVyeS5jYW1lbENhc2UoIG5hbWUgKSxcblx0XHRcdGlzQ3VzdG9tUHJvcCA9IHJjdXN0b21Qcm9wLnRlc3QoIG5hbWUgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHdlJ3JlIHdvcmtpbmcgd2l0aCB0aGUgcmlnaHQgbmFtZS4gV2UgZG9uJ3Rcblx0XHQvLyB3YW50IHRvIG1vZGlmeSB0aGUgdmFsdWUgaWYgaXQgaXMgYSBDU1MgY3VzdG9tIHByb3BlcnR5XG5cdFx0Ly8gc2luY2UgdGhleSBhcmUgdXNlci1kZWZpbmVkLlxuXHRcdGlmICggIWlzQ3VzdG9tUHJvcCApIHtcblx0XHRcdG5hbWUgPSBmaW5hbFByb3BOYW1lKCBvcmlnTmFtZSApO1xuXHRcdH1cblxuXHRcdC8vIFRyeSBwcmVmaXhlZCBuYW1lIGZvbGxvd2VkIGJ5IHRoZSB1bnByZWZpeGVkIG5hbWVcblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdIHx8IGpRdWVyeS5jc3NIb29rc1sgb3JpZ05hbWUgXTtcblxuXHRcdC8vIElmIGEgaG9vayB3YXMgcHJvdmlkZWQgZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsID0gaG9va3MuZ2V0KCBlbGVtLCB0cnVlLCBleHRyYSApO1xuXHRcdH1cblxuXHRcdC8vIE90aGVyd2lzZSwgaWYgYSB3YXkgdG8gZ2V0IHRoZSBjb21wdXRlZCB2YWx1ZSBleGlzdHMsIHVzZSB0aGF0XG5cdFx0aWYgKCB2YWwgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHZhbCA9IGN1ckNTUyggZWxlbSwgbmFtZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gQ29udmVydCBcIm5vcm1hbFwiIHRvIGNvbXB1dGVkIHZhbHVlXG5cdFx0aWYgKCB2YWwgPT09IFwibm9ybWFsXCIgJiYgbmFtZSBpbiBjc3NOb3JtYWxUcmFuc2Zvcm0gKSB7XG5cdFx0XHR2YWwgPSBjc3NOb3JtYWxUcmFuc2Zvcm1bIG5hbWUgXTtcblx0XHR9XG5cblx0XHQvLyBNYWtlIG51bWVyaWMgaWYgZm9yY2VkIG9yIGEgcXVhbGlmaWVyIHdhcyBwcm92aWRlZCBhbmQgdmFsIGxvb2tzIG51bWVyaWNcblx0XHRpZiAoIGV4dHJhID09PSBcIlwiIHx8IGV4dHJhICkge1xuXHRcdFx0bnVtID0gcGFyc2VGbG9hdCggdmFsICk7XG5cdFx0XHRyZXR1cm4gZXh0cmEgPT09IHRydWUgfHwgaXNGaW5pdGUoIG51bSApID8gbnVtIHx8IDAgOiB2YWw7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHZhbDtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImhlaWdodFwiLCBcIndpZHRoXCIgXSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdID0ge1xuXHRcdGdldDogZnVuY3Rpb24oIGVsZW0sIGNvbXB1dGVkLCBleHRyYSApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cblx0XHRcdFx0Ly8gQ2VydGFpbiBlbGVtZW50cyBjYW4gaGF2ZSBkaW1lbnNpb24gaW5mbyBpZiB3ZSBpbnZpc2libHkgc2hvdyB0aGVtXG5cdFx0XHRcdC8vIGJ1dCBpdCBtdXN0IGhhdmUgYSBjdXJyZW50IGRpc3BsYXkgc3R5bGUgdGhhdCB3b3VsZCBiZW5lZml0XG5cdFx0XHRcdHJldHVybiByZGlzcGxheXN3YXAudGVzdCggalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKSApICYmXG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgOCtcblx0XHRcdFx0XHQvLyBUYWJsZSBjb2x1bW5zIGluIFNhZmFyaSBoYXZlIG5vbi16ZXJvIG9mZnNldFdpZHRoICYgemVyb1xuXHRcdFx0XHRcdC8vIGdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHVubGVzcyBkaXNwbGF5IGlzIGNoYW5nZWQuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0XHRcdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYSBkaXNjb25uZWN0ZWQgbm9kZVxuXHRcdFx0XHRcdC8vIGluIElFIHRocm93cyBhbiBlcnJvci5cblx0XHRcdFx0XHQoICFlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoIHx8ICFlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoICkgP1xuXHRcdFx0XHRcdFx0c3dhcCggZWxlbSwgY3NzU2hvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiBnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBuYW1lLCBleHRyYSApO1xuXHRcdFx0XHRcdFx0fSApIDpcblx0XHRcdFx0XHRcdGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIG5hbWUsIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBleHRyYSAmJiBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRcdFx0c3VidHJhY3QgPSBleHRyYSAmJiBhdWdtZW50V2lkdGhPckhlaWdodChcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdG5hbWUsXG5cdFx0XHRcdFx0ZXh0cmEsXG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgXCJib3hTaXppbmdcIiwgZmFsc2UsIHN0eWxlcyApID09PSBcImJvcmRlci1ib3hcIixcblx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0KTtcblxuXHRcdFx0Ly8gQ29udmVydCB0byBwaXhlbHMgaWYgdmFsdWUgYWRqdXN0bWVudCBpcyBuZWVkZWRcblx0XHRcdGlmICggc3VidHJhY3QgJiYgKCBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiZcblx0XHRcdFx0KCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgIT09IFwicHhcIiApIHtcblxuXHRcdFx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0dmFsdWUgPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCAhcm1hcmdpbi50ZXN0KCBwcmVmaXggKSApIHtcblx0XHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdLnNldCA9IHNldFBvc2l0aXZlTnVtYmVyO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0Y3NzOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0dmFyIHN0eWxlcywgbGVuLFxuXHRcdFx0XHRtYXAgPSB7fSxcblx0XHRcdFx0aSA9IDA7XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggbmFtZSApICkge1xuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKTtcblx0XHRcdFx0bGVuID0gbmFtZS5sZW5ndGg7XG5cblx0XHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdFx0bWFwWyBuYW1lWyBpIF0gXSA9IGpRdWVyeS5jc3MoIGVsZW0sIG5hbWVbIGkgXSwgZmFsc2UsIHN0eWxlcyApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIG1hcDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgP1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIG5hbWUsIHZhbHVlICkgOlxuXHRcdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBuYW1lICk7XG5cdFx0fSwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH1cbn0gKTtcblxuXG5mdW5jdGlvbiBUd2VlbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcgKSB7XG5cdHJldHVybiBuZXcgVHdlZW4ucHJvdG90eXBlLmluaXQoIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICk7XG59XG5qUXVlcnkuVHdlZW4gPSBUd2VlbjtcblxuVHdlZW4ucHJvdG90eXBlID0ge1xuXHRjb25zdHJ1Y3RvcjogVHdlZW4sXG5cdGluaXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZywgdW5pdCApIHtcblx0XHR0aGlzLmVsZW0gPSBlbGVtO1xuXHRcdHRoaXMucHJvcCA9IHByb3A7XG5cdFx0dGhpcy5lYXNpbmcgPSBlYXNpbmcgfHwgalF1ZXJ5LmVhc2luZy5fZGVmYXVsdDtcblx0XHR0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXHRcdHRoaXMuc3RhcnQgPSB0aGlzLm5vdyA9IHRoaXMuY3VyKCk7XG5cdFx0dGhpcy5lbmQgPSBlbmQ7XG5cdFx0dGhpcy51bml0ID0gdW5pdCB8fCAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSA/IFwiXCIgOiBcInB4XCIgKTtcblx0fSxcblx0Y3VyOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgaG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0cmV0dXJuIGhvb2tzICYmIGhvb2tzLmdldCA/XG5cdFx0XHRob29rcy5nZXQoIHRoaXMgKSA6XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KCB0aGlzICk7XG5cdH0sXG5cdHJ1bjogZnVuY3Rpb24oIHBlcmNlbnQgKSB7XG5cdFx0dmFyIGVhc2VkLFxuXHRcdFx0aG9va3MgPSBUd2Vlbi5wcm9wSG9va3NbIHRoaXMucHJvcCBdO1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuZHVyYXRpb24gKSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0galF1ZXJ5LmVhc2luZ1sgdGhpcy5lYXNpbmcgXShcblx0XHRcdFx0cGVyY2VudCwgdGhpcy5vcHRpb25zLmR1cmF0aW9uICogcGVyY2VudCwgMCwgMSwgdGhpcy5vcHRpb25zLmR1cmF0aW9uXG5cdFx0XHQpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnBvcyA9IGVhc2VkID0gcGVyY2VudDtcblx0XHR9XG5cdFx0dGhpcy5ub3cgPSAoIHRoaXMuZW5kIC0gdGhpcy5zdGFydCApICogZWFzZWQgKyB0aGlzLnN0YXJ0O1xuXG5cdFx0aWYgKCB0aGlzLm9wdGlvbnMuc3RlcCApIHtcblx0XHRcdHRoaXMub3B0aW9ucy5zdGVwLmNhbGwoIHRoaXMuZWxlbSwgdGhpcy5ub3csIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnNldCApIHtcblx0XHRcdGhvb2tzLnNldCggdGhpcyApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KCB0aGlzICk7XG5cdFx0fVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59O1xuXG5Ud2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGUgPSBUd2Vlbi5wcm90b3R5cGU7XG5cblR3ZWVuLnByb3BIb29rcyA9IHtcblx0X2RlZmF1bHQ6IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRcdHZhciByZXN1bHQ7XG5cblx0XHRcdC8vIFVzZSBhIHByb3BlcnR5IG9uIHRoZSBlbGVtZW50IGRpcmVjdGx5IHdoZW4gaXQgaXMgbm90IGEgRE9NIGVsZW1lbnQsXG5cdFx0XHQvLyBvciB3aGVuIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHN0eWxlIHByb3BlcnR5IHRoYXQgZXhpc3RzLlxuXHRcdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICE9PSAxIHx8XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSAhPSBudWxsICYmIHR3ZWVuLmVsZW0uc3R5bGVbIHR3ZWVuLnByb3AgXSA9PSBudWxsICkge1xuXHRcdFx0XHRyZXR1cm4gdHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXNzaW5nIGFuIGVtcHR5IHN0cmluZyBhcyBhIDNyZCBwYXJhbWV0ZXIgdG8gLmNzcyB3aWxsIGF1dG9tYXRpY2FsbHlcblx0XHRcdC8vIGF0dGVtcHQgYSBwYXJzZUZsb2F0IGFuZCBmYWxsYmFjayB0byBhIHN0cmluZyBpZiB0aGUgcGFyc2UgZmFpbHMuXG5cdFx0XHQvLyBTaW1wbGUgdmFsdWVzIHN1Y2ggYXMgXCIxMHB4XCIgYXJlIHBhcnNlZCB0byBGbG9hdDtcblx0XHRcdC8vIGNvbXBsZXggdmFsdWVzIHN1Y2ggYXMgXCJyb3RhdGUoMXJhZClcIiBhcmUgcmV0dXJuZWQgYXMtaXMuXG5cdFx0XHRyZXN1bHQgPSBqUXVlcnkuY3NzKCB0d2Vlbi5lbGVtLCB0d2Vlbi5wcm9wLCBcIlwiICk7XG5cblx0XHRcdC8vIEVtcHR5IHN0cmluZ3MsIG51bGwsIHVuZGVmaW5lZCBhbmQgXCJhdXRvXCIgYXJlIGNvbnZlcnRlZCB0byAwLlxuXHRcdFx0cmV0dXJuICFyZXN1bHQgfHwgcmVzdWx0ID09PSBcImF1dG9cIiA/IDAgOiByZXN1bHQ7XG5cdFx0fSxcblx0XHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblxuXHRcdFx0Ly8gVXNlIHN0ZXAgaG9vayBmb3IgYmFjayBjb21wYXQuXG5cdFx0XHQvLyBVc2UgY3NzSG9vayBpZiBpdHMgdGhlcmUuXG5cdFx0XHQvLyBVc2UgLnN0eWxlIGlmIGF2YWlsYWJsZSBhbmQgdXNlIHBsYWluIHByb3BlcnRpZXMgd2hlcmUgYXZhaWxhYmxlLlxuXHRcdFx0aWYgKCBqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdICkge1xuXHRcdFx0XHRqUXVlcnkuZnguc3RlcFsgdHdlZW4ucHJvcCBdKCB0d2VlbiApO1xuXHRcdFx0fSBlbHNlIGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSA9PT0gMSAmJlxuXHRcdFx0XHQoIHR3ZWVuLmVsZW0uc3R5bGVbIGpRdWVyeS5jc3NQcm9wc1sgdHdlZW4ucHJvcCBdIF0gIT0gbnVsbCB8fFxuXHRcdFx0XHRcdGpRdWVyeS5jc3NIb29rc1sgdHdlZW4ucHJvcCBdICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5zdHlsZSggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgdHdlZW4ubm93ICsgdHdlZW4udW5pdCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufTtcblxuLy8gU3VwcG9ydDogSUUgPD05IG9ubHlcbi8vIFBhbmljIGJhc2VkIGFwcHJvYWNoIHRvIHNldHRpbmcgdGhpbmdzIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuVHdlZW4ucHJvcEhvb2tzLnNjcm9sbFRvcCA9IFR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0ID0ge1xuXHRzZXQ6IGZ1bmN0aW9uKCB0d2VlbiApIHtcblx0XHRpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgJiYgdHdlZW4uZWxlbS5wYXJlbnROb2RlICkge1xuXHRcdFx0dHdlZW4uZWxlbVsgdHdlZW4ucHJvcCBdID0gdHdlZW4ubm93O1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmVhc2luZyA9IHtcblx0bGluZWFyOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gcDtcblx0fSxcblx0c3dpbmc6IGZ1bmN0aW9uKCBwICkge1xuXHRcdHJldHVybiAwLjUgLSBNYXRoLmNvcyggcCAqIE1hdGguUEkgKSAvIDI7XG5cdH0sXG5cdF9kZWZhdWx0OiBcInN3aW5nXCJcbn07XG5cbmpRdWVyeS5meCA9IFR3ZWVuLnByb3RvdHlwZS5pbml0O1xuXG4vLyBCYWNrIGNvbXBhdCA8MS44IGV4dGVuc2lvbiBwb2ludFxualF1ZXJ5LmZ4LnN0ZXAgPSB7fTtcblxuXG5cblxudmFyXG5cdGZ4Tm93LCBpblByb2dyZXNzLFxuXHRyZnh0eXBlcyA9IC9eKD86dG9nZ2xlfHNob3d8aGlkZSkkLyxcblx0cnJ1biA9IC9xdWV1ZUhvb2tzJC87XG5cbmZ1bmN0aW9uIHNjaGVkdWxlKCkge1xuXHRpZiAoIGluUHJvZ3Jlc3MgKSB7XG5cdFx0aWYgKCBkb2N1bWVudC5oaWRkZW4gPT09IGZhbHNlICYmIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgKSB7XG5cdFx0XHR3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCBzY2hlZHVsZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR3aW5kb3cuc2V0VGltZW91dCggc2NoZWR1bGUsIGpRdWVyeS5meC5pbnRlcnZhbCApO1xuXHRcdH1cblxuXHRcdGpRdWVyeS5meC50aWNrKCk7XG5cdH1cbn1cblxuLy8gQW5pbWF0aW9ucyBjcmVhdGVkIHN5bmNocm9ub3VzbHkgd2lsbCBydW4gc3luY2hyb25vdXNseVxuZnVuY3Rpb24gY3JlYXRlRnhOb3coKSB7XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRmeE5vdyA9IHVuZGVmaW5lZDtcblx0fSApO1xuXHRyZXR1cm4gKCBmeE5vdyA9IGpRdWVyeS5ub3coKSApO1xufVxuXG4vLyBHZW5lcmF0ZSBwYXJhbWV0ZXJzIHRvIGNyZWF0ZSBhIHN0YW5kYXJkIGFuaW1hdGlvblxuZnVuY3Rpb24gZ2VuRngoIHR5cGUsIGluY2x1ZGVXaWR0aCApIHtcblx0dmFyIHdoaWNoLFxuXHRcdGkgPSAwLFxuXHRcdGF0dHJzID0geyBoZWlnaHQ6IHR5cGUgfTtcblxuXHQvLyBJZiB3ZSBpbmNsdWRlIHdpZHRoLCBzdGVwIHZhbHVlIGlzIDEgdG8gZG8gYWxsIGNzc0V4cGFuZCB2YWx1ZXMsXG5cdC8vIG90aGVyd2lzZSBzdGVwIHZhbHVlIGlzIDIgdG8gc2tpcCBvdmVyIExlZnQgYW5kIFJpZ2h0XG5cdGluY2x1ZGVXaWR0aCA9IGluY2x1ZGVXaWR0aCA/IDEgOiAwO1xuXHRmb3IgKCA7IGkgPCA0OyBpICs9IDIgLSBpbmNsdWRlV2lkdGggKSB7XG5cdFx0d2hpY2ggPSBjc3NFeHBhbmRbIGkgXTtcblx0XHRhdHRyc1sgXCJtYXJnaW5cIiArIHdoaWNoIF0gPSBhdHRyc1sgXCJwYWRkaW5nXCIgKyB3aGljaCBdID0gdHlwZTtcblx0fVxuXG5cdGlmICggaW5jbHVkZVdpZHRoICkge1xuXHRcdGF0dHJzLm9wYWNpdHkgPSBhdHRycy53aWR0aCA9IHR5cGU7XG5cdH1cblxuXHRyZXR1cm4gYXR0cnM7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVR3ZWVuKCB2YWx1ZSwgcHJvcCwgYW5pbWF0aW9uICkge1xuXHR2YXIgdHdlZW4sXG5cdFx0Y29sbGVjdGlvbiA9ICggQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW10gKS5jb25jYXQoIEFuaW1hdGlvbi50d2VlbmVyc1sgXCIqXCIgXSApLFxuXHRcdGluZGV4ID0gMCxcblx0XHRsZW5ndGggPSBjb2xsZWN0aW9uLmxlbmd0aDtcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoICggdHdlZW4gPSBjb2xsZWN0aW9uWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgcHJvcCwgdmFsdWUgKSApICkge1xuXG5cdFx0XHQvLyBXZSdyZSBkb25lIHdpdGggdGhpcyBwcm9wZXJ0eVxuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKCBlbGVtLCBwcm9wcywgb3B0cyApIHtcblx0dmFyIHByb3AsIHZhbHVlLCB0b2dnbGUsIGhvb2tzLCBvbGRmaXJlLCBwcm9wVHdlZW4sIHJlc3RvcmVEaXNwbGF5LCBkaXNwbGF5LFxuXHRcdGlzQm94ID0gXCJ3aWR0aFwiIGluIHByb3BzIHx8IFwiaGVpZ2h0XCIgaW4gcHJvcHMsXG5cdFx0YW5pbSA9IHRoaXMsXG5cdFx0b3JpZyA9IHt9LFxuXHRcdHN0eWxlID0gZWxlbS5zdHlsZSxcblx0XHRoaWRkZW4gPSBlbGVtLm5vZGVUeXBlICYmIGlzSGlkZGVuV2l0aGluVHJlZSggZWxlbSApLFxuXHRcdGRhdGFTaG93ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImZ4c2hvd1wiICk7XG5cblx0Ly8gUXVldWUtc2tpcHBpbmcgYW5pbWF0aW9ucyBoaWphY2sgdGhlIGZ4IGhvb2tzXG5cdGlmICggIW9wdHMucXVldWUgKSB7XG5cdFx0aG9va3MgPSBqUXVlcnkuX3F1ZXVlSG9va3MoIGVsZW0sIFwiZnhcIiApO1xuXHRcdGlmICggaG9va3MudW5xdWV1ZWQgPT0gbnVsbCApIHtcblx0XHRcdGhvb2tzLnVucXVldWVkID0gMDtcblx0XHRcdG9sZGZpcmUgPSBob29rcy5lbXB0eS5maXJlO1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICFob29rcy51bnF1ZXVlZCApIHtcblx0XHRcdFx0XHRvbGRmaXJlKCk7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fVxuXHRcdGhvb2tzLnVucXVldWVkKys7XG5cblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIEVuc3VyZSB0aGUgY29tcGxldGUgaGFuZGxlciBpcyBjYWxsZWQgYmVmb3JlIHRoaXMgY29tcGxldGVzXG5cdFx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGhvb2tzLnVucXVldWVkLS07XG5cdFx0XHRcdGlmICggIWpRdWVyeS5xdWV1ZSggZWxlbSwgXCJmeFwiICkubGVuZ3RoICkge1xuXHRcdFx0XHRcdGhvb2tzLmVtcHR5LmZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIERldGVjdCBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRmb3IgKCBwcm9wIGluIHByb3BzICkge1xuXHRcdHZhbHVlID0gcHJvcHNbIHByb3AgXTtcblx0XHRpZiAoIHJmeHR5cGVzLnRlc3QoIHZhbHVlICkgKSB7XG5cdFx0XHRkZWxldGUgcHJvcHNbIHByb3AgXTtcblx0XHRcdHRvZ2dsZSA9IHRvZ2dsZSB8fCB2YWx1ZSA9PT0gXCJ0b2dnbGVcIjtcblx0XHRcdGlmICggdmFsdWUgPT09ICggaGlkZGVuID8gXCJoaWRlXCIgOiBcInNob3dcIiApICkge1xuXG5cdFx0XHRcdC8vIFByZXRlbmQgdG8gYmUgaGlkZGVuIGlmIHRoaXMgaXMgYSBcInNob3dcIiBhbmRcblx0XHRcdFx0Ly8gdGhlcmUgaXMgc3RpbGwgZGF0YSBmcm9tIGEgc3RvcHBlZCBzaG93L2hpZGVcblx0XHRcdFx0aWYgKCB2YWx1ZSA9PT0gXCJzaG93XCIgJiYgZGF0YVNob3cgJiYgZGF0YVNob3dbIHByb3AgXSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IHRydWU7XG5cblx0XHRcdFx0Ly8gSWdub3JlIGFsbCBvdGhlciBuby1vcCBzaG93L2hpZGUgZGF0YVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRvcmlnWyBwcm9wIF0gPSBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdIHx8IGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIEJhaWwgb3V0IGlmIHRoaXMgaXMgYSBuby1vcCBsaWtlIC5oaWRlKCkuaGlkZSgpXG5cdHByb3BUd2VlbiA9ICFqUXVlcnkuaXNFbXB0eU9iamVjdCggcHJvcHMgKTtcblx0aWYgKCAhcHJvcFR3ZWVuICYmIGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBvcmlnICkgKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gUmVzdHJpY3QgXCJvdmVyZmxvd1wiIGFuZCBcImRpc3BsYXlcIiBzdHlsZXMgZHVyaW5nIGJveCBhbmltYXRpb25zXG5cdGlmICggaXNCb3ggJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTNcblx0XHQvLyBSZWNvcmQgYWxsIDMgb3ZlcmZsb3cgYXR0cmlidXRlcyBiZWNhdXNlIElFIGRvZXMgbm90IGluZmVyIHRoZSBzaG9ydGhhbmRcblx0XHQvLyBmcm9tIGlkZW50aWNhbGx5LXZhbHVlZCBvdmVyZmxvd1ggYW5kIG92ZXJmbG93WVxuXHRcdG9wdHMub3ZlcmZsb3cgPSBbIHN0eWxlLm92ZXJmbG93LCBzdHlsZS5vdmVyZmxvd1gsIHN0eWxlLm92ZXJmbG93WSBdO1xuXG5cdFx0Ly8gSWRlbnRpZnkgYSBkaXNwbGF5IHR5cGUsIHByZWZlcnJpbmcgb2xkIHNob3cvaGlkZSBkYXRhIG92ZXIgdGhlIENTUyBjYXNjYWRlXG5cdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhU2hvdyAmJiBkYXRhU2hvdy5kaXNwbGF5O1xuXHRcdGlmICggcmVzdG9yZURpc3BsYXkgPT0gbnVsbCApIHtcblx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGF0YVByaXYuZ2V0KCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdH1cblx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRpZiAoIGRpc3BsYXkgPT09IFwibm9uZVwiICkge1xuXHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSApIHtcblx0XHRcdFx0ZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHQvLyBHZXQgbm9uZW1wdHkgdmFsdWUocykgYnkgdGVtcG9yYXJpbHkgZm9yY2luZyB2aXNpYmlsaXR5XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGVsZW0uc3R5bGUuZGlzcGxheSB8fCByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0ZGlzcGxheSA9IGpRdWVyeS5jc3MoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEFuaW1hdGUgaW5saW5lIGVsZW1lbnRzIGFzIGlubGluZS1ibG9ja1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJpbmxpbmVcIiB8fCBkaXNwbGF5ID09PSBcImlubGluZS1ibG9ja1wiICYmIHJlc3RvcmVEaXNwbGF5ICE9IG51bGwgKSB7XG5cdFx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwiZmxvYXRcIiApID09PSBcIm5vbmVcIiApIHtcblxuXHRcdFx0XHQvLyBSZXN0b3JlIHRoZSBvcmlnaW5hbCBkaXNwbGF5IHZhbHVlIGF0IHRoZSBlbmQgb2YgcHVyZSBzaG93L2hpZGUgYW5pbWF0aW9uc1xuXHRcdFx0XHRpZiAoICFwcm9wVHdlZW4gKSB7XG5cdFx0XHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSByZXN0b3JlRGlzcGxheTtcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0ZGlzcGxheSA9IHN0eWxlLmRpc3BsYXk7XG5cdFx0XHRcdFx0XHRyZXN0b3JlRGlzcGxheSA9IGRpc3BsYXkgPT09IFwibm9uZVwiID8gXCJcIiA6IGRpc3BsYXk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHN0eWxlLmRpc3BsYXkgPSBcImlubGluZS1ibG9ja1wiO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGlmICggb3B0cy5vdmVyZmxvdyApIHtcblx0XHRzdHlsZS5vdmVyZmxvdyA9IFwiaGlkZGVuXCI7XG5cdFx0YW5pbS5hbHdheXMoIGZ1bmN0aW9uKCkge1xuXHRcdFx0c3R5bGUub3ZlcmZsb3cgPSBvcHRzLm92ZXJmbG93WyAwIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1ggPSBvcHRzLm92ZXJmbG93WyAxIF07XG5cdFx0XHRzdHlsZS5vdmVyZmxvd1kgPSBvcHRzLm92ZXJmbG93WyAyIF07XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gSW1wbGVtZW50IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdHByb3BUd2VlbiA9IGZhbHNlO1xuXHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cblx0XHQvLyBHZW5lcmFsIHNob3cvaGlkZSBzZXR1cCBmb3IgdGhpcyBlbGVtZW50IGFuaW1hdGlvblxuXHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdGlmICggZGF0YVNob3cgKSB7XG5cdFx0XHRcdGlmICggXCJoaWRkZW5cIiBpbiBkYXRhU2hvdyApIHtcblx0XHRcdFx0XHRoaWRkZW4gPSBkYXRhU2hvdy5oaWRkZW47XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRhdGFTaG93ID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCBcImZ4c2hvd1wiLCB7IGRpc3BsYXk6IHJlc3RvcmVEaXNwbGF5IH0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RvcmUgaGlkZGVuL3Zpc2libGUgZm9yIHRvZ2dsZSBzbyBgLnN0b3AoKS50b2dnbGUoKWAgXCJyZXZlcnNlc1wiXG5cdFx0XHRpZiAoIHRvZ2dsZSApIHtcblx0XHRcdFx0ZGF0YVNob3cuaGlkZGVuID0gIWhpZGRlbjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBlbGVtZW50cyBiZWZvcmUgYW5pbWF0aW5nIHRoZW1cblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0sIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0LyogZXNsaW50LWRpc2FibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdGFuaW0uZG9uZSggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tbG9vcC1mdW5jICovXG5cblx0XHRcdFx0Ly8gVGhlIGZpbmFsIHN0ZXAgb2YgYSBcImhpZGVcIiBhbmltYXRpb24gaXMgYWN0dWFsbHkgaGlkaW5nIHRoZSBlbGVtZW50XG5cdFx0XHRcdGlmICggIWhpZGRlbiApIHtcblx0XHRcdFx0XHRzaG93SGlkZSggWyBlbGVtIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiZnhzaG93XCIgKTtcblx0XHRcdFx0Zm9yICggcHJvcCBpbiBvcmlnICkge1xuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgb3JpZ1sgcHJvcCBdICk7XG5cdFx0XHRcdH1cblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHQvLyBQZXItcHJvcGVydHkgc2V0dXBcblx0XHRwcm9wVHdlZW4gPSBjcmVhdGVUd2VlbiggaGlkZGVuID8gZGF0YVNob3dbIHByb3AgXSA6IDAsIHByb3AsIGFuaW0gKTtcblx0XHRpZiAoICEoIHByb3AgaW4gZGF0YVNob3cgKSApIHtcblx0XHRcdGRhdGFTaG93WyBwcm9wIF0gPSBwcm9wVHdlZW4uc3RhcnQ7XG5cdFx0XHRpZiAoIGhpZGRlbiApIHtcblx0XHRcdFx0cHJvcFR3ZWVuLmVuZCA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdFx0cHJvcFR3ZWVuLnN0YXJ0ID0gMDtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gcHJvcEZpbHRlciggcHJvcHMsIHNwZWNpYWxFYXNpbmcgKSB7XG5cdHZhciBpbmRleCwgbmFtZSwgZWFzaW5nLCB2YWx1ZSwgaG9va3M7XG5cblx0Ly8gY2FtZWxDYXNlLCBzcGVjaWFsRWFzaW5nIGFuZCBleHBhbmQgY3NzSG9vayBwYXNzXG5cdGZvciAoIGluZGV4IGluIHByb3BzICkge1xuXHRcdG5hbWUgPSBqUXVlcnkuY2FtZWxDYXNlKCBpbmRleCApO1xuXHRcdGVhc2luZyA9IHNwZWNpYWxFYXNpbmdbIG5hbWUgXTtcblx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdO1xuXHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdGVhc2luZyA9IHZhbHVlWyAxIF07XG5cdFx0XHR2YWx1ZSA9IHByb3BzWyBpbmRleCBdID0gdmFsdWVbIDAgXTtcblx0XHR9XG5cblx0XHRpZiAoIGluZGV4ICE9PSBuYW1lICkge1xuXHRcdFx0cHJvcHNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBpbmRleCBdO1xuXHRcdH1cblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF07XG5cdFx0aWYgKCBob29rcyAmJiBcImV4cGFuZFwiIGluIGhvb2tzICkge1xuXHRcdFx0dmFsdWUgPSBob29rcy5leHBhbmQoIHZhbHVlICk7XG5cdFx0XHRkZWxldGUgcHJvcHNbIG5hbWUgXTtcblxuXHRcdFx0Ly8gTm90IHF1aXRlICQuZXh0ZW5kLCB0aGlzIHdvbid0IG92ZXJ3cml0ZSBleGlzdGluZyBrZXlzLlxuXHRcdFx0Ly8gUmV1c2luZyAnaW5kZXgnIGJlY2F1c2Ugd2UgaGF2ZSB0aGUgY29ycmVjdCBcIm5hbWVcIlxuXHRcdFx0Zm9yICggaW5kZXggaW4gdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggISggaW5kZXggaW4gcHJvcHMgKSApIHtcblx0XHRcdFx0XHRwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyBpbmRleCBdO1xuXHRcdFx0XHRcdHNwZWNpYWxFYXNpbmdbIGluZGV4IF0gPSBlYXNpbmc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0c3BlY2lhbEVhc2luZ1sgbmFtZSBdID0gZWFzaW5nO1xuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBBbmltYXRpb24oIGVsZW0sIHByb3BlcnRpZXMsIG9wdGlvbnMgKSB7XG5cdHZhciByZXN1bHQsXG5cdFx0c3RvcHBlZCxcblx0XHRpbmRleCA9IDAsXG5cdFx0bGVuZ3RoID0gQW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLFxuXHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCkuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRG9uJ3QgbWF0Y2ggZWxlbSBpbiB0aGUgOmFuaW1hdGVkIHNlbGVjdG9yXG5cdFx0XHRkZWxldGUgdGljay5lbGVtO1xuXHRcdH0gKSxcblx0XHR0aWNrID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIHN0b3BwZWQgKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHRcdHZhciBjdXJyZW50VGltZSA9IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRcdHJlbWFpbmluZyA9IE1hdGgubWF4KCAwLCBhbmltYXRpb24uc3RhcnRUaW1lICsgYW5pbWF0aW9uLmR1cmF0aW9uIC0gY3VycmVudFRpbWUgKSxcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBBbmRyb2lkIDIuMyBvbmx5XG5cdFx0XHRcdC8vIEFyY2hhaWMgY3Jhc2ggYnVnIHdvbid0IGFsbG93IHVzIHRvIHVzZSBgMSAtICggMC41IHx8IDAgKWAgKCMxMjQ5Nylcblx0XHRcdFx0dGVtcCA9IHJlbWFpbmluZyAvIGFuaW1hdGlvbi5kdXJhdGlvbiB8fCAwLFxuXHRcdFx0XHRwZXJjZW50ID0gMSAtIHRlbXAsXG5cdFx0XHRcdGluZGV4ID0gMCxcblx0XHRcdFx0bGVuZ3RoID0gYW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7XG5cblx0XHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCBwZXJjZW50ICk7XG5cdFx0XHR9XG5cblx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBwZXJjZW50LCByZW1haW5pbmcgXSApO1xuXG5cdFx0XHQvLyBJZiB0aGVyZSdzIG1vcmUgdG8gZG8sIHlpZWxkXG5cdFx0XHRpZiAoIHBlcmNlbnQgPCAxICYmIGxlbmd0aCApIHtcblx0XHRcdFx0cmV0dXJuIHJlbWFpbmluZztcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhpcyB3YXMgYW4gZW1wdHkgYW5pbWF0aW9uLCBzeW50aGVzaXplIGEgZmluYWwgcHJvZ3Jlc3Mgbm90aWZpY2F0aW9uXG5cdFx0XHRpZiAoICFsZW5ndGggKSB7XG5cdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVzb2x2ZSB0aGUgYW5pbWF0aW9uIGFuZCByZXBvcnQgaXRzIGNvbmNsdXNpb25cblx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiBdICk7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSxcblx0XHRhbmltYXRpb24gPSBkZWZlcnJlZC5wcm9taXNlKCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0cHJvcHM6IGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wZXJ0aWVzICksXG5cdFx0XHRvcHRzOiBqUXVlcnkuZXh0ZW5kKCB0cnVlLCB7XG5cdFx0XHRcdHNwZWNpYWxFYXNpbmc6IHt9LFxuXHRcdFx0XHRlYXNpbmc6IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHRcblx0XHRcdH0sIG9wdGlvbnMgKSxcblx0XHRcdG9yaWdpbmFsUHJvcGVydGllczogcHJvcGVydGllcyxcblx0XHRcdG9yaWdpbmFsT3B0aW9uczogb3B0aW9ucyxcblx0XHRcdHN0YXJ0VGltZTogZnhOb3cgfHwgY3JlYXRlRnhOb3coKSxcblx0XHRcdGR1cmF0aW9uOiBvcHRpb25zLmR1cmF0aW9uLFxuXHRcdFx0dHdlZW5zOiBbXSxcblx0XHRcdGNyZWF0ZVR3ZWVuOiBmdW5jdGlvbiggcHJvcCwgZW5kICkge1xuXHRcdFx0XHR2YXIgdHdlZW4gPSBqUXVlcnkuVHdlZW4oIGVsZW0sIGFuaW1hdGlvbi5vcHRzLCBwcm9wLCBlbmQsXG5cdFx0XHRcdFx0XHRhbmltYXRpb24ub3B0cy5zcGVjaWFsRWFzaW5nWyBwcm9wIF0gfHwgYW5pbWF0aW9uLm9wdHMuZWFzaW5nICk7XG5cdFx0XHRcdGFuaW1hdGlvbi50d2VlbnMucHVzaCggdHdlZW4gKTtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdFx0fSxcblx0XHRcdHN0b3A6IGZ1bmN0aW9uKCBnb3RvRW5kICkge1xuXHRcdFx0XHR2YXIgaW5kZXggPSAwLFxuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgYXJlIGdvaW5nIHRvIHRoZSBlbmQsIHdlIHdhbnQgdG8gcnVuIGFsbCB0aGUgdHdlZW5zXG5cdFx0XHRcdFx0Ly8gb3RoZXJ3aXNlIHdlIHNraXAgdGhpcyBwYXJ0XG5cdFx0XHRcdFx0bGVuZ3RoID0gZ290b0VuZCA/IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoIDogMDtcblx0XHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHN0b3BwZWQgPSB0cnVlO1xuXHRcdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRcdGFuaW1hdGlvbi50d2VlbnNbIGluZGV4IF0ucnVuKCAxICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZXNvbHZlIHdoZW4gd2UgcGxheWVkIHRoZSBsYXN0IGZyYW1lOyBvdGhlcndpc2UsIHJlamVjdFxuXHRcdFx0XHRpZiAoIGdvdG9FbmQgKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQubm90aWZ5V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIDEsIDAgXSApO1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgZ290b0VuZCBdICk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fVxuXHRcdH0gKSxcblx0XHRwcm9wcyA9IGFuaW1hdGlvbi5wcm9wcztcblxuXHRwcm9wRmlsdGVyKCBwcm9wcywgYW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZyApO1xuXG5cdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0cmVzdWx0ID0gQW5pbWF0aW9uLnByZWZpbHRlcnNbIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBlbGVtLCBwcm9wcywgYW5pbWF0aW9uLm9wdHMgKTtcblx0XHRpZiAoIHJlc3VsdCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0alF1ZXJ5LnByb3h5KCByZXN1bHQuc3RvcCwgcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggYW5pbWF0aW9uLm9wdHMuc3RhcnQgKSApIHtcblx0XHRhbmltYXRpb24ub3B0cy5zdGFydC5jYWxsKCBlbGVtLCBhbmltYXRpb24gKTtcblx0fVxuXG5cdC8vIEF0dGFjaCBjYWxsYmFja3MgZnJvbSBvcHRpb25zXG5cdGFuaW1hdGlvblxuXHRcdC5wcm9ncmVzcyggYW5pbWF0aW9uLm9wdHMucHJvZ3Jlc3MgKVxuXHRcdC5kb25lKCBhbmltYXRpb24ub3B0cy5kb25lLCBhbmltYXRpb24ub3B0cy5jb21wbGV0ZSApXG5cdFx0LmZhaWwoIGFuaW1hdGlvbi5vcHRzLmZhaWwgKVxuXHRcdC5hbHdheXMoIGFuaW1hdGlvbi5vcHRzLmFsd2F5cyApO1xuXG5cdGpRdWVyeS5meC50aW1lcihcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aWNrLCB7XG5cdFx0XHRlbGVtOiBlbGVtLFxuXHRcdFx0YW5pbTogYW5pbWF0aW9uLFxuXHRcdFx0cXVldWU6IGFuaW1hdGlvbi5vcHRzLnF1ZXVlXG5cdFx0fSApXG5cdCk7XG5cblx0cmV0dXJuIGFuaW1hdGlvbjtcbn1cblxualF1ZXJ5LkFuaW1hdGlvbiA9IGpRdWVyeS5leHRlbmQoIEFuaW1hdGlvbiwge1xuXG5cdHR3ZWVuZXJzOiB7XG5cdFx0XCIqXCI6IFsgZnVuY3Rpb24oIHByb3AsIHZhbHVlICkge1xuXHRcdFx0dmFyIHR3ZWVuID0gdGhpcy5jcmVhdGVUd2VlbiggcHJvcCwgdmFsdWUgKTtcblx0XHRcdGFkanVzdENTUyggdHdlZW4uZWxlbSwgcHJvcCwgcmNzc051bS5leGVjKCB2YWx1ZSApLCB0d2VlbiApO1xuXHRcdFx0cmV0dXJuIHR3ZWVuO1xuXHRcdH0gXVxuXHR9LFxuXG5cdHR3ZWVuZXI6IGZ1bmN0aW9uKCBwcm9wcywgY2FsbGJhY2sgKSB7XG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggcHJvcHMgKSApIHtcblx0XHRcdGNhbGxiYWNrID0gcHJvcHM7XG5cdFx0XHRwcm9wcyA9IFsgXCIqXCIgXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cHJvcHMgPSBwcm9wcy5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXHRcdH1cblxuXHRcdHZhciBwcm9wLFxuXHRcdFx0aW5kZXggPSAwLFxuXHRcdFx0bGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG5cdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdHByb3AgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRcdEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdID0gQW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0gfHwgW107XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXS51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH1cblx0fSxcblxuXHRwcmVmaWx0ZXJzOiBbIGRlZmF1bHRQcmVmaWx0ZXIgXSxcblxuXHRwcmVmaWx0ZXI6IGZ1bmN0aW9uKCBjYWxsYmFjaywgcHJlcGVuZCApIHtcblx0XHRpZiAoIHByZXBlbmQgKSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KCBjYWxsYmFjayApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKCBjYWxsYmFjayApO1xuXHRcdH1cblx0fVxufSApO1xuXG5qUXVlcnkuc3BlZWQgPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgZm4gKSB7XG5cdHZhciBvcHQgPSBzcGVlZCAmJiB0eXBlb2Ygc3BlZWQgPT09IFwib2JqZWN0XCIgPyBqUXVlcnkuZXh0ZW5kKCB7fSwgc3BlZWQgKSA6IHtcblx0XHRjb21wbGV0ZTogZm4gfHwgIWZuICYmIGVhc2luZyB8fFxuXHRcdFx0alF1ZXJ5LmlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhalF1ZXJ5LmlzRnVuY3Rpb24oIGVhc2luZyApICYmIGVhc2luZ1xuXHR9O1xuXG5cdC8vIEdvIHRvIHRoZSBlbmQgc3RhdGUgaWYgZnggYXJlIG9mZlxuXHRpZiAoIGpRdWVyeS5meC5vZmYgKSB7XG5cdFx0b3B0LmR1cmF0aW9uID0gMDtcblxuXHR9IGVsc2Uge1xuXHRcdGlmICggdHlwZW9mIG9wdC5kdXJhdGlvbiAhPT0gXCJudW1iZXJcIiApIHtcblx0XHRcdGlmICggb3B0LmR1cmF0aW9uIGluIGpRdWVyeS5meC5zcGVlZHMgKSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHNbIG9wdC5kdXJhdGlvbiBdO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRvcHQuZHVyYXRpb24gPSBqUXVlcnkuZnguc3BlZWRzLl9kZWZhdWx0O1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIE5vcm1hbGl6ZSBvcHQucXVldWUgLSB0cnVlL3VuZGVmaW5lZC9udWxsIC0+IFwiZnhcIlxuXHRpZiAoIG9wdC5xdWV1ZSA9PSBudWxsIHx8IG9wdC5xdWV1ZSA9PT0gdHJ1ZSApIHtcblx0XHRvcHQucXVldWUgPSBcImZ4XCI7XG5cdH1cblxuXHQvLyBRdWV1ZWluZ1xuXHRvcHQub2xkID0gb3B0LmNvbXBsZXRlO1xuXG5cdG9wdC5jb21wbGV0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIG9wdC5vbGQgKSApIHtcblx0XHRcdG9wdC5vbGQuY2FsbCggdGhpcyApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0LnF1ZXVlICkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIG9wdC5xdWV1ZSApO1xuXHRcdH1cblx0fTtcblxuXHRyZXR1cm4gb3B0O1xufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRmYWRlVG86IGZ1bmN0aW9uKCBzcGVlZCwgdG8sIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cblx0XHQvLyBTaG93IGFueSBoaWRkZW4gZWxlbWVudHMgYWZ0ZXIgc2V0dGluZyBvcGFjaXR5IHRvIDBcblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGlzSGlkZGVuV2l0aGluVHJlZSApLmNzcyggXCJvcGFjaXR5XCIsIDAgKS5zaG93KClcblxuXHRcdFx0Ly8gQW5pbWF0ZSB0byB0aGUgdmFsdWUgc3BlY2lmaWVkXG5cdFx0XHQuZW5kKCkuYW5pbWF0ZSggeyBvcGFjaXR5OiB0byB9LCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9LFxuXHRhbmltYXRlOiBmdW5jdGlvbiggcHJvcCwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGVtcHR5ID0galF1ZXJ5LmlzRW1wdHlPYmplY3QoIHByb3AgKSxcblx0XHRcdG9wdGFsbCA9IGpRdWVyeS5zcGVlZCggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSxcblx0XHRcdGRvQW5pbWF0aW9uID0gZnVuY3Rpb24oKSB7XG5cblx0XHRcdFx0Ly8gT3BlcmF0ZSBvbiBhIGNvcHkgb2YgcHJvcCBzbyBwZXItcHJvcGVydHkgZWFzaW5nIHdvbid0IGJlIGxvc3Rcblx0XHRcdFx0dmFyIGFuaW0gPSBBbmltYXRpb24oIHRoaXMsIGpRdWVyeS5leHRlbmQoIHt9LCBwcm9wICksIG9wdGFsbCApO1xuXG5cdFx0XHRcdC8vIEVtcHR5IGFuaW1hdGlvbnMsIG9yIGZpbmlzaGluZyByZXNvbHZlcyBpbW1lZGlhdGVseVxuXHRcdFx0XHRpZiAoIGVtcHR5IHx8IGRhdGFQcml2LmdldCggdGhpcywgXCJmaW5pc2hcIiApICkge1xuXHRcdFx0XHRcdGFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdFx0ZG9BbmltYXRpb24uZmluaXNoID0gZG9BbmltYXRpb247XG5cblx0XHRyZXR1cm4gZW1wdHkgfHwgb3B0YWxsLnF1ZXVlID09PSBmYWxzZSA/XG5cdFx0XHR0aGlzLmVhY2goIGRvQW5pbWF0aW9uICkgOlxuXHRcdFx0dGhpcy5xdWV1ZSggb3B0YWxsLnF1ZXVlLCBkb0FuaW1hdGlvbiApO1xuXHR9LFxuXHRzdG9wOiBmdW5jdGlvbiggdHlwZSwgY2xlYXJRdWV1ZSwgZ290b0VuZCApIHtcblx0XHR2YXIgc3RvcFF1ZXVlID0gZnVuY3Rpb24oIGhvb2tzICkge1xuXHRcdFx0dmFyIHN0b3AgPSBob29rcy5zdG9wO1xuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRzdG9wKCBnb3RvRW5kICk7XG5cdFx0fTtcblxuXHRcdGlmICggdHlwZW9mIHR5cGUgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRnb3RvRW5kID0gY2xlYXJRdWV1ZTtcblx0XHRcdGNsZWFyUXVldWUgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBjbGVhclF1ZXVlICYmIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dGhpcy5xdWV1ZSggdHlwZSB8fCBcImZ4XCIsIFtdICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGVxdWV1ZSA9IHRydWUsXG5cdFx0XHRcdGluZGV4ID0gdHlwZSAhPSBudWxsICYmIHR5cGUgKyBcInF1ZXVlSG9va3NcIixcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApO1xuXG5cdFx0XHRpZiAoIGluZGV4ICkge1xuXHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICkge1xuXHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRmb3IgKCBpbmRleCBpbiBkYXRhICkge1xuXHRcdFx0XHRcdGlmICggZGF0YVsgaW5kZXggXSAmJiBkYXRhWyBpbmRleCBdLnN0b3AgJiYgcnJ1bi50ZXN0KCBpbmRleCApICkge1xuXHRcdFx0XHRcdFx0c3RvcFF1ZXVlKCBkYXRhWyBpbmRleCBdICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiZcblx0XHRcdFx0XHQoIHR5cGUgPT0gbnVsbCB8fCB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSApIHtcblxuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIGdvdG9FbmQgKTtcblx0XHRcdFx0XHRkZXF1ZXVlID0gZmFsc2U7XG5cdFx0XHRcdFx0dGltZXJzLnNwbGljZSggaW5kZXgsIDEgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGFydCB0aGUgbmV4dCBpbiB0aGUgcXVldWUgaWYgdGhlIGxhc3Qgc3RlcCB3YXNuJ3QgZm9yY2VkLlxuXHRcdFx0Ly8gVGltZXJzIGN1cnJlbnRseSB3aWxsIGNhbGwgdGhlaXIgY29tcGxldGUgY2FsbGJhY2tzLCB3aGljaFxuXHRcdFx0Ly8gd2lsbCBkZXF1ZXVlIGJ1dCBvbmx5IGlmIHRoZXkgd2VyZSBnb3RvRW5kLlxuXHRcdFx0aWYgKCBkZXF1ZXVlIHx8ICFnb3RvRW5kICkge1xuXHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblx0ZmluaXNoOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRpZiAoIHR5cGUgIT09IGZhbHNlICkge1xuXHRcdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBpbmRleCxcblx0XHRcdFx0ZGF0YSA9IGRhdGFQcml2LmdldCggdGhpcyApLFxuXHRcdFx0XHRxdWV1ZSA9IGRhdGFbIHR5cGUgKyBcInF1ZXVlXCIgXSxcblx0XHRcdFx0aG9va3MgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZUhvb2tzXCIgXSxcblx0XHRcdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycyxcblx0XHRcdFx0bGVuZ3RoID0gcXVldWUgPyBxdWV1ZS5sZW5ndGggOiAwO1xuXG5cdFx0XHQvLyBFbmFibGUgZmluaXNoaW5nIGZsYWcgb24gcHJpdmF0ZSBkYXRhXG5cdFx0XHRkYXRhLmZpbmlzaCA9IHRydWU7XG5cblx0XHRcdC8vIEVtcHR5IHRoZSBxdWV1ZSBmaXJzdFxuXHRcdFx0alF1ZXJ5LnF1ZXVlKCB0aGlzLCB0eXBlLCBbXSApO1xuXG5cdFx0XHRpZiAoIGhvb2tzICYmIGhvb2tzLnN0b3AgKSB7XG5cdFx0XHRcdGhvb2tzLnN0b3AuY2FsbCggdGhpcywgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBMb29rIGZvciBhbnkgYWN0aXZlIGFuaW1hdGlvbnMsIGFuZCBmaW5pc2ggdGhlbVxuXHRcdFx0Zm9yICggaW5kZXggPSB0aW1lcnMubGVuZ3RoOyBpbmRleC0tOyApIHtcblx0XHRcdFx0aWYgKCB0aW1lcnNbIGluZGV4IF0uZWxlbSA9PT0gdGhpcyAmJiB0aW1lcnNbIGluZGV4IF0ucXVldWUgPT09IHR5cGUgKSB7XG5cdFx0XHRcdFx0dGltZXJzWyBpbmRleCBdLmFuaW0uc3RvcCggdHJ1ZSApO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFuaW1hdGlvbnMgaW4gdGhlIG9sZCBxdWV1ZSBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRcdGlmICggcXVldWVbIGluZGV4IF0gJiYgcXVldWVbIGluZGV4IF0uZmluaXNoICkge1xuXHRcdFx0XHRcdHF1ZXVlWyBpbmRleCBdLmZpbmlzaC5jYWxsKCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gVHVybiBvZmYgZmluaXNoaW5nIGZsYWdcblx0XHRcdGRlbGV0ZSBkYXRhLmZpbmlzaDtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJ0b2dnbGVcIiwgXCJzaG93XCIsIFwiaGlkZVwiIF0sIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgY3NzRm4gPSBqUXVlcnkuZm5bIG5hbWUgXTtcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIHNwZWVkID09IG51bGwgfHwgdHlwZW9mIHNwZWVkID09PSBcImJvb2xlYW5cIiA/XG5cdFx0XHRjc3NGbi5hcHBseSggdGhpcywgYXJndW1lbnRzICkgOlxuXHRcdFx0dGhpcy5hbmltYXRlKCBnZW5GeCggbmFtZSwgdHJ1ZSApLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG4vLyBHZW5lcmF0ZSBzaG9ydGN1dHMgZm9yIGN1c3RvbSBhbmltYXRpb25zXG5qUXVlcnkuZWFjaCgge1xuXHRzbGlkZURvd246IGdlbkZ4KCBcInNob3dcIiApLFxuXHRzbGlkZVVwOiBnZW5GeCggXCJoaWRlXCIgKSxcblx0c2xpZGVUb2dnbGU6IGdlbkZ4KCBcInRvZ2dsZVwiICksXG5cdGZhZGVJbjogeyBvcGFjaXR5OiBcInNob3dcIiB9LFxuXHRmYWRlT3V0OiB7IG9wYWNpdHk6IFwiaGlkZVwiIH0sXG5cdGZhZGVUb2dnbGU6IHsgb3BhY2l0eTogXCJ0b2dnbGVcIiB9XG59LCBmdW5jdGlvbiggbmFtZSwgcHJvcHMgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLmFuaW1hdGUoIHByb3BzLCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApO1xuXHR9O1xufSApO1xuXG5qUXVlcnkudGltZXJzID0gW107XG5qUXVlcnkuZngudGljayA9IGZ1bmN0aW9uKCkge1xuXHR2YXIgdGltZXIsXG5cdFx0aSA9IDAsXG5cdFx0dGltZXJzID0galF1ZXJ5LnRpbWVycztcblxuXHRmeE5vdyA9IGpRdWVyeS5ub3coKTtcblxuXHRmb3IgKCA7IGkgPCB0aW1lcnMubGVuZ3RoOyBpKysgKSB7XG5cdFx0dGltZXIgPSB0aW1lcnNbIGkgXTtcblxuXHRcdC8vIFJ1biB0aGUgdGltZXIgYW5kIHNhZmVseSByZW1vdmUgaXQgd2hlbiBkb25lIChhbGxvd2luZyBmb3IgZXh0ZXJuYWwgcmVtb3ZhbClcblx0XHRpZiAoICF0aW1lcigpICYmIHRpbWVyc1sgaSBdID09PSB0aW1lciApIHtcblx0XHRcdHRpbWVycy5zcGxpY2UoIGktLSwgMSApO1xuXHRcdH1cblx0fVxuXG5cdGlmICggIXRpbWVycy5sZW5ndGggKSB7XG5cdFx0alF1ZXJ5LmZ4LnN0b3AoKTtcblx0fVxuXHRmeE5vdyA9IHVuZGVmaW5lZDtcbn07XG5cbmpRdWVyeS5meC50aW1lciA9IGZ1bmN0aW9uKCB0aW1lciApIHtcblx0alF1ZXJ5LnRpbWVycy5wdXNoKCB0aW1lciApO1xuXHRqUXVlcnkuZnguc3RhcnQoKTtcbn07XG5cbmpRdWVyeS5meC5pbnRlcnZhbCA9IDEzO1xualF1ZXJ5LmZ4LnN0YXJ0ID0gZnVuY3Rpb24oKSB7XG5cdGlmICggaW5Qcm9ncmVzcyApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRpblByb2dyZXNzID0gdHJ1ZTtcblx0c2NoZWR1bGUoKTtcbn07XG5cbmpRdWVyeS5meC5zdG9wID0gZnVuY3Rpb24oKSB7XG5cdGluUHJvZ3Jlc3MgPSBudWxsO1xufTtcblxualF1ZXJ5LmZ4LnNwZWVkcyA9IHtcblx0c2xvdzogNjAwLFxuXHRmYXN0OiAyMDAsXG5cblx0Ly8gRGVmYXVsdCBzcGVlZFxuXHRfZGVmYXVsdDogNDAwXG59O1xuXG5cbi8vIEJhc2VkIG9mZiBvZiB0aGUgcGx1Z2luIGJ5IENsaW50IEhlbGZlcnMsIHdpdGggcGVybWlzc2lvbi5cbi8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDEwMDMyNDAxNDc0Ny9odHRwOi8vYmxpbmRzaWduYWxzLmNvbS9pbmRleC5waHAvMjAwOS8wNy9qcXVlcnktZGVsYXkvXG5qUXVlcnkuZm4uZGVsYXkgPSBmdW5jdGlvbiggdGltZSwgdHlwZSApIHtcblx0dGltZSA9IGpRdWVyeS5meCA/IGpRdWVyeS5meC5zcGVlZHNbIHRpbWUgXSB8fCB0aW1lIDogdGltZTtcblx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlLCBmdW5jdGlvbiggbmV4dCwgaG9va3MgKSB7XG5cdFx0dmFyIHRpbWVvdXQgPSB3aW5kb3cuc2V0VGltZW91dCggbmV4dCwgdGltZSApO1xuXHRcdGhvb2tzLnN0b3AgPSBmdW5jdGlvbigpIHtcblx0XHRcdHdpbmRvdy5jbGVhclRpbWVvdXQoIHRpbWVvdXQgKTtcblx0XHR9O1xuXHR9ICk7XG59O1xuXG5cbiggZnVuY3Rpb24oKSB7XG5cdHZhciBpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApLFxuXHRcdHNlbGVjdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwic2VsZWN0XCIgKSxcblx0XHRvcHQgPSBzZWxlY3QuYXBwZW5kQ2hpbGQoIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwib3B0aW9uXCIgKSApO1xuXG5cdGlucHV0LnR5cGUgPSBcImNoZWNrYm94XCI7XG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMyBvbmx5XG5cdC8vIERlZmF1bHQgdmFsdWUgZm9yIGEgY2hlY2tib3ggc2hvdWxkIGJlIFwib25cIlxuXHRzdXBwb3J0LmNoZWNrT24gPSBpbnB1dC52YWx1ZSAhPT0gXCJcIjtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gTXVzdCBhY2Nlc3Mgc2VsZWN0ZWRJbmRleCB0byBtYWtlIGRlZmF1bHQgb3B0aW9ucyBzZWxlY3Rcblx0c3VwcG9ydC5vcHRTZWxlY3RlZCA9IG9wdC5zZWxlY3RlZDtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0Ly8gQW4gaW5wdXQgbG9zZXMgaXRzIHZhbHVlIGFmdGVyIGJlY29taW5nIGEgcmFkaW9cblx0aW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImlucHV0XCIgKTtcblx0aW5wdXQudmFsdWUgPSBcInRcIjtcblx0aW5wdXQudHlwZSA9IFwicmFkaW9cIjtcblx0c3VwcG9ydC5yYWRpb1ZhbHVlID0gaW5wdXQudmFsdWUgPT09IFwidFwiO1xufSApKCk7XG5cblxudmFyIGJvb2xIb29rLFxuXHRhdHRySGFuZGxlID0galF1ZXJ5LmV4cHIuYXR0ckhhbmRsZTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgalF1ZXJ5LmF0dHIsIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9LFxuXG5cdHJlbW92ZUF0dHI6IGZ1bmN0aW9uKCBuYW1lICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIHRoaXMsIG5hbWUgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRhdHRyOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IGF0dHJpYnV0ZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBGYWxsYmFjayB0byBwcm9wIHdoZW4gYXR0cmlidXRlcyBhcmUgbm90IHN1cHBvcnRlZFxuXHRcdGlmICggdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlID09PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5wcm9wKCBlbGVtLCBuYW1lLCB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdC8vIEF0dHJpYnV0ZSBob29rcyBhcmUgZGV0ZXJtaW5lZCBieSB0aGUgbG93ZXJjYXNlIHZlcnNpb25cblx0XHQvLyBHcmFiIG5lY2Vzc2FyeSBob29rIGlmIG9uZSBpcyBkZWZpbmVkXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5hdHRySG9va3NbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC50ZXN0KCBuYW1lICkgPyBib29sSG9vayA6IHVuZGVmaW5lZCApO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdmFsdWUgPT09IG51bGwgKSB7XG5cdFx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCBob29rcyAmJiBcInNldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdCggcmV0ID0gaG9va3Muc2V0KCBlbGVtLCB2YWx1ZSwgbmFtZSApICkgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0ZWxlbS5zZXRBdHRyaWJ1dGUoIG5hbWUsIHZhbHVlICsgXCJcIiApO1xuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIG5hbWUgKTtcblxuXHRcdC8vIE5vbi1leGlzdGVudCBhdHRyaWJ1dGVzIHJldHVybiBudWxsLCB3ZSBub3JtYWxpemUgdG8gdW5kZWZpbmVkXG5cdFx0cmV0dXJuIHJldCA9PSBudWxsID8gdW5kZWZpbmVkIDogcmV0O1xuXHR9LFxuXG5cdGF0dHJIb29rczoge1xuXHRcdHR5cGU6IHtcblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICFzdXBwb3J0LnJhZGlvVmFsdWUgJiYgdmFsdWUgPT09IFwicmFkaW9cIiAmJlxuXHRcdFx0XHRcdG5vZGVOYW1lKCBlbGVtLCBcImlucHV0XCIgKSApIHtcblx0XHRcdFx0XHR2YXIgdmFsID0gZWxlbS52YWx1ZTtcblx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJ0eXBlXCIsIHZhbHVlICk7XG5cdFx0XHRcdFx0aWYgKCB2YWwgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnZhbHVlID0gdmFsO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdHZhciBuYW1lLFxuXHRcdFx0aSA9IDAsXG5cblx0XHRcdC8vIEF0dHJpYnV0ZSBuYW1lcyBjYW4gY29udGFpbiBub24tSFRNTCB3aGl0ZXNwYWNlIGNoYXJhY3RlcnNcblx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3N5bnRheC5odG1sI2F0dHJpYnV0ZXMtMlxuXHRcdFx0YXR0ck5hbWVzID0gdmFsdWUgJiYgdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblxuXHRcdGlmICggYXR0ck5hbWVzICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0XHR3aGlsZSAoICggbmFtZSA9IGF0dHJOYW1lc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIG5hbWUgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSG9va3MgZm9yIGJvb2xlYW4gYXR0cmlidXRlc1xuYm9vbEhvb2sgPSB7XG5cdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBuYW1lICkge1xuXHRcdGlmICggdmFsdWUgPT09IGZhbHNlICkge1xuXG5cdFx0XHQvLyBSZW1vdmUgYm9vbGVhbiBhdHRyaWJ1dGVzIHdoZW4gc2V0IHRvIGZhbHNlXG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggZWxlbSwgbmFtZSApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgbmFtZSApO1xuXHRcdH1cblx0XHRyZXR1cm4gbmFtZTtcblx0fVxufTtcblxualF1ZXJ5LmVhY2goIGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKCAvXFx3Ky9nICksIGZ1bmN0aW9uKCBpLCBuYW1lICkge1xuXHR2YXIgZ2V0dGVyID0gYXR0ckhhbmRsZVsgbmFtZSBdIHx8IGpRdWVyeS5maW5kLmF0dHI7XG5cblx0YXR0ckhhbmRsZVsgbmFtZSBdID0gZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciByZXQsIGhhbmRsZSxcblx0XHRcdGxvd2VyY2FzZU5hbWUgPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRpZiAoICFpc1hNTCApIHtcblxuXHRcdFx0Ly8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcCBieSB0ZW1wb3JhcmlseSByZW1vdmluZyB0aGlzIGZ1bmN0aW9uIGZyb20gdGhlIGdldHRlclxuXHRcdFx0aGFuZGxlID0gYXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gcmV0O1xuXHRcdFx0cmV0ID0gZ2V0dGVyKCBlbGVtLCBuYW1lLCBpc1hNTCApICE9IG51bGwgP1xuXHRcdFx0XHRsb3dlcmNhc2VOYW1lIDpcblx0XHRcdFx0bnVsbDtcblx0XHRcdGF0dHJIYW5kbGVbIGxvd2VyY2FzZU5hbWUgXSA9IGhhbmRsZTtcblx0XHR9XG5cdFx0cmV0dXJuIHJldDtcblx0fTtcbn0gKTtcblxuXG5cblxudmFyIHJmb2N1c2FibGUgPSAvXig/OmlucHV0fHNlbGVjdHx0ZXh0YXJlYXxidXR0b24pJC9pLFxuXHRyY2xpY2thYmxlID0gL14oPzphfGFyZWEpJC9pO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHByb3A6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkucHJvcCwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlUHJvcDogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRkZWxldGUgdGhpc1sgalF1ZXJ5LnByb3BGaXhbIG5hbWUgXSB8fCBuYW1lIF07XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIHZhbHVlICkge1xuXHRcdHZhciByZXQsIGhvb2tzLFxuXHRcdFx0blR5cGUgPSBlbGVtLm5vZGVUeXBlO1xuXG5cdFx0Ly8gRG9uJ3QgZ2V0L3NldCBwcm9wZXJ0aWVzIG9uIHRleHQsIGNvbW1lbnQgYW5kIGF0dHJpYnV0ZSBub2Rlc1xuXHRcdGlmICggblR5cGUgPT09IDMgfHwgblR5cGUgPT09IDggfHwgblR5cGUgPT09IDIgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCBuVHlwZSAhPT0gMSB8fCAhalF1ZXJ5LmlzWE1MRG9jKCBlbGVtICkgKSB7XG5cblx0XHRcdC8vIEZpeCBuYW1lIGFuZCBhdHRhY2ggaG9va3Ncblx0XHRcdG5hbWUgPSBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWU7XG5cdFx0XHRob29rcyA9IGpRdWVyeS5wcm9wSG9va3NbIG5hbWUgXTtcblx0XHR9XG5cblx0XHRpZiAoIHZhbHVlICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gKCBlbGVtWyBuYW1lIF0gPSB2YWx1ZSApO1xuXHRcdH1cblxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyAmJiAoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgbmFtZSApICkgIT09IG51bGwgKSB7XG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdHJldHVybiBlbGVtWyBuYW1lIF07XG5cdH0sXG5cblx0cHJvcEhvb2tzOiB7XG5cdFx0dGFiSW5kZXg6IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEgb25seVxuXHRcdFx0XHQvLyBlbGVtLnRhYkluZGV4IGRvZXNuJ3QgYWx3YXlzIHJldHVybiB0aGVcblx0XHRcdFx0Ly8gY29ycmVjdCB2YWx1ZSB3aGVuIGl0IGhhc24ndCBiZWVuIGV4cGxpY2l0bHkgc2V0XG5cdFx0XHRcdC8vIGh0dHBzOi8vd2ViLmFyY2hpdmUub3JnL3dlYi8yMDE0MTExNjIzMzM0Ny9odHRwOi8vZmx1aWRwcm9qZWN0Lm9yZy9ibG9nLzIwMDgvMDEvMDkvZ2V0dGluZy1zZXR0aW5nLWFuZC1yZW1vdmluZy10YWJpbmRleC12YWx1ZXMtd2l0aC1qYXZhc2NyaXB0L1xuXHRcdFx0XHQvLyBVc2UgcHJvcGVyIGF0dHJpYnV0ZSByZXRyaWV2YWwoIzEyMDcyKVxuXHRcdFx0XHR2YXIgdGFiaW5kZXggPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInRhYmluZGV4XCIgKTtcblxuXHRcdFx0XHRpZiAoIHRhYmluZGV4ICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXJzZUludCggdGFiaW5kZXgsIDEwICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoXG5cdFx0XHRcdFx0cmZvY3VzYWJsZS50ZXN0KCBlbGVtLm5vZGVOYW1lICkgfHxcblx0XHRcdFx0XHRyY2xpY2thYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSAmJlxuXHRcdFx0XHRcdGVsZW0uaHJlZlxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiAtMTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0cHJvcEZpeDoge1xuXHRcdFwiZm9yXCI6IFwiaHRtbEZvclwiLFxuXHRcdFwiY2xhc3NcIjogXCJjbGFzc05hbWVcIlxuXHR9XG59ICk7XG5cbi8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuLy8gQWNjZXNzaW5nIHRoZSBzZWxlY3RlZEluZGV4IHByb3BlcnR5XG4vLyBmb3JjZXMgdGhlIGJyb3dzZXIgdG8gcmVzcGVjdCBzZXR0aW5nIHNlbGVjdGVkXG4vLyBvbiB0aGUgb3B0aW9uXG4vLyBUaGUgZ2V0dGVyIGVuc3VyZXMgYSBkZWZhdWx0IG9wdGlvbiBpcyBzZWxlY3RlZFxuLy8gd2hlbiBpbiBhbiBvcHRncm91cFxuLy8gZXNsaW50IHJ1bGUgXCJuby11bnVzZWQtZXhwcmVzc2lvbnNcIiBpcyBkaXNhYmxlZCBmb3IgdGhpcyBjb2RlXG4vLyBzaW5jZSBpdCBjb25zaWRlcnMgc3VjaCBhY2Nlc3Npb25zIG5vb3BcbmlmICggIXN1cHBvcnQub3B0U2VsZWN0ZWQgKSB7XG5cdGpRdWVyeS5wcm9wSG9va3Muc2VsZWN0ZWQgPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgJiYgcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdC8qIGVzbGludCBuby11bnVzZWQtZXhwcmVzc2lvbnM6IFwib2ZmXCIgKi9cblxuXHRcdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRcdGlmICggcGFyZW50ICkge1xuXHRcdFx0XHRwYXJlbnQuc2VsZWN0ZWRJbmRleDtcblxuXHRcdFx0XHRpZiAoIHBhcmVudC5wYXJlbnROb2RlICkge1xuXHRcdFx0XHRcdHBhcmVudC5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH07XG59XG5cbmpRdWVyeS5lYWNoKCBbXG5cdFwidGFiSW5kZXhcIixcblx0XCJyZWFkT25seVwiLFxuXHRcIm1heExlbmd0aFwiLFxuXHRcImNlbGxTcGFjaW5nXCIsXG5cdFwiY2VsbFBhZGRpbmdcIixcblx0XCJyb3dTcGFuXCIsXG5cdFwiY29sU3BhblwiLFxuXHRcInVzZU1hcFwiLFxuXHRcImZyYW1lQm9yZGVyXCIsXG5cdFwiY29udGVudEVkaXRhYmxlXCJcbl0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkucHJvcEZpeFsgdGhpcy50b0xvd2VyQ2FzZSgpIF0gPSB0aGlzO1xufSApO1xuXG5cblxuXG5cdC8vIFN0cmlwIGFuZCBjb2xsYXBzZSB3aGl0ZXNwYWNlIGFjY29yZGluZyB0byBIVE1MIHNwZWNcblx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvaW5mcmFzdHJ1Y3R1cmUuaHRtbCNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRmdW5jdGlvbiBzdHJpcEFuZENvbGxhcHNlKCB2YWx1ZSApIHtcblx0XHR2YXIgdG9rZW5zID0gdmFsdWUubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblx0XHRyZXR1cm4gdG9rZW5zLmpvaW4oIFwiIFwiICk7XG5cdH1cblxuXG5mdW5jdGlvbiBnZXRDbGFzcyggZWxlbSApIHtcblx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlICYmIGVsZW0uZ2V0QXR0cmlidXRlKCBcImNsYXNzXCIgKSB8fCBcIlwiO1xufVxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGFkZENsYXNzOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGNsYXNzZXMsIGVsZW0sIGN1ciwgY3VyVmFsdWUsIGNsYXp6LCBqLCBmaW5hbFZhbHVlLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiB2YWx1ZSApIHtcblx0XHRcdGNsYXNzZXMgPSB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblx0XHRcdFx0Y3VyID0gZWxlbS5ub2RlVHlwZSA9PT0gMSAmJiAoIFwiIFwiICsgc3RyaXBBbmRDb2xsYXBzZSggY3VyVmFsdWUgKSArIFwiIFwiICk7XG5cblx0XHRcdFx0aWYgKCBjdXIgKSB7XG5cdFx0XHRcdFx0aiA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGNsYXp6ID0gY2xhc3Nlc1sgaisrIF0gKSApIHtcblx0XHRcdFx0XHRcdGlmICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApIDwgMCApIHtcblx0XHRcdFx0XHRcdFx0Y3VyICs9IGNsYXp6ICsgXCIgXCI7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRyZW1vdmVDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICYmIHZhbHVlICkge1xuXHRcdFx0Y2xhc3NlcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdHdoaWxlICggKCBlbGVtID0gdGhpc1sgaSsrIF0gKSApIHtcblx0XHRcdFx0Y3VyVmFsdWUgPSBnZXRDbGFzcyggZWxlbSApO1xuXG5cdFx0XHRcdC8vIFRoaXMgZXhwcmVzc2lvbiBpcyBoZXJlIGZvciBiZXR0ZXIgY29tcHJlc3NpYmlsaXR5IChzZWUgYWRkQ2xhc3MpXG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFJlbW92ZSAqYWxsKiBpbnN0YW5jZXNcblx0XHRcdFx0XHRcdHdoaWxlICggY3VyLmluZGV4T2YoIFwiIFwiICsgY2xhenogKyBcIiBcIiApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciA9IGN1ci5yZXBsYWNlKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIsIFwiIFwiICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gT25seSBhc3NpZ24gaWYgZGlmZmVyZW50IHRvIGF2b2lkIHVubmVlZGVkIHJlbmRlcmluZy5cblx0XHRcdFx0XHRmaW5hbFZhbHVlID0gc3RyaXBBbmRDb2xsYXBzZSggY3VyICk7XG5cdFx0XHRcdFx0aWYgKCBjdXJWYWx1ZSAhPT0gZmluYWxWYWx1ZSApIHtcblx0XHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcImNsYXNzXCIsIGZpbmFsVmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR0b2dnbGVDbGFzczogZnVuY3Rpb24oIHZhbHVlLCBzdGF0ZVZhbCApIHtcblx0XHR2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdGlmICggdHlwZW9mIHN0YXRlVmFsID09PSBcImJvb2xlYW5cIiAmJiB0eXBlID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS50b2dnbGVDbGFzcyhcblx0XHRcdFx0XHR2YWx1ZS5jYWxsKCB0aGlzLCBpLCBnZXRDbGFzcyggdGhpcyApLCBzdGF0ZVZhbCApLFxuXHRcdFx0XHRcdHN0YXRlVmFsXG5cdFx0XHRcdCk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY2xhc3NOYW1lLCBpLCBzZWxmLCBjbGFzc05hbWVzO1xuXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwic3RyaW5nXCIgKSB7XG5cblx0XHRcdFx0Ly8gVG9nZ2xlIGluZGl2aWR1YWwgY2xhc3MgbmFtZXNcblx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdHNlbGYgPSBqUXVlcnkoIHRoaXMgKTtcblx0XHRcdFx0Y2xhc3NOYW1lcyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cblx0XHRcdFx0d2hpbGUgKCAoIGNsYXNzTmFtZSA9IGNsYXNzTmFtZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0XHQvLyBDaGVjayBlYWNoIGNsYXNzTmFtZSBnaXZlbiwgc3BhY2Ugc2VwYXJhdGVkIGxpc3Rcblx0XHRcdFx0XHRpZiAoIHNlbGYuaGFzQ2xhc3MoIGNsYXNzTmFtZSApICkge1xuXHRcdFx0XHRcdFx0c2VsZi5yZW1vdmVDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHNlbGYuYWRkQ2xhc3MoIGNsYXNzTmFtZSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHQvLyBUb2dnbGUgd2hvbGUgY2xhc3MgbmFtZVxuXHRcdFx0fSBlbHNlIGlmICggdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB0eXBlID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRcdFx0Y2xhc3NOYW1lID0gZ2V0Q2xhc3MoIHRoaXMgKTtcblx0XHRcdFx0aWYgKCBjbGFzc05hbWUgKSB7XG5cblx0XHRcdFx0XHQvLyBTdG9yZSBjbGFzc05hbWUgaWYgc2V0XG5cdFx0XHRcdFx0ZGF0YVByaXYuc2V0KCB0aGlzLCBcIl9fY2xhc3NOYW1lX19cIiwgY2xhc3NOYW1lICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBJZiB0aGUgZWxlbWVudCBoYXMgYSBjbGFzcyBuYW1lIG9yIGlmIHdlJ3JlIHBhc3NlZCBgZmFsc2VgLFxuXHRcdFx0XHQvLyB0aGVuIHJlbW92ZSB0aGUgd2hvbGUgY2xhc3NuYW1lIChpZiB0aGVyZSB3YXMgb25lLCB0aGUgYWJvdmUgc2F2ZWQgaXQpLlxuXHRcdFx0XHQvLyBPdGhlcndpc2UgYnJpbmcgYmFjayB3aGF0ZXZlciB3YXMgcHJldmlvdXNseSBzYXZlZCAoaWYgYW55dGhpbmcpLFxuXHRcdFx0XHQvLyBmYWxsaW5nIGJhY2sgdG8gdGhlIGVtcHR5IHN0cmluZyBpZiBub3RoaW5nIHdhcyBzdG9yZWQuXG5cdFx0XHRcdGlmICggdGhpcy5zZXRBdHRyaWJ1dGUgKSB7XG5cdFx0XHRcdFx0dGhpcy5zZXRBdHRyaWJ1dGUoIFwiY2xhc3NcIixcblx0XHRcdFx0XHRcdGNsYXNzTmFtZSB8fCB2YWx1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0XHRcdFx0XCJcIiA6XG5cdFx0XHRcdFx0XHRkYXRhUHJpdi5nZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiICkgfHwgXCJcIlxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0aGFzQ2xhc3M6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHR2YXIgY2xhc3NOYW1lLCBlbGVtLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRjbGFzc05hbWUgPSBcIiBcIiArIHNlbGVjdG9yICsgXCIgXCI7XG5cdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRcdCggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBnZXRDbGFzcyggZWxlbSApICkgKyBcIiBcIiApLmluZGV4T2YoIGNsYXNzTmFtZSApID4gLTEgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBycmV0dXJuID0gL1xcci9nO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdHZhbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBob29rcywgcmV0LCBpc0Z1bmN0aW9uLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyBlbGVtLnR5cGUgXSB8fFxuXHRcdFx0XHRcdGpRdWVyeS52YWxIb29rc1sgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdFx0aWYgKCBob29rcyAmJlxuXHRcdFx0XHRcdFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0XHQoIHJldCA9IGhvb2tzLmdldCggZWxlbSwgXCJ2YWx1ZVwiICkgKSAhPT0gdW5kZWZpbmVkXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXQgPSBlbGVtLnZhbHVlO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSBtb3N0IGNvbW1vbiBzdHJpbmcgY2FzZXNcblx0XHRcdFx0aWYgKCB0eXBlb2YgcmV0ID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0XHRcdHJldHVybiByZXQucmVwbGFjZSggcnJldHVybiwgXCJcIiApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSGFuZGxlIGNhc2VzIHdoZXJlIHZhbHVlIGlzIG51bGwvdW5kZWYgb3IgbnVtYmVyXG5cdFx0XHRcdHJldHVybiByZXQgPT0gbnVsbCA/IFwiXCIgOiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpc0Z1bmN0aW9uID0galF1ZXJ5LmlzRnVuY3Rpb24oIHZhbHVlICk7XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdHZhciB2YWw7XG5cblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSAhPT0gMSApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdHZhbCA9IHZhbHVlLmNhbGwoIHRoaXMsIGksIGpRdWVyeSggdGhpcyApLnZhbCgpICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVHJlYXQgbnVsbC91bmRlZmluZWQgYXMgXCJcIjsgY29udmVydCBudW1iZXJzIHRvIHN0cmluZ1xuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0dmFsID0gXCJcIjtcblxuXHRcdFx0fSBlbHNlIGlmICggdHlwZW9mIHZhbCA9PT0gXCJudW1iZXJcIiApIHtcblx0XHRcdFx0dmFsICs9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIEFycmF5LmlzQXJyYXkoIHZhbCApICkge1xuXHRcdFx0XHR2YWwgPSBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSArIFwiXCI7XG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblxuXHRcdFx0aG9va3MgPSBqUXVlcnkudmFsSG9va3NbIHRoaXMudHlwZSBdIHx8IGpRdWVyeS52YWxIb29rc1sgdGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIF07XG5cblx0XHRcdC8vIElmIHNldCByZXR1cm5zIHVuZGVmaW5lZCwgZmFsbCBiYWNrIHRvIG5vcm1hbCBzZXR0aW5nXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHwgaG9va3Muc2V0KCB0aGlzLCB2YWwsIFwidmFsdWVcIiApID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHRoaXMudmFsdWUgPSB2YWw7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5leHRlbmQoIHtcblx0dmFsSG9va3M6IHtcblx0XHRvcHRpb246IHtcblx0XHRcdGdldDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cblx0XHRcdFx0dmFyIHZhbCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidmFsdWVcIiApO1xuXHRcdFx0XHRyZXR1cm4gdmFsICE9IG51bGwgP1xuXHRcdFx0XHRcdHZhbCA6XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEgb25seVxuXHRcdFx0XHRcdC8vIG9wdGlvbi50ZXh0IHRocm93cyBleGNlcHRpb25zICgjMTQ2ODYsICMxNDg1OClcblx0XHRcdFx0XHQvLyBTdHJpcCBhbmQgY29sbGFwc2Ugd2hpdGVzcGFjZVxuXHRcdFx0XHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvI3N0cmlwLWFuZC1jb2xsYXBzZS13aGl0ZXNwYWNlXG5cdFx0XHRcdFx0c3RyaXBBbmRDb2xsYXBzZSggalF1ZXJ5LnRleHQoIGVsZW0gKSApO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0c2VsZWN0OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgdmFsdWUsIG9wdGlvbiwgaSxcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdGluZGV4ID0gZWxlbS5zZWxlY3RlZEluZGV4LFxuXHRcdFx0XHRcdG9uZSA9IGVsZW0udHlwZSA9PT0gXCJzZWxlY3Qtb25lXCIsXG5cdFx0XHRcdFx0dmFsdWVzID0gb25lID8gbnVsbCA6IFtdLFxuXHRcdFx0XHRcdG1heCA9IG9uZSA/IGluZGV4ICsgMSA6IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdGlmICggaW5kZXggPCAwICkge1xuXHRcdFx0XHRcdGkgPSBtYXg7XG5cblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRpID0gb25lID8gaW5kZXggOiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgc2VsZWN0ZWQgb3B0aW9uc1xuXHRcdFx0XHRmb3IgKCA7IGkgPCBtYXg7IGkrKyApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdC8vIElFOC05IGRvZXNuJ3QgdXBkYXRlIHNlbGVjdGVkIGFmdGVyIGZvcm0gcmVzZXQgKCMyNTUxKVxuXHRcdFx0XHRcdGlmICggKCBvcHRpb24uc2VsZWN0ZWQgfHwgaSA9PT0gaW5kZXggKSAmJlxuXG5cdFx0XHRcdFx0XHRcdC8vIERvbid0IHJldHVybiBvcHRpb25zIHRoYXQgYXJlIGRpc2FibGVkIG9yIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdFx0XHRcdFx0IW9wdGlvbi5kaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0XHQoICFvcHRpb24ucGFyZW50Tm9kZS5kaXNhYmxlZCB8fFxuXHRcdFx0XHRcdFx0XHRcdCFub2RlTmFtZSggb3B0aW9uLnBhcmVudE5vZGUsIFwib3B0Z3JvdXBcIiApICkgKSB7XG5cblx0XHRcdFx0XHRcdC8vIEdldCB0aGUgc3BlY2lmaWMgdmFsdWUgZm9yIHRoZSBvcHRpb25cblx0XHRcdFx0XHRcdHZhbHVlID0galF1ZXJ5KCBvcHRpb24gKS52YWwoKTtcblxuXHRcdFx0XHRcdFx0Ly8gV2UgZG9uJ3QgbmVlZCBhbiBhcnJheSBmb3Igb25lIHNlbGVjdHNcblx0XHRcdFx0XHRcdGlmICggb25lICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIE11bHRpLVNlbGVjdHMgcmV0dXJuIGFuIGFycmF5XG5cdFx0XHRcdFx0XHR2YWx1ZXMucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fSxcblxuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBvcHRpb25TZXQsIG9wdGlvbixcblx0XHRcdFx0XHRvcHRpb25zID0gZWxlbS5vcHRpb25zLFxuXHRcdFx0XHRcdHZhbHVlcyA9IGpRdWVyeS5tYWtlQXJyYXkoIHZhbHVlICksXG5cdFx0XHRcdFx0aSA9IG9wdGlvbnMubGVuZ3RoO1xuXG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdG9wdGlvbiA9IG9wdGlvbnNbIGkgXTtcblxuXHRcdFx0XHRcdC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbmQtYXNzaWduICovXG5cblx0XHRcdFx0XHRpZiAoIG9wdGlvbi5zZWxlY3RlZCA9XG5cdFx0XHRcdFx0XHRqUXVlcnkuaW5BcnJheSggalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQoIG9wdGlvbiApLCB2YWx1ZXMgKSA+IC0xXG5cdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRvcHRpb25TZXQgPSB0cnVlO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8qIGVzbGludC1lbmFibGUgbm8tY29uZC1hc3NpZ24gKi9cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvcmNlIGJyb3dzZXJzIHRvIGJlaGF2ZSBjb25zaXN0ZW50bHkgd2hlbiBub24tbWF0Y2hpbmcgdmFsdWUgaXMgc2V0XG5cdFx0XHRcdGlmICggIW9wdGlvblNldCApIHtcblx0XHRcdFx0XHRlbGVtLnNlbGVjdGVkSW5kZXggPSAtMTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdmFsdWVzO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBSYWRpb3MgYW5kIGNoZWNrYm94ZXMgZ2V0dGVyL3NldHRlclxualF1ZXJ5LmVhY2goIFsgXCJyYWRpb1wiLCBcImNoZWNrYm94XCIgXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdID0ge1xuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCB2YWx1ZSApICkge1xuXHRcdFx0XHRyZXR1cm4gKCBlbGVtLmNoZWNrZWQgPSBqUXVlcnkuaW5BcnJheSggalF1ZXJ5KCBlbGVtICkudmFsKCksIHZhbHVlICkgPiAtMSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aWYgKCAhc3VwcG9ydC5jaGVja09uICkge1xuXHRcdGpRdWVyeS52YWxIb29rc1sgdGhpcyBdLmdldCA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBcInZhbHVlXCIgKSA9PT0gbnVsbCA/IFwib25cIiA6IGVsZW0udmFsdWU7XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBSZXR1cm4galF1ZXJ5IGZvciBhdHRyaWJ1dGVzLW9ubHkgaW5jbHVzaW9uXG5cblxudmFyIHJmb2N1c01vcnBoID0gL14oPzpmb2N1c2luZm9jdXN8Zm9jdXNvdXRibHVyKSQvO1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsXG5cdFx0XHRldmVudFBhdGggPSBbIGVsZW0gfHwgZG9jdW1lbnQgXSxcblx0XHRcdHR5cGUgPSBoYXNPd24uY2FsbCggZXZlbnQsIFwidHlwZVwiICkgPyBldmVudC50eXBlIDogZXZlbnQsXG5cdFx0XHRuYW1lc3BhY2VzID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcIm5hbWVzcGFjZVwiICkgPyBldmVudC5uYW1lc3BhY2Uuc3BsaXQoIFwiLlwiICkgOiBbXTtcblxuXHRcdGN1ciA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhalF1ZXJ5LmlzV2luZG93KCBlbGVtICkgKSB7XG5cblx0XHRcdGJ1YmJsZVR5cGUgPSBzcGVjaWFsLmRlbGVnYXRlVHlwZSB8fCB0eXBlO1xuXHRcdFx0aWYgKCAhcmZvY3VzTW9ycGgudGVzdCggYnViYmxlVHlwZSArIHR5cGUgKSApIHtcblx0XHRcdFx0Y3VyID0gY3VyLnBhcmVudE5vZGU7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKCA7IGN1cjsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCBjdXIgKTtcblx0XHRcdFx0dG1wID0gY3VyO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPbmx5IGFkZCB3aW5kb3cgaWYgd2UgZ290IHRvIGRvY3VtZW50IChlLmcuLCBub3QgcGxhaW4gb2JqIG9yIGRldGFjaGVkIERPTSlcblx0XHRcdGlmICggdG1wID09PSAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBkb2N1bWVudCApICkge1xuXHRcdFx0XHRldmVudFBhdGgucHVzaCggdG1wLmRlZmF1bHRWaWV3IHx8IHRtcC5wYXJlbnRXaW5kb3cgfHwgd2luZG93ICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gRmlyZSBoYW5kbGVycyBvbiB0aGUgZXZlbnQgcGF0aFxuXHRcdGkgPSAwO1xuXHRcdHdoaWxlICggKCBjdXIgPSBldmVudFBhdGhbIGkrKyBdICkgJiYgIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdGV2ZW50LnR5cGUgPSBpID4gMSA/XG5cdFx0XHRcdGJ1YmJsZVR5cGUgOlxuXHRcdFx0XHRzcGVjaWFsLmJpbmRUeXBlIHx8IHR5cGU7XG5cblx0XHRcdC8vIGpRdWVyeSBoYW5kbGVyXG5cdFx0XHRoYW5kbGUgPSAoIGRhdGFQcml2LmdldCggY3VyLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdICYmXG5cdFx0XHRcdGRhdGFQcml2LmdldCggY3VyLCBcImhhbmRsZVwiICk7XG5cdFx0XHRpZiAoIGhhbmRsZSApIHtcblx0XHRcdFx0aGFuZGxlLmFwcGx5KCBjdXIsIGRhdGEgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTmF0aXZlIGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9IG9udHlwZSAmJiBjdXJbIG9udHlwZSBdO1xuXHRcdFx0aWYgKCBoYW5kbGUgJiYgaGFuZGxlLmFwcGx5ICYmIGFjY2VwdERhdGEoIGN1ciApICkge1xuXHRcdFx0XHRldmVudC5yZXN1bHQgPSBoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0XHRpZiAoIGV2ZW50LnJlc3VsdCA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0ZXZlbnQucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRldmVudC50eXBlID0gdHlwZTtcblxuXHRcdC8vIElmIG5vYm9keSBwcmV2ZW50ZWQgdGhlIGRlZmF1bHQgYWN0aW9uLCBkbyBpdCBub3dcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgIWV2ZW50LmlzRGVmYXVsdFByZXZlbnRlZCgpICkge1xuXG5cdFx0XHRpZiAoICggIXNwZWNpYWwuX2RlZmF1bHQgfHxcblx0XHRcdFx0c3BlY2lhbC5fZGVmYXVsdC5hcHBseSggZXZlbnRQYXRoLnBvcCgpLCBkYXRhICkgPT09IGZhbHNlICkgJiZcblx0XHRcdFx0YWNjZXB0RGF0YSggZWxlbSApICkge1xuXG5cdFx0XHRcdC8vIENhbGwgYSBuYXRpdmUgRE9NIG1ldGhvZCBvbiB0aGUgdGFyZ2V0IHdpdGggdGhlIHNhbWUgbmFtZSBhcyB0aGUgZXZlbnQuXG5cdFx0XHRcdC8vIERvbid0IGRvIGRlZmF1bHQgYWN0aW9ucyBvbiB3aW5kb3csIHRoYXQncyB3aGVyZSBnbG9iYWwgdmFyaWFibGVzIGJlICgjNjE3MClcblx0XHRcdFx0aWYgKCBvbnR5cGUgJiYgalF1ZXJ5LmlzRnVuY3Rpb24oIGVsZW1bIHR5cGUgXSApICYmICFqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cdFx0XHRcdFx0ZWxlbVsgdHlwZSBdKCk7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHVuZGVmaW5lZDtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSB0bXA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHQvLyBQaWdneWJhY2sgb24gYSBkb25vciBldmVudCB0byBzaW11bGF0ZSBhIGRpZmZlcmVudCBvbmVcblx0Ly8gVXNlZCBvbmx5IGZvciBgZm9jdXMoaW4gfCBvdXQpYCBldmVudHNcblx0c2ltdWxhdGU6IGZ1bmN0aW9uKCB0eXBlLCBlbGVtLCBldmVudCApIHtcblx0XHR2YXIgZSA9IGpRdWVyeS5leHRlbmQoXG5cdFx0XHRuZXcgalF1ZXJ5LkV2ZW50KCksXG5cdFx0XHRldmVudCxcblx0XHRcdHtcblx0XHRcdFx0dHlwZTogdHlwZSxcblx0XHRcdFx0aXNTaW11bGF0ZWQ6IHRydWVcblx0XHRcdH1cblx0XHQpO1xuXG5cdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIGUsIG51bGwsIGVsZW0gKTtcblx0fVxuXG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCB0aGlzICk7XG5cdFx0fSApO1xuXHR9LFxuXHR0cmlnZ2VySGFuZGxlcjogZnVuY3Rpb24oIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIGVsZW0gPSB0aGlzWyAwIF07XG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKCB0eXBlLCBkYXRhLCBlbGVtLCB0cnVlICk7XG5cdFx0fVxuXHR9XG59ICk7XG5cblxualF1ZXJ5LmVhY2goICggXCJibHVyIGZvY3VzIGZvY3VzaW4gZm9jdXNvdXQgcmVzaXplIHNjcm9sbCBjbGljayBkYmxjbGljayBcIiArXG5cdFwibW91c2Vkb3duIG1vdXNldXAgbW91c2Vtb3ZlIG1vdXNlb3ZlciBtb3VzZW91dCBtb3VzZWVudGVyIG1vdXNlbGVhdmUgXCIgK1xuXHRcImNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIiApLnNwbGl0KCBcIiBcIiApLFxuXHRmdW5jdGlvbiggaSwgbmFtZSApIHtcblxuXHQvLyBIYW5kbGUgZXZlbnQgYmluZGluZ1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA+IDAgP1xuXHRcdFx0dGhpcy5vbiggbmFtZSwgbnVsbCwgZGF0YSwgZm4gKSA6XG5cdFx0XHR0aGlzLnRyaWdnZXIoIG5hbWUgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRob3ZlcjogZnVuY3Rpb24oIGZuT3ZlciwgZm5PdXQgKSB7XG5cdFx0cmV0dXJuIHRoaXMubW91c2VlbnRlciggZm5PdmVyICkubW91c2VsZWF2ZSggZm5PdXQgfHwgZm5PdmVyICk7XG5cdH1cbn0gKTtcblxuXG5cblxuc3VwcG9ydC5mb2N1c2luID0gXCJvbmZvY3VzaW5cIiBpbiB3aW5kb3c7XG5cblxuLy8gU3VwcG9ydDogRmlyZWZveCA8PTQ0XG4vLyBGaXJlZm94IGRvZXNuJ3QgaGF2ZSBmb2N1cyhpbiB8IG91dCkgZXZlbnRzXG4vLyBSZWxhdGVkIHRpY2tldCAtIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTY4Nzc4N1xuLy9cbi8vIFN1cHBvcnQ6IENocm9tZSA8PTQ4IC0gNDksIFNhZmFyaSA8PTkuMCAtIDkuMVxuLy8gZm9jdXMoaW4gfCBvdXQpIGV2ZW50cyBmaXJlIGFmdGVyIGZvY3VzICYgYmx1ciBldmVudHMsXG4vLyB3aGljaCBpcyBzcGVjIHZpb2xhdGlvbiAtIGh0dHA6Ly93d3cudzMub3JnL1RSL0RPTS1MZXZlbC0zLUV2ZW50cy8jZXZlbnRzLWZvY3VzZXZlbnQtZXZlbnQtb3JkZXJcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NDQ5ODU3XG5pZiAoICFzdXBwb3J0LmZvY3VzaW4gKSB7XG5cdGpRdWVyeS5lYWNoKCB7IGZvY3VzOiBcImZvY3VzaW5cIiwgYmx1cjogXCJmb2N1c291dFwiIH0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cblx0XHQvLyBBdHRhY2ggYSBzaW5nbGUgY2FwdHVyaW5nIGhhbmRsZXIgb24gdGhlIGRvY3VtZW50IHdoaWxlIHNvbWVvbmUgd2FudHMgZm9jdXNpbi9mb2N1c291dFxuXHRcdHZhciBoYW5kbGVyID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnNpbXVsYXRlKCBmaXgsIGV2ZW50LnRhcmdldCwgalF1ZXJ5LmV2ZW50LmZpeCggZXZlbnQgKSApO1xuXHRcdH07XG5cblx0XHRqUXVlcnkuZXZlbnQuc3BlY2lhbFsgZml4IF0gPSB7XG5cdFx0XHRzZXR1cDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBkb2MgPSB0aGlzLm93bmVyRG9jdW1lbnQgfHwgdGhpcyxcblx0XHRcdFx0XHRhdHRhY2hlcyA9IGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXggKTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MuYWRkRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsICggYXR0YWNoZXMgfHwgMCApICsgMSApO1xuXHRcdFx0fSxcblx0XHRcdHRlYXJkb3duOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApIC0gMTtcblxuXHRcdFx0XHRpZiAoICFhdHRhY2hlcyApIHtcblx0XHRcdFx0XHRkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lciggb3JpZywgaGFuZGxlciwgdHJ1ZSApO1xuXHRcdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZG9jLCBmaXggKTtcblxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFQcml2LmFjY2VzcyggZG9jLCBmaXgsIGF0dGFjaGVzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9ICk7XG59XG52YXIgbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247XG5cbnZhciBub25jZSA9IGpRdWVyeS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiBqUXVlcnkudHlwZSggb2JqICkgPT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgb2JqZWN0IGl0ZW0uXG5cdFx0Zm9yICggbmFtZSBpbiBvYmogKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4ICsgXCJbXCIgKyBuYW1lICsgXCJdXCIsIG9ialsgbmFtZSBdLCB0cmFkaXRpb25hbCwgYWRkICk7XG5cdFx0fVxuXG5cdH0gZWxzZSB7XG5cblx0XHQvLyBTZXJpYWxpemUgc2NhbGFyIGl0ZW0uXG5cdFx0YWRkKCBwcmVmaXgsIG9iaiApO1xuXHR9XG59XG5cbi8vIFNlcmlhbGl6ZSBhbiBhcnJheSBvZiBmb3JtIGVsZW1lbnRzIG9yIGEgc2V0IG9mXG4vLyBrZXkvdmFsdWVzIGludG8gYSBxdWVyeSBzdHJpbmdcbmpRdWVyeS5wYXJhbSA9IGZ1bmN0aW9uKCBhLCB0cmFkaXRpb25hbCApIHtcblx0dmFyIHByZWZpeCxcblx0XHRzID0gW10sXG5cdFx0YWRkID0gZnVuY3Rpb24oIGtleSwgdmFsdWVPckZ1bmN0aW9uICkge1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCBpbnZva2UgaXQgYW5kIHVzZSBpdHMgcmV0dXJuIHZhbHVlXG5cdFx0XHR2YXIgdmFsdWUgPSBqUXVlcnkuaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGZ1bmMgKSApIHtcblxuXHRcdFx0Ly8gRm9yIGVhY2ggZGF0YVR5cGUgaW4gdGhlIGRhdGFUeXBlRXhwcmVzc2lvblxuXHRcdFx0d2hpbGUgKCAoIGRhdGFUeXBlID0gZGF0YVR5cGVzWyBpKysgXSApICkge1xuXG5cdFx0XHRcdC8vIFByZXBlbmQgaWYgcmVxdWVzdGVkXG5cdFx0XHRcdGlmICggZGF0YVR5cGVbIDAgXSA9PT0gXCIrXCIgKSB7XG5cdFx0XHRcdFx0ZGF0YVR5cGUgPSBkYXRhVHlwZS5zbGljZSggMSApIHx8IFwiKlwiO1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkudW5zaGlmdCggZnVuYyApO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBhcHBlbmRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQoIHN0cnVjdHVyZVsgZGF0YVR5cGUgXSA9IHN0cnVjdHVyZVsgZGF0YVR5cGUgXSB8fCBbXSApLnB1c2goIGZ1bmMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxuLy8gQmFzZSBpbnNwZWN0aW9uIGZ1bmN0aW9uIGZvciBwcmVmaWx0ZXJzIGFuZCB0cmFuc3BvcnRzXG5mdW5jdGlvbiBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggc3RydWN0dXJlLCBvcHRpb25zLCBvcmlnaW5hbE9wdGlvbnMsIGpxWEhSICkge1xuXG5cdHZhciBpbnNwZWN0ZWQgPSB7fSxcblx0XHRzZWVraW5nVHJhbnNwb3J0ID0gKCBzdHJ1Y3R1cmUgPT09IHRyYW5zcG9ydHMgKTtcblxuXHRmdW5jdGlvbiBpbnNwZWN0KCBkYXRhVHlwZSApIHtcblx0XHR2YXIgc2VsZWN0ZWQ7XG5cdFx0aW5zcGVjdGVkWyBkYXRhVHlwZSBdID0gdHJ1ZTtcblx0XHRqUXVlcnkuZWFjaCggc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdLCBmdW5jdGlvbiggXywgcHJlZmlsdGVyT3JGYWN0b3J5ICkge1xuXHRcdFx0dmFyIGRhdGFUeXBlT3JUcmFuc3BvcnQgPSBwcmVmaWx0ZXJPckZhY3RvcnkoIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKTtcblx0XHRcdGlmICggdHlwZW9mIGRhdGFUeXBlT3JUcmFuc3BvcnQgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXNlZWtpbmdUcmFuc3BvcnQgJiYgIWluc3BlY3RlZFsgZGF0YVR5cGVPclRyYW5zcG9ydCBdICkge1xuXG5cdFx0XHRcdG9wdGlvbnMuZGF0YVR5cGVzLnVuc2hpZnQoIGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdFx0aW5zcGVjdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9IGVsc2UgaWYgKCBzZWVraW5nVHJhbnNwb3J0ICkge1xuXHRcdFx0XHRyZXR1cm4gISggc2VsZWN0ZWQgPSBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHRcdHJldHVybiBzZWxlY3RlZDtcblx0fVxuXG5cdHJldHVybiBpbnNwZWN0KCBvcHRpb25zLmRhdGFUeXBlc1sgMCBdICkgfHwgIWluc3BlY3RlZFsgXCIqXCIgXSAmJiBpbnNwZWN0KCBcIipcIiApO1xufVxuXG4vLyBBIHNwZWNpYWwgZXh0ZW5kIGZvciBhamF4IG9wdGlvbnNcbi8vIHRoYXQgdGFrZXMgXCJmbGF0XCIgb3B0aW9ucyAobm90IHRvIGJlIGRlZXAgZXh0ZW5kZWQpXG4vLyBGaXhlcyAjOTg4N1xuZnVuY3Rpb24gYWpheEV4dGVuZCggdGFyZ2V0LCBzcmMgKSB7XG5cdHZhciBrZXksIGRlZXAsXG5cdFx0ZmxhdE9wdGlvbnMgPSBqUXVlcnkuYWpheFNldHRpbmdzLmZsYXRPcHRpb25zIHx8IHt9O1xuXG5cdGZvciAoIGtleSBpbiBzcmMgKSB7XG5cdFx0aWYgKCBzcmNbIGtleSBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHQoIGZsYXRPcHRpb25zWyBrZXkgXSA/IHRhcmdldCA6ICggZGVlcCB8fCAoIGRlZXAgPSB7fSApICkgKVsga2V5IF0gPSBzcmNbIGtleSBdO1xuXHRcdH1cblx0fVxuXHRpZiAoIGRlZXAgKSB7XG5cdFx0alF1ZXJ5LmV4dGVuZCggdHJ1ZSwgdGFyZ2V0LCBkZWVwICk7XG5cdH1cblxuXHRyZXR1cm4gdGFyZ2V0O1xufVxuXG4vKiBIYW5kbGVzIHJlc3BvbnNlcyB0byBhbiBhamF4IHJlcXVlc3Q6XG4gKiAtIGZpbmRzIHRoZSByaWdodCBkYXRhVHlwZSAobWVkaWF0ZXMgYmV0d2VlbiBjb250ZW50LXR5cGUgYW5kIGV4cGVjdGVkIGRhdGFUeXBlKVxuICogLSByZXR1cm5zIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG4gKi9cbmZ1bmN0aW9uIGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKSB7XG5cblx0dmFyIGN0LCB0eXBlLCBmaW5hbERhdGFUeXBlLCBmaXJzdERhdGFUeXBlLFxuXHRcdGNvbnRlbnRzID0gcy5jb250ZW50cyxcblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcztcblxuXHQvLyBSZW1vdmUgYXV0byBkYXRhVHlwZSBhbmQgZ2V0IGNvbnRlbnQtdHlwZSBpbiB0aGUgcHJvY2Vzc1xuXHR3aGlsZSAoIGRhdGFUeXBlc1sgMCBdID09PSBcIipcIiApIHtcblx0XHRkYXRhVHlwZXMuc2hpZnQoKTtcblx0XHRpZiAoIGN0ID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRjdCA9IHMubWltZVR5cGUgfHwganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayBpZiB3ZSdyZSBkZWFsaW5nIHdpdGggYSBrbm93biBjb250ZW50LXR5cGVcblx0aWYgKCBjdCApIHtcblx0XHRmb3IgKCB0eXBlIGluIGNvbnRlbnRzICkge1xuXHRcdFx0aWYgKCBjb250ZW50c1sgdHlwZSBdICYmIGNvbnRlbnRzWyB0eXBlIF0udGVzdCggY3QgKSApIHtcblx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHR5cGUgKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gQ2hlY2sgdG8gc2VlIGlmIHdlIGhhdmUgYSByZXNwb25zZSBmb3IgdGhlIGV4cGVjdGVkIGRhdGFUeXBlXG5cdGlmICggZGF0YVR5cGVzWyAwIF0gaW4gcmVzcG9uc2VzICkge1xuXHRcdGZpbmFsRGF0YVR5cGUgPSBkYXRhVHlwZXNbIDAgXTtcblx0fSBlbHNlIHtcblxuXHRcdC8vIFRyeSBjb252ZXJ0aWJsZSBkYXRhVHlwZXNcblx0XHRmb3IgKCB0eXBlIGluIHJlc3BvbnNlcyApIHtcblx0XHRcdGlmICggIWRhdGFUeXBlc1sgMCBdIHx8IHMuY29udmVydGVyc1sgdHlwZSArIFwiIFwiICsgZGF0YVR5cGVzWyAwIF0gXSApIHtcblx0XHRcdFx0ZmluYWxEYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0aWYgKCAhZmlyc3REYXRhVHlwZSApIHtcblx0XHRcdFx0Zmlyc3REYXRhVHlwZSA9IHR5cGU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gT3IganVzdCB1c2UgZmlyc3Qgb25lXG5cdFx0ZmluYWxEYXRhVHlwZSA9IGZpbmFsRGF0YVR5cGUgfHwgZmlyc3REYXRhVHlwZTtcblx0fVxuXG5cdC8vIElmIHdlIGZvdW5kIGEgZGF0YVR5cGVcblx0Ly8gV2UgYWRkIHRoZSBkYXRhVHlwZSB0byB0aGUgbGlzdCBpZiBuZWVkZWRcblx0Ly8gYW5kIHJldHVybiB0aGUgY29ycmVzcG9uZGluZyByZXNwb25zZVxuXHRpZiAoIGZpbmFsRGF0YVR5cGUgKSB7XG5cdFx0aWYgKCBmaW5hbERhdGFUeXBlICE9PSBkYXRhVHlwZXNbIDAgXSApIHtcblx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCBmaW5hbERhdGFUeXBlICk7XG5cdFx0fVxuXHRcdHJldHVybiByZXNwb25zZXNbIGZpbmFsRGF0YVR5cGUgXTtcblx0fVxufVxuXG4vKiBDaGFpbiBjb252ZXJzaW9ucyBnaXZlbiB0aGUgcmVxdWVzdCBhbmQgdGhlIG9yaWdpbmFsIHJlc3BvbnNlXG4gKiBBbHNvIHNldHMgdGhlIHJlc3BvbnNlWFhYIGZpZWxkcyBvbiB0aGUganFYSFIgaW5zdGFuY2VcbiAqL1xuZnVuY3Rpb24gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICkge1xuXHR2YXIgY29udjIsIGN1cnJlbnQsIGNvbnYsIHRtcCwgcHJldixcblx0XHRjb252ZXJ0ZXJzID0ge30sXG5cblx0XHQvLyBXb3JrIHdpdGggYSBjb3B5IG9mIGRhdGFUeXBlcyBpbiBjYXNlIHdlIG5lZWQgdG8gbW9kaWZ5IGl0IGZvciBjb252ZXJzaW9uXG5cdFx0ZGF0YVR5cGVzID0gcy5kYXRhVHlwZXMuc2xpY2UoKTtcblxuXHQvLyBDcmVhdGUgY29udmVydGVycyBtYXAgd2l0aCBsb3dlcmNhc2VkIGtleXNcblx0aWYgKCBkYXRhVHlwZXNbIDEgXSApIHtcblx0XHRmb3IgKCBjb252IGluIHMuY29udmVydGVycyApIHtcblx0XHRcdGNvbnZlcnRlcnNbIGNvbnYudG9Mb3dlckNhc2UoKSBdID0gcy5jb252ZXJ0ZXJzWyBjb252IF07XG5cdFx0fVxuXHR9XG5cblx0Y3VycmVudCA9IGRhdGFUeXBlcy5zaGlmdCgpO1xuXG5cdC8vIENvbnZlcnQgdG8gZWFjaCBzZXF1ZW50aWFsIGRhdGFUeXBlXG5cdHdoaWxlICggY3VycmVudCApIHtcblxuXHRcdGlmICggcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdICkge1xuXHRcdFx0anFYSFJbIHMucmVzcG9uc2VGaWVsZHNbIGN1cnJlbnQgXSBdID0gcmVzcG9uc2U7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgdGhlIGRhdGFGaWx0ZXIgaWYgcHJvdmlkZWRcblx0XHRpZiAoICFwcmV2ICYmIGlzU3VjY2VzcyAmJiBzLmRhdGFGaWx0ZXIgKSB7XG5cdFx0XHRyZXNwb25zZSA9IHMuZGF0YUZpbHRlciggcmVzcG9uc2UsIHMuZGF0YVR5cGUgKTtcblx0XHR9XG5cblx0XHRwcmV2ID0gY3VycmVudDtcblx0XHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0XHRpZiAoIGN1cnJlbnQgKSB7XG5cblx0XHRcdC8vIFRoZXJlJ3Mgb25seSB3b3JrIHRvIGRvIGlmIGN1cnJlbnQgZGF0YVR5cGUgaXMgbm9uLWF1dG9cblx0XHRcdGlmICggY3VycmVudCA9PT0gXCIqXCIgKSB7XG5cblx0XHRcdFx0Y3VycmVudCA9IHByZXY7XG5cblx0XHRcdC8vIENvbnZlcnQgcmVzcG9uc2UgaWYgcHJldiBkYXRhVHlwZSBpcyBub24tYXV0byBhbmQgZGlmZmVycyBmcm9tIGN1cnJlbnRcblx0XHRcdH0gZWxzZSBpZiAoIHByZXYgIT09IFwiKlwiICYmIHByZXYgIT09IGN1cnJlbnQgKSB7XG5cblx0XHRcdFx0Ly8gU2VlayBhIGRpcmVjdCBjb252ZXJ0ZXJcblx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIGN1cnJlbnQgXSB8fCBjb252ZXJ0ZXJzWyBcIiogXCIgKyBjdXJyZW50IF07XG5cblx0XHRcdFx0Ly8gSWYgbm9uZSBmb3VuZCwgc2VlayBhIHBhaXJcblx0XHRcdFx0aWYgKCAhY29udiApIHtcblx0XHRcdFx0XHRmb3IgKCBjb252MiBpbiBjb252ZXJ0ZXJzICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJZiBjb252MiBvdXRwdXRzIGN1cnJlbnRcblx0XHRcdFx0XHRcdHRtcCA9IGNvbnYyLnNwbGl0KCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0aWYgKCB0bXBbIDEgXSA9PT0gY3VycmVudCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBJZiBwcmV2IGNhbiBiZSBjb252ZXJ0ZWQgdG8gYWNjZXB0ZWQgaW5wdXRcblx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIHByZXYgKyBcIiBcIiArIHRtcFsgMCBdIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRjb252ZXJ0ZXJzWyBcIiogXCIgKyB0bXBbIDAgXSBdO1xuXHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDb25kZW5zZSBlcXVpdmFsZW5jZSBjb252ZXJ0ZXJzXG5cdFx0XHRcdFx0XHRcdFx0aWYgKCBjb252ID09PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29udiA9IGNvbnZlcnRlcnNbIGNvbnYyIF07XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPdGhlcndpc2UsIGluc2VydCB0aGUgaW50ZXJtZWRpYXRlIGRhdGFUeXBlXG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggY29udmVydGVyc1sgY29udjIgXSAhPT0gdHJ1ZSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGN1cnJlbnQgPSB0bXBbIDAgXTtcblx0XHRcdFx0XHRcdFx0XHRcdGRhdGFUeXBlcy51bnNoaWZ0KCB0bXBbIDEgXSApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFwcGx5IGNvbnZlcnRlciAoaWYgbm90IGFuIGVxdWl2YWxlbmNlKVxuXHRcdFx0XHRpZiAoIGNvbnYgIT09IHRydWUgKSB7XG5cblx0XHRcdFx0XHQvLyBVbmxlc3MgZXJyb3JzIGFyZSBhbGxvd2VkIHRvIGJ1YmJsZSwgY2F0Y2ggYW5kIHJldHVybiB0aGVtXG5cdFx0XHRcdFx0aWYgKCBjb252ICYmIHMudGhyb3dzICkge1xuXHRcdFx0XHRcdFx0cmVzcG9uc2UgPSBjb252KCByZXNwb25zZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0XHR9IGNhdGNoICggZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdFx0XHRzdGF0ZTogXCJwYXJzZXJlcnJvclwiLFxuXHRcdFx0XHRcdFx0XHRcdGVycm9yOiBjb252ID8gZSA6IFwiTm8gY29udmVyc2lvbiBmcm9tIFwiICsgcHJldiArIFwiIHRvIFwiICsgY3VycmVudFxuXHRcdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB7IHN0YXRlOiBcInN1Y2Nlc3NcIiwgZGF0YTogcmVzcG9uc2UgfTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIENvdW50ZXIgZm9yIGhvbGRpbmcgdGhlIG51bWJlciBvZiBhY3RpdmUgcXVlcmllc1xuXHRhY3RpdmU6IDAsXG5cblx0Ly8gTGFzdC1Nb2RpZmllZCBoZWFkZXIgY2FjaGUgZm9yIG5leHQgcmVxdWVzdFxuXHRsYXN0TW9kaWZpZWQ6IHt9LFxuXHRldGFnOiB7fSxcblxuXHRhamF4U2V0dGluZ3M6IHtcblx0XHR1cmw6IGxvY2F0aW9uLmhyZWYsXG5cdFx0dHlwZTogXCJHRVRcIixcblx0XHRpc0xvY2FsOiBybG9jYWxQcm90b2NvbC50ZXN0KCBsb2NhdGlvbi5wcm90b2NvbCApLFxuXHRcdGdsb2JhbDogdHJ1ZSxcblx0XHRwcm9jZXNzRGF0YTogdHJ1ZSxcblx0XHRhc3luYzogdHJ1ZSxcblx0XHRjb250ZW50VHlwZTogXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixcblxuXHRcdC8qXG5cdFx0dGltZW91dDogMCxcblx0XHRkYXRhOiBudWxsLFxuXHRcdGRhdGFUeXBlOiBudWxsLFxuXHRcdHVzZXJuYW1lOiBudWxsLFxuXHRcdHBhc3N3b3JkOiBudWxsLFxuXHRcdGNhY2hlOiBudWxsLFxuXHRcdHRocm93czogZmFsc2UsXG5cdFx0dHJhZGl0aW9uYWw6IGZhbHNlLFxuXHRcdGhlYWRlcnM6IHt9LFxuXHRcdCovXG5cblx0XHRhY2NlcHRzOiB7XG5cdFx0XHRcIipcIjogYWxsVHlwZXMsXG5cdFx0XHR0ZXh0OiBcInRleHQvcGxhaW5cIixcblx0XHRcdGh0bWw6IFwidGV4dC9odG1sXCIsXG5cdFx0XHR4bWw6IFwiYXBwbGljYXRpb24veG1sLCB0ZXh0L3htbFwiLFxuXHRcdFx0anNvbjogXCJhcHBsaWNhdGlvbi9qc29uLCB0ZXh0L2phdmFzY3JpcHRcIlxuXHRcdH0sXG5cblx0XHRjb250ZW50czoge1xuXHRcdFx0eG1sOiAvXFxieG1sXFxiLyxcblx0XHRcdGh0bWw6IC9cXGJodG1sLyxcblx0XHRcdGpzb246IC9cXGJqc29uXFxiL1xuXHRcdH0sXG5cblx0XHRyZXNwb25zZUZpZWxkczoge1xuXHRcdFx0eG1sOiBcInJlc3BvbnNlWE1MXCIsXG5cdFx0XHR0ZXh0OiBcInJlc3BvbnNlVGV4dFwiLFxuXHRcdFx0anNvbjogXCJyZXNwb25zZUpTT05cIlxuXHRcdH0sXG5cblx0XHQvLyBEYXRhIGNvbnZlcnRlcnNcblx0XHQvLyBLZXlzIHNlcGFyYXRlIHNvdXJjZSAob3IgY2F0Y2hhbGwgXCIqXCIpIGFuZCBkZXN0aW5hdGlvbiB0eXBlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG5cdFx0Y29udmVydGVyczoge1xuXG5cdFx0XHQvLyBDb252ZXJ0IGFueXRoaW5nIHRvIHRleHRcblx0XHRcdFwiKiB0ZXh0XCI6IFN0cmluZyxcblxuXHRcdFx0Ly8gVGV4dCB0byBodG1sICh0cnVlID0gbm8gdHJhbnNmb3JtYXRpb24pXG5cdFx0XHRcInRleHQgaHRtbFwiOiB0cnVlLFxuXG5cdFx0XHQvLyBFdmFsdWF0ZSB0ZXh0IGFzIGEganNvbiBleHByZXNzaW9uXG5cdFx0XHRcInRleHQganNvblwiOiBKU09OLnBhcnNlLFxuXG5cdFx0XHQvLyBQYXJzZSB0ZXh0IGFzIHhtbFxuXHRcdFx0XCJ0ZXh0IHhtbFwiOiBqUXVlcnkucGFyc2VYTUxcblx0XHR9LFxuXG5cdFx0Ly8gRm9yIG9wdGlvbnMgdGhhdCBzaG91bGRuJ3QgYmUgZGVlcCBleHRlbmRlZDpcblx0XHQvLyB5b3UgY2FuIGFkZCB5b3VyIG93biBjdXN0b20gb3B0aW9ucyBoZXJlIGlmXG5cdFx0Ly8gYW5kIHdoZW4geW91IGNyZWF0ZSBvbmUgdGhhdCBzaG91bGRuJ3QgYmVcblx0XHQvLyBkZWVwIGV4dGVuZGVkIChzZWUgYWpheEV4dGVuZClcblx0XHRmbGF0T3B0aW9uczoge1xuXHRcdFx0dXJsOiB0cnVlLFxuXHRcdFx0Y29udGV4dDogdHJ1ZVxuXHRcdH1cblx0fSxcblxuXHQvLyBDcmVhdGVzIGEgZnVsbCBmbGVkZ2VkIHNldHRpbmdzIG9iamVjdCBpbnRvIHRhcmdldFxuXHQvLyB3aXRoIGJvdGggYWpheFNldHRpbmdzIGFuZCBzZXR0aW5ncyBmaWVsZHMuXG5cdC8vIElmIHRhcmdldCBpcyBvbWl0dGVkLCB3cml0ZXMgaW50byBhamF4U2V0dGluZ3MuXG5cdGFqYXhTZXR1cDogZnVuY3Rpb24oIHRhcmdldCwgc2V0dGluZ3MgKSB7XG5cdFx0cmV0dXJuIHNldHRpbmdzID9cblxuXHRcdFx0Ly8gQnVpbGRpbmcgYSBzZXR0aW5ncyBvYmplY3Rcblx0XHRcdGFqYXhFeHRlbmQoIGFqYXhFeHRlbmQoIHRhcmdldCwgalF1ZXJ5LmFqYXhTZXR0aW5ncyApLCBzZXR0aW5ncyApIDpcblxuXHRcdFx0Ly8gRXh0ZW5kaW5nIGFqYXhTZXR0aW5nc1xuXHRcdFx0YWpheEV4dGVuZCggalF1ZXJ5LmFqYXhTZXR0aW5ncywgdGFyZ2V0ICk7XG5cdH0sXG5cblx0YWpheFByZWZpbHRlcjogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzICksXG5cdGFqYXhUcmFuc3BvcnQ6IGFkZFRvUHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cyApLFxuXG5cdC8vIE1haW4gbWV0aG9kXG5cdGFqYXg6IGZ1bmN0aW9uKCB1cmwsIG9wdGlvbnMgKSB7XG5cblx0XHQvLyBJZiB1cmwgaXMgYW4gb2JqZWN0LCBzaW11bGF0ZSBwcmUtMS41IHNpZ25hdHVyZVxuXHRcdGlmICggdHlwZW9mIHVybCA9PT0gXCJvYmplY3RcIiApIHtcblx0XHRcdG9wdGlvbnMgPSB1cmw7XG5cdFx0XHR1cmwgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yY2Ugb3B0aW9ucyB0byBiZSBhbiBvYmplY3Rcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuXHRcdHZhciB0cmFuc3BvcnQsXG5cblx0XHRcdC8vIFVSTCB3aXRob3V0IGFudGktY2FjaGUgcGFyYW1cblx0XHRcdGNhY2hlVVJMLFxuXG5cdFx0XHQvLyBSZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcsXG5cdFx0XHRyZXNwb25zZUhlYWRlcnMsXG5cblx0XHRcdC8vIHRpbWVvdXQgaGFuZGxlXG5cdFx0XHR0aW1lb3V0VGltZXIsXG5cblx0XHRcdC8vIFVybCBjbGVhbnVwIHZhclxuXHRcdFx0dXJsQW5jaG9yLFxuXG5cdFx0XHQvLyBSZXF1ZXN0IHN0YXRlIChiZWNvbWVzIGZhbHNlIHVwb24gc2VuZCBhbmQgdHJ1ZSB1cG9uIGNvbXBsZXRpb24pXG5cdFx0XHRjb21wbGV0ZWQsXG5cblx0XHRcdC8vIFRvIGtub3cgaWYgZ2xvYmFsIGV2ZW50cyBhcmUgdG8gYmUgZGlzcGF0Y2hlZFxuXHRcdFx0ZmlyZUdsb2JhbHMsXG5cblx0XHRcdC8vIExvb3AgdmFyaWFibGVcblx0XHRcdGksXG5cblx0XHRcdC8vIHVuY2FjaGVkIHBhcnQgb2YgdGhlIHVybFxuXHRcdFx0dW5jYWNoZWQsXG5cblx0XHRcdC8vIENyZWF0ZSB0aGUgZmluYWwgb3B0aW9ucyBvYmplY3Rcblx0XHRcdHMgPSBqUXVlcnkuYWpheFNldHVwKCB7fSwgb3B0aW9ucyApLFxuXG5cdFx0XHQvLyBDYWxsYmFja3MgY29udGV4dFxuXHRcdFx0Y2FsbGJhY2tDb250ZXh0ID0gcy5jb250ZXh0IHx8IHMsXG5cblx0XHRcdC8vIENvbnRleHQgZm9yIGdsb2JhbCBldmVudHMgaXMgY2FsbGJhY2tDb250ZXh0IGlmIGl0IGlzIGEgRE9NIG5vZGUgb3IgalF1ZXJ5IGNvbGxlY3Rpb25cblx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dCA9IHMuY29udGV4dCAmJlxuXHRcdFx0XHQoIGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZSB8fCBjYWxsYmFja0NvbnRleHQuanF1ZXJ5ICkgP1xuXHRcdFx0XHRcdGpRdWVyeSggY2FsbGJhY2tDb250ZXh0ICkgOlxuXHRcdFx0XHRcdGpRdWVyeS5ldmVudCxcblxuXHRcdFx0Ly8gRGVmZXJyZWRzXG5cdFx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZCA9IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0c3RhdHVzQ29kZSA9IHMuc3RhdHVzQ29kZSB8fCB7fSxcblxuXHRcdFx0Ly8gSGVhZGVycyAodGhleSBhcmUgc2VudCBhbGwgYXQgb25jZSlcblx0XHRcdHJlcXVlc3RIZWFkZXJzID0ge30sXG5cdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzID0ge30sXG5cblx0XHRcdC8vIERlZmF1bHQgYWJvcnQgbWVzc2FnZVxuXHRcdFx0c3RyQWJvcnQgPSBcImNhbmNlbGVkXCIsXG5cblx0XHRcdC8vIEZha2UgeGhyXG5cdFx0XHRqcVhIUiA9IHtcblx0XHRcdFx0cmVhZHlTdGF0ZTogMCxcblxuXHRcdFx0XHQvLyBCdWlsZHMgaGVhZGVycyBoYXNodGFibGUgaWYgbmVlZGVkXG5cdFx0XHRcdGdldFJlc3BvbnNlSGVhZGVyOiBmdW5jdGlvbigga2V5ICkge1xuXHRcdFx0XHRcdHZhciBtYXRjaDtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHRcdGlmICggIXJlc3BvbnNlSGVhZGVycyApIHtcblx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzID0ge307XG5cdFx0XHRcdFx0XHRcdHdoaWxlICggKCBtYXRjaCA9IHJoZWFkZXJzLmV4ZWMoIHJlc3BvbnNlSGVhZGVyc1N0cmluZyApICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmVzcG9uc2VIZWFkZXJzWyBtYXRjaFsgMSBdLnRvTG93ZXJDYXNlKCkgXSA9IG1hdGNoWyAyIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdG1hdGNoID0gcmVzcG9uc2VIZWFkZXJzWyBrZXkudG9Mb3dlckNhc2UoKSBdO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gbWF0Y2ggPT0gbnVsbCA/IG51bGwgOiBtYXRjaDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBSYXcgc3RyaW5nXG5cdFx0XHRcdGdldEFsbFJlc3BvbnNlSGVhZGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGNvbXBsZXRlZCA/IHJlc3BvbnNlSGVhZGVyc1N0cmluZyA6IG51bGw7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FjaGVzIHRoZSBoZWFkZXJcblx0XHRcdFx0c2V0UmVxdWVzdEhlYWRlcjogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRuYW1lID0gcmVxdWVzdEhlYWRlcnNOYW1lc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gPVxuXHRcdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSB8fCBuYW1lO1xuXHRcdFx0XHRcdFx0cmVxdWVzdEhlYWRlcnNbIG5hbWUgXSA9IHZhbHVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBPdmVycmlkZXMgcmVzcG9uc2UgY29udGVudC10eXBlIGhlYWRlclxuXHRcdFx0XHRvdmVycmlkZU1pbWVUeXBlOiBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCA9PSBudWxsICkge1xuXHRcdFx0XHRcdFx0cy5taW1lVHlwZSA9IHR5cGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRcdHN0YXR1c0NvZGU6IGZ1bmN0aW9uKCBtYXAgKSB7XG5cdFx0XHRcdFx0dmFyIGNvZGU7XG5cdFx0XHRcdFx0aWYgKCBtYXAgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBFeGVjdXRlIHRoZSBhcHByb3ByaWF0ZSBjYWxsYmFja3Ncblx0XHRcdFx0XHRcdFx0anFYSFIuYWx3YXlzKCBtYXBbIGpxWEhSLnN0YXR1cyBdICk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIExhenktYWRkIHRoZSBuZXcgY2FsbGJhY2tzIGluIGEgd2F5IHRoYXQgcHJlc2VydmVzIG9sZCBvbmVzXG5cdFx0XHRcdFx0XHRcdGZvciAoIGNvZGUgaW4gbWFwICkge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXR1c0NvZGVbIGNvZGUgXSA9IFsgc3RhdHVzQ29kZVsgY29kZSBdLCBtYXBbIGNvZGUgXSBdO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIENhbmNlbCB0aGUgcmVxdWVzdFxuXHRcdFx0XHRhYm9ydDogZnVuY3Rpb24oIHN0YXR1c1RleHQgKSB7XG5cdFx0XHRcdFx0dmFyIGZpbmFsVGV4dCA9IHN0YXR1c1RleHQgfHwgc3RyQWJvcnQ7XG5cdFx0XHRcdFx0aWYgKCB0cmFuc3BvcnQgKSB7XG5cdFx0XHRcdFx0XHR0cmFuc3BvcnQuYWJvcnQoIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRkb25lKCAwLCBmaW5hbFRleHQgKTtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0fTtcblxuXHRcdC8vIEF0dGFjaCBkZWZlcnJlZHNcblx0XHRkZWZlcnJlZC5wcm9taXNlKCBqcVhIUiApO1xuXG5cdFx0Ly8gQWRkIHByb3RvY29sIGlmIG5vdCBwcm92aWRlZCAocHJlZmlsdGVycyBtaWdodCBleHBlY3QgaXQpXG5cdFx0Ly8gSGFuZGxlIGZhbHN5IHVybCBpbiB0aGUgc2V0dGluZ3Mgb2JqZWN0ICgjMTAwOTM6IGNvbnNpc3RlbmN5IHdpdGggb2xkIHNpZ25hdHVyZSlcblx0XHQvLyBXZSBhbHNvIHVzZSB0aGUgdXJsIHBhcmFtZXRlciBpZiBhdmFpbGFibGVcblx0XHRzLnVybCA9ICggKCB1cmwgfHwgcy51cmwgfHwgbG9jYXRpb24uaHJlZiApICsgXCJcIiApXG5cdFx0XHQucmVwbGFjZSggcnByb3RvY29sLCBsb2NhdGlvbi5wcm90b2NvbCArIFwiLy9cIiApO1xuXG5cdFx0Ly8gQWxpYXMgbWV0aG9kIG9wdGlvbiB0byB0eXBlIGFzIHBlciB0aWNrZXQgIzEyMDA0XG5cdFx0cy50eXBlID0gb3B0aW9ucy5tZXRob2QgfHwgb3B0aW9ucy50eXBlIHx8IHMubWV0aG9kIHx8IHMudHlwZTtcblxuXHRcdC8vIEV4dHJhY3QgZGF0YVR5cGVzIGxpc3Rcblx0XHRzLmRhdGFUeXBlcyA9ICggcy5kYXRhVHlwZSB8fCBcIipcIiApLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblxuXHRcdC8vIEEgY3Jvc3MtZG9tYWluIHJlcXVlc3QgaXMgaW4gb3JkZXIgd2hlbiB0aGUgb3JpZ2luIGRvZXNuJ3QgbWF0Y2ggdGhlIGN1cnJlbnQgb3JpZ2luLlxuXHRcdGlmICggcy5jcm9zc0RvbWFpbiA9PSBudWxsICkge1xuXHRcdFx0dXJsQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEsIEVkZ2UgMTIgLSAxM1xuXHRcdFx0Ly8gSUUgdGhyb3dzIGV4Y2VwdGlvbiBvbiBhY2Nlc3NpbmcgdGhlIGhyZWYgcHJvcGVydHkgaWYgdXJsIGlzIG1hbGZvcm1lZCxcblx0XHRcdC8vIGUuZy4gaHR0cDovL2V4YW1wbGUuY29tOjgweC9cblx0XHRcdHRyeSB7XG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gcy51cmw7XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD04IC0gMTEgb25seVxuXHRcdFx0XHQvLyBBbmNob3IncyBob3N0IHByb3BlcnR5IGlzbid0IGNvcnJlY3RseSBzZXQgd2hlbiBzLnVybCBpcyByZWxhdGl2ZVxuXHRcdFx0XHR1cmxBbmNob3IuaHJlZiA9IHVybEFuY2hvci5ocmVmO1xuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gb3JpZ2luQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgb3JpZ2luQW5jaG9yLmhvc3QgIT09XG5cdFx0XHRcdFx0dXJsQW5jaG9yLnByb3RvY29sICsgXCIvL1wiICsgdXJsQW5jaG9yLmhvc3Q7XG5cdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHQvLyBJZiB0aGVyZSBpcyBhbiBlcnJvciBwYXJzaW5nIHRoZSBVUkwsIGFzc3VtZSBpdCBpcyBjcm9zc0RvbWFpbixcblx0XHRcdFx0Ly8gaXQgY2FuIGJlIHJlamVjdGVkIGJ5IHRoZSB0cmFuc3BvcnQgaWYgaXQgaXMgaW52YWxpZFxuXHRcdFx0XHRzLmNyb3NzRG9tYWluID0gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb252ZXJ0IGRhdGEgaWYgbm90IGFscmVhZHkgYSBzdHJpbmdcblx0XHRpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmIHR5cGVvZiBzLmRhdGEgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRzLmRhdGEgPSBqUXVlcnkucGFyYW0oIHMuZGF0YSwgcy50cmFkaXRpb25hbCApO1xuXHRcdH1cblxuXHRcdC8vIEFwcGx5IHByZWZpbHRlcnNcblx0XHRpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggcHJlZmlsdGVycywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGEgcHJlZmlsdGVyLCBzdG9wIHRoZXJlXG5cdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRyZXR1cm4ganFYSFI7XG5cdFx0fVxuXG5cdFx0Ly8gV2UgY2FuIGZpcmUgZ2xvYmFsIGV2ZW50cyBhcyBvZiBub3cgaWYgYXNrZWQgdG9cblx0XHQvLyBEb24ndCBmaXJlIGV2ZW50cyBpZiBqUXVlcnkuZXZlbnQgaXMgdW5kZWZpbmVkIGluIGFuIEFNRC11c2FnZSBzY2VuYXJpbyAoIzE1MTE4KVxuXHRcdGZpcmVHbG9iYWxzID0galF1ZXJ5LmV2ZW50ICYmIHMuZ2xvYmFsO1xuXG5cdFx0Ly8gV2F0Y2ggZm9yIGEgbmV3IHNldCBvZiByZXF1ZXN0c1xuXHRcdGlmICggZmlyZUdsb2JhbHMgJiYgalF1ZXJ5LmFjdGl2ZSsrID09PSAwICkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIFwiYWpheFN0YXJ0XCIgKTtcblx0XHR9XG5cblx0XHQvLyBVcHBlcmNhc2UgdGhlIHR5cGVcblx0XHRzLnR5cGUgPSBzLnR5cGUudG9VcHBlckNhc2UoKTtcblxuXHRcdC8vIERldGVybWluZSBpZiByZXF1ZXN0IGhhcyBjb250ZW50XG5cdFx0cy5oYXNDb250ZW50ID0gIXJub0NvbnRlbnQudGVzdCggcy50eXBlICk7XG5cblx0XHQvLyBTYXZlIHRoZSBVUkwgaW4gY2FzZSB3ZSdyZSB0b3lpbmcgd2l0aCB0aGUgSWYtTW9kaWZpZWQtU2luY2Vcblx0XHQvLyBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIgbGF0ZXIgb25cblx0XHQvLyBSZW1vdmUgaGFzaCB0byBzaW1wbGlmeSB1cmwgbWFuaXB1bGF0aW9uXG5cdFx0Y2FjaGVVUkwgPSBzLnVybC5yZXBsYWNlKCByaGFzaCwgXCJcIiApO1xuXG5cdFx0Ly8gTW9yZSBvcHRpb25zIGhhbmRsaW5nIGZvciByZXF1ZXN0cyB3aXRoIG5vIGNvbnRlbnRcblx0XHRpZiAoICFzLmhhc0NvbnRlbnQgKSB7XG5cblx0XHRcdC8vIFJlbWVtYmVyIHRoZSBoYXNoIHNvIHdlIGNhbiBwdXQgaXQgYmFja1xuXHRcdFx0dW5jYWNoZWQgPSBzLnVybC5zbGljZSggY2FjaGVVUkwubGVuZ3RoICk7XG5cblx0XHRcdC8vIElmIGRhdGEgaXMgYXZhaWxhYmxlLCBhcHBlbmQgZGF0YSB0byB1cmxcblx0XHRcdGlmICggcy5kYXRhICkge1xuXHRcdFx0XHRjYWNoZVVSTCArPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgcy5kYXRhO1xuXG5cdFx0XHRcdC8vICM5NjgyOiByZW1vdmUgZGF0YSBzbyB0aGF0IGl0J3Mgbm90IHVzZWQgaW4gYW4gZXZlbnR1YWwgcmV0cnlcblx0XHRcdFx0ZGVsZXRlIHMuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWRkIG9yIHVwZGF0ZSBhbnRpLWNhY2hlIHBhcmFtIGlmIG5lZWRlZFxuXHRcdFx0aWYgKCBzLmNhY2hlID09PSBmYWxzZSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgPSBjYWNoZVVSTC5yZXBsYWNlKCByYW50aUNhY2hlLCBcIiQxXCIgKTtcblx0XHRcdFx0dW5jYWNoZWQgPSAoIHJxdWVyeS50ZXN0KCBjYWNoZVVSTCApID8gXCImXCIgOiBcIj9cIiApICsgXCJfPVwiICsgKCBub25jZSsrICkgKyB1bmNhY2hlZDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUHV0IGhhc2ggYW5kIGFudGktY2FjaGUgb24gdGhlIFVSTCB0aGF0IHdpbGwgYmUgcmVxdWVzdGVkIChnaC0xNzMyKVxuXHRcdFx0cy51cmwgPSBjYWNoZVVSTCArIHVuY2FjaGVkO1xuXG5cdFx0Ly8gQ2hhbmdlICclMjAnIHRvICcrJyBpZiB0aGlzIGlzIGVuY29kZWQgZm9ybSBib2R5IGNvbnRlbnQgKGdoLTI2NTgpXG5cdFx0fSBlbHNlIGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiZcblx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiICkuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICkge1xuXHRcdFx0cy5kYXRhID0gcy5kYXRhLnJlcGxhY2UoIHIyMCwgXCIrXCIgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0aWYgKCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU1vZGlmaWVkLVNpbmNlXCIsIGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHRcdGlmICggalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKSB7XG5cdFx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiSWYtTm9uZS1NYXRjaFwiLCBqUXVlcnkuZXRhZ1sgY2FjaGVVUkwgXSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgY29ycmVjdCBoZWFkZXIsIGlmIGRhdGEgaXMgYmVpbmcgc2VudFxuXHRcdGlmICggcy5kYXRhICYmIHMuaGFzQ29udGVudCAmJiBzLmNvbnRlbnRUeXBlICE9PSBmYWxzZSB8fCBvcHRpb25zLmNvbnRlbnRUeXBlICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJDb250ZW50LVR5cGVcIiwgcy5jb250ZW50VHlwZSApO1xuXHRcdH1cblxuXHRcdC8vIFNldCB0aGUgQWNjZXB0cyBoZWFkZXIgZm9yIHRoZSBzZXJ2ZXIsIGRlcGVuZGluZyBvbiB0aGUgZGF0YVR5cGVcblx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFxuXHRcdFx0XCJBY2NlcHRcIixcblx0XHRcdHMuZGF0YVR5cGVzWyAwIF0gJiYgcy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gP1xuXHRcdFx0XHRzLmFjY2VwdHNbIHMuZGF0YVR5cGVzWyAwIF0gXSArXG5cdFx0XHRcdFx0KCBzLmRhdGFUeXBlc1sgMCBdICE9PSBcIipcIiA/IFwiLCBcIiArIGFsbFR5cGVzICsgXCI7IHE9MC4wMVwiIDogXCJcIiApIDpcblx0XHRcdFx0cy5hY2NlcHRzWyBcIipcIiBdXG5cdFx0KTtcblxuXHRcdC8vIENoZWNrIGZvciBoZWFkZXJzIG9wdGlvblxuXHRcdGZvciAoIGkgaW4gcy5oZWFkZXJzICkge1xuXHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggaSwgcy5oZWFkZXJzWyBpIF0gKTtcblx0XHR9XG5cblx0XHQvLyBBbGxvdyBjdXN0b20gaGVhZGVycy9taW1ldHlwZXMgYW5kIGVhcmx5IGFib3J0XG5cdFx0aWYgKCBzLmJlZm9yZVNlbmQgJiZcblx0XHRcdCggcy5iZWZvcmVTZW5kLmNhbGwoIGNhbGxiYWNrQ29udGV4dCwganFYSFIsIHMgKSA9PT0gZmFsc2UgfHwgY29tcGxldGVkICkgKSB7XG5cblx0XHRcdC8vIEFib3J0IGlmIG5vdCBkb25lIGFscmVhZHkgYW5kIHJldHVyblxuXHRcdFx0cmV0dXJuIGpxWEhSLmFib3J0KCk7XG5cdFx0fVxuXG5cdFx0Ly8gQWJvcnRpbmcgaXMgbm8gbG9uZ2VyIGEgY2FuY2VsbGF0aW9uXG5cdFx0c3RyQWJvcnQgPSBcImFib3J0XCI7XG5cblx0XHQvLyBJbnN0YWxsIGNhbGxiYWNrcyBvbiBkZWZlcnJlZHNcblx0XHRjb21wbGV0ZURlZmVycmVkLmFkZCggcy5jb21wbGV0ZSApO1xuXHRcdGpxWEhSLmRvbmUoIHMuc3VjY2VzcyApO1xuXHRcdGpxWEhSLmZhaWwoIHMuZXJyb3IgKTtcblxuXHRcdC8vIEdldCB0cmFuc3BvcnRcblx0XHR0cmFuc3BvcnQgPSBpbnNwZWN0UHJlZmlsdGVyc09yVHJhbnNwb3J0cyggdHJhbnNwb3J0cywgcywgb3B0aW9ucywganFYSFIgKTtcblxuXHRcdC8vIElmIG5vIHRyYW5zcG9ydCwgd2UgYXV0by1hYm9ydFxuXHRcdGlmICggIXRyYW5zcG9ydCApIHtcblx0XHRcdGRvbmUoIC0xLCBcIk5vIFRyYW5zcG9ydFwiICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSAxO1xuXG5cdFx0XHQvLyBTZW5kIGdsb2JhbCBldmVudFxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheFNlbmRcIiwgWyBqcVhIUiwgcyBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHJlcXVlc3Qgd2FzIGFib3J0ZWQgaW5zaWRlIGFqYXhTZW5kLCBzdG9wIHRoZXJlXG5cdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0cmV0dXJuIGpxWEhSO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBUaW1lb3V0XG5cdFx0XHRpZiAoIHMuYXN5bmMgJiYgcy50aW1lb3V0ID4gMCApIHtcblx0XHRcdFx0dGltZW91dFRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGpxWEhSLmFib3J0KCBcInRpbWVvdXRcIiApO1xuXHRcdFx0XHR9LCBzLnRpbWVvdXQgKTtcblx0XHRcdH1cblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29tcGxldGVkID0gZmFsc2U7XG5cdFx0XHRcdHRyYW5zcG9ydC5zZW5kKCByZXF1ZXN0SGVhZGVycywgZG9uZSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0Ly8gUmV0aHJvdyBwb3N0LWNvbXBsZXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdFx0XHR0aHJvdyBlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUHJvcGFnYXRlIG90aGVycyBhcyByZXN1bHRzXG5cdFx0XHRcdGRvbmUoIC0xLCBlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsbGJhY2sgZm9yIHdoZW4gZXZlcnl0aGluZyBpcyBkb25lXG5cdFx0ZnVuY3Rpb24gZG9uZSggc3RhdHVzLCBuYXRpdmVTdGF0dXNUZXh0LCByZXNwb25zZXMsIGhlYWRlcnMgKSB7XG5cdFx0XHR2YXIgaXNTdWNjZXNzLCBzdWNjZXNzLCBlcnJvciwgcmVzcG9uc2UsIG1vZGlmaWVkLFxuXHRcdFx0XHRzdGF0dXNUZXh0ID0gbmF0aXZlU3RhdHVzVGV4dDtcblxuXHRcdFx0Ly8gSWdub3JlIHJlcGVhdCBpbnZvY2F0aW9uc1xuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29tcGxldGVkID0gdHJ1ZTtcblxuXHRcdFx0Ly8gQ2xlYXIgdGltZW91dCBpZiBpdCBleGlzdHNcblx0XHRcdGlmICggdGltZW91dFRpbWVyICkge1xuXHRcdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KCB0aW1lb3V0VGltZXIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRGVyZWZlcmVuY2UgdHJhbnNwb3J0IGZvciBlYXJseSBnYXJiYWdlIGNvbGxlY3Rpb25cblx0XHRcdC8vIChubyBtYXR0ZXIgaG93IGxvbmcgdGhlIGpxWEhSIG9iamVjdCB3aWxsIGJlIHVzZWQpXG5cdFx0XHR0cmFuc3BvcnQgPSB1bmRlZmluZWQ7XG5cblx0XHRcdC8vIENhY2hlIHJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyA9IGhlYWRlcnMgfHwgXCJcIjtcblxuXHRcdFx0Ly8gU2V0IHJlYWR5U3RhdGVcblx0XHRcdGpxWEhSLnJlYWR5U3RhdGUgPSBzdGF0dXMgPiAwID8gNCA6IDA7XG5cblx0XHRcdC8vIERldGVybWluZSBpZiBzdWNjZXNzZnVsXG5cdFx0XHRpc1N1Y2Nlc3MgPSBzdGF0dXMgPj0gMjAwICYmIHN0YXR1cyA8IDMwMCB8fCBzdGF0dXMgPT09IDMwNDtcblxuXHRcdFx0Ly8gR2V0IHJlc3BvbnNlIGRhdGFcblx0XHRcdGlmICggcmVzcG9uc2VzICkge1xuXHRcdFx0XHRyZXNwb25zZSA9IGFqYXhIYW5kbGVSZXNwb25zZXMoIHMsIGpxWEhSLCByZXNwb25zZXMgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udmVydCBubyBtYXR0ZXIgd2hhdCAodGhhdCB3YXkgcmVzcG9uc2VYWFggZmllbGRzIGFyZSBhbHdheXMgc2V0KVxuXHRcdFx0cmVzcG9uc2UgPSBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKTtcblxuXHRcdFx0Ly8gSWYgc3VjY2Vzc2Z1bCwgaGFuZGxlIHR5cGUgY2hhaW5pbmdcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXG5cdFx0XHRcdC8vIFNldCB0aGUgSWYtTW9kaWZpZWQtU2luY2UgYW5kL29yIElmLU5vbmUtTWF0Y2ggaGVhZGVyLCBpZiBpbiBpZk1vZGlmaWVkIG1vZGUuXG5cdFx0XHRcdGlmICggcy5pZk1vZGlmaWVkICkge1xuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiTGFzdC1Nb2RpZmllZFwiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5sYXN0TW9kaWZpZWRbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bW9kaWZpZWQgPSBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJldGFnXCIgKTtcblx0XHRcdFx0XHRpZiAoIG1vZGlmaWVkICkge1xuXHRcdFx0XHRcdFx0alF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gPSBtb2RpZmllZDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBpZiBubyBjb250ZW50XG5cdFx0XHRcdGlmICggc3RhdHVzID09PSAyMDQgfHwgcy50eXBlID09PSBcIkhFQURcIiApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJub2NvbnRlbnRcIjtcblxuXHRcdFx0XHQvLyBpZiBub3QgbW9kaWZpZWRcblx0XHRcdFx0fSBlbHNlIGlmICggc3RhdHVzID09PSAzMDQgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm90bW9kaWZpZWRcIjtcblxuXHRcdFx0XHQvLyBJZiB3ZSBoYXZlIGRhdGEsIGxldCdzIGNvbnZlcnQgaXRcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gcmVzcG9uc2Uuc3RhdGU7XG5cdFx0XHRcdFx0c3VjY2VzcyA9IHJlc3BvbnNlLmRhdGE7XG5cdFx0XHRcdFx0ZXJyb3IgPSByZXNwb25zZS5lcnJvcjtcblx0XHRcdFx0XHRpc1N1Y2Nlc3MgPSAhZXJyb3I7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ly8gRXh0cmFjdCBlcnJvciBmcm9tIHN0YXR1c1RleHQgYW5kIG5vcm1hbGl6ZSBmb3Igbm9uLWFib3J0c1xuXHRcdFx0XHRlcnJvciA9IHN0YXR1c1RleHQ7XG5cdFx0XHRcdGlmICggc3RhdHVzIHx8ICFzdGF0dXNUZXh0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcImVycm9yXCI7XG5cdFx0XHRcdFx0aWYgKCBzdGF0dXMgPCAwICkge1xuXHRcdFx0XHRcdFx0c3RhdHVzID0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IGRhdGEgZm9yIHRoZSBmYWtlIHhociBvYmplY3Rcblx0XHRcdGpxWEhSLnN0YXR1cyA9IHN0YXR1cztcblx0XHRcdGpxWEhSLnN0YXR1c1RleHQgPSAoIG5hdGl2ZVN0YXR1c1RleHQgfHwgc3RhdHVzVGV4dCApICsgXCJcIjtcblxuXHRcdFx0Ly8gU3VjY2Vzcy9FcnJvclxuXHRcdFx0aWYgKCBpc1N1Y2Nlc3MgKSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlc29sdmVXaXRoKCBjYWxsYmFja0NvbnRleHQsIFsgc3VjY2Vzcywgc3RhdHVzVGV4dCwganFYSFIgXSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0V2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0LCBlcnJvciBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRqcVhIUi5zdGF0dXNDb2RlKCBzdGF0dXNDb2RlICk7XG5cdFx0XHRzdGF0dXNDb2RlID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRpZiAoIGZpcmVHbG9iYWxzICkge1xuXHRcdFx0XHRnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlciggaXNTdWNjZXNzID8gXCJhamF4U3VjY2Vzc1wiIDogXCJhamF4RXJyb3JcIixcblx0XHRcdFx0XHRbIGpxWEhSLCBzLCBpc1N1Y2Nlc3MgPyBzdWNjZXNzIDogZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21wbGV0ZVxuXHRcdFx0Y29tcGxldGVEZWZlcnJlZC5maXJlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIGpxWEhSLCBzdGF0dXNUZXh0IF0gKTtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIFwiYWpheENvbXBsZXRlXCIsIFsganFYSFIsIHMgXSApO1xuXG5cdFx0XHRcdC8vIEhhbmRsZSB0aGUgZ2xvYmFsIEFKQVggY291bnRlclxuXHRcdFx0XHRpZiAoICEoIC0talF1ZXJ5LmFjdGl2ZSApICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC50cmlnZ2VyKCBcImFqYXhTdG9wXCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBqcVhIUjtcblx0fSxcblxuXHRnZXRKU09OOiBmdW5jdGlvbiggdXJsLCBkYXRhLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCBkYXRhLCBjYWxsYmFjaywgXCJqc29uXCIgKTtcblx0fSxcblxuXHRnZXRTY3JpcHQ6IGZ1bmN0aW9uKCB1cmwsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ2V0KCB1cmwsIHVuZGVmaW5lZCwgY2FsbGJhY2ssIFwic2NyaXB0XCIgKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZWFjaCggWyBcImdldFwiLCBcInBvc3RcIiBdLCBmdW5jdGlvbiggaSwgbWV0aG9kICkge1xuXHRqUXVlcnlbIG1ldGhvZCBdID0gZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2ssIHR5cGUgKSB7XG5cblx0XHQvLyBTaGlmdCBhcmd1bWVudHMgaWYgZGF0YSBhcmd1bWVudCB3YXMgb21pdHRlZFxuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdFx0aHRtbCA9IGh0bWwuY2FsbCggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRoZSBlbGVtZW50cyB0byB3cmFwIHRoZSB0YXJnZXQgYXJvdW5kXG5cdFx0XHR3cmFwID0galF1ZXJ5KCBodG1sLCB0aGlzWyAwIF0ub3duZXJEb2N1bWVudCApLmVxKCAwICkuY2xvbmUoIHRydWUgKTtcblxuXHRcdFx0aWYgKCB0aGlzWyAwIF0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0d3JhcC5pbnNlcnRCZWZvcmUoIHRoaXNbIDAgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHR3cmFwLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBlbGVtID0gdGhpcztcblxuXHRcdFx0XHR3aGlsZSAoIGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQgKSB7XG5cdFx0XHRcdFx0ZWxlbSA9IGVsZW0uZmlyc3RFbGVtZW50Q2hpbGQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZWxlbTtcblx0XHRcdH0gKS5hcHBlbmQoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHR3cmFwSW5uZXI6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdGlmICggalF1ZXJ5LmlzRnVuY3Rpb24oIGh0bWwgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwSW5uZXIoIGh0bWwuY2FsbCggdGhpcywgaSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgc2VsZiA9IGpRdWVyeSggdGhpcyApLFxuXHRcdFx0XHRjb250ZW50cyA9IHNlbGYuY29udGVudHMoKTtcblxuXHRcdFx0aWYgKCBjb250ZW50cy5sZW5ndGggKSB7XG5cdFx0XHRcdGNvbnRlbnRzLndyYXBBbGwoIGh0bWwgKTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c2VsZi5hcHBlbmQoIGh0bWwgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0d3JhcDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIGlzRnVuY3Rpb24gPSBqUXVlcnkuaXNGdW5jdGlvbiggaHRtbCApO1xuXG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRqUXVlcnkoIHRoaXMgKS53cmFwQWxsKCBpc0Z1bmN0aW9uID8gaHRtbC5jYWxsKCB0aGlzLCBpICkgOiBodG1sICk7XG5cdFx0fSApO1xuXHR9LFxuXG5cdHVud3JhcDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHRoaXMucGFyZW50KCBzZWxlY3RvciApLm5vdCggXCJib2R5XCIgKS5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeSggdGhpcyApLnJlcGxhY2VXaXRoKCB0aGlzLmNoaWxkTm9kZXMgKTtcblx0XHR9ICk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH1cbn0gKTtcblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbiA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gIWpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSggZWxlbSApO1xufTtcbmpRdWVyeS5leHByLnBzZXVkb3MudmlzaWJsZSA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRyZXR1cm4gISEoIGVsZW0ub2Zmc2V0V2lkdGggfHwgZWxlbS5vZmZzZXRIZWlnaHQgfHwgZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApO1xufTtcblxuXG5cblxualF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIgPSBmdW5jdGlvbigpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuXHR9IGNhdGNoICggZSApIHt9XG59O1xuXG52YXIgeGhyU3VjY2Vzc1N0YXR1cyA9IHtcblxuXHRcdC8vIEZpbGUgcHJvdG9jb2wgYWx3YXlzIHlpZWxkcyBzdGF0dXMgY29kZSAwLCBhc3N1bWUgMjAwXG5cdFx0MDogMjAwLFxuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHQvLyAjMTQ1MDogc29tZXRpbWVzIElFIHJldHVybnMgMTIyMyB3aGVuIGl0IHNob3VsZCBiZSAyMDRcblx0XHQxMjIzOiAyMDRcblx0fSxcblx0eGhyU3VwcG9ydGVkID0galF1ZXJ5LmFqYXhTZXR0aW5ncy54aHIoKTtcblxuc3VwcG9ydC5jb3JzID0gISF4aHJTdXBwb3J0ZWQgJiYgKCBcIndpdGhDcmVkZW50aWFsc1wiIGluIHhoclN1cHBvcnRlZCApO1xuc3VwcG9ydC5hamF4ID0geGhyU3VwcG9ydGVkID0gISF4aHJTdXBwb3J0ZWQ7XG5cbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBmdW5jdGlvbiggb3B0aW9ucyApIHtcblx0dmFyIGNhbGxiYWNrLCBlcnJvckNhbGxiYWNrO1xuXG5cdC8vIENyb3NzIGRvbWFpbiBvbmx5IGFsbG93ZWQgaWYgc3VwcG9ydGVkIHRocm91Z2ggWE1MSHR0cFJlcXVlc3Rcblx0aWYgKCBzdXBwb3J0LmNvcnMgfHwgeGhyU3VwcG9ydGVkICYmICFvcHRpb25zLmNyb3NzRG9tYWluICkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRzZW5kOiBmdW5jdGlvbiggaGVhZGVycywgY29tcGxldGUgKSB7XG5cdFx0XHRcdHZhciBpLFxuXHRcdFx0XHRcdHhociA9IG9wdGlvbnMueGhyKCk7XG5cblx0XHRcdFx0eGhyLm9wZW4oXG5cdFx0XHRcdFx0b3B0aW9ucy50eXBlLFxuXHRcdFx0XHRcdG9wdGlvbnMudXJsLFxuXHRcdFx0XHRcdG9wdGlvbnMuYXN5bmMsXG5cdFx0XHRcdFx0b3B0aW9ucy51c2VybmFtZSxcblx0XHRcdFx0XHRvcHRpb25zLnBhc3N3b3JkXG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gQXBwbHkgY3VzdG9tIGZpZWxkcyBpZiBwcm92aWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMueGhyRmllbGRzICkge1xuXHRcdFx0XHRcdGZvciAoIGkgaW4gb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0XHR4aHJbIGkgXSA9IG9wdGlvbnMueGhyRmllbGRzWyBpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gT3ZlcnJpZGUgbWltZSB0eXBlIGlmIG5lZWRlZFxuXHRcdFx0XHRpZiAoIG9wdGlvbnMubWltZVR5cGUgJiYgeGhyLm92ZXJyaWRlTWltZVR5cGUgKSB7XG5cdFx0XHRcdFx0eGhyLm92ZXJyaWRlTWltZVR5cGUoIG9wdGlvbnMubWltZVR5cGUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFgtUmVxdWVzdGVkLVdpdGggaGVhZGVyXG5cdFx0XHRcdC8vIEZvciBjcm9zcy1kb21haW4gcmVxdWVzdHMsIHNlZWluZyBhcyBjb25kaXRpb25zIGZvciBhIHByZWZsaWdodCBhcmVcblx0XHRcdFx0Ly8gYWtpbiB0byBhIGppZ3NhdyBwdXp6bGUsIHdlIHNpbXBseSBuZXZlciBzZXQgaXQgdG8gYmUgc3VyZS5cblx0XHRcdFx0Ly8gKGl0IGNhbiBhbHdheXMgYmUgc2V0IG9uIGEgcGVyLXJlcXVlc3QgYmFzaXMgb3IgZXZlbiB1c2luZyBhamF4U2V0dXApXG5cdFx0XHRcdC8vIEZvciBzYW1lLWRvbWFpbiByZXF1ZXN0cywgd29uJ3QgY2hhbmdlIGhlYWRlciBpZiBhbHJlYWR5IHByb3ZpZGVkLlxuXHRcdFx0XHRpZiAoICFvcHRpb25zLmNyb3NzRG9tYWluICYmICFoZWFkZXJzWyBcIlgtUmVxdWVzdGVkLVdpdGhcIiBdICkge1xuXHRcdFx0XHRcdGhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gPSBcIlhNTEh0dHBSZXF1ZXN0XCI7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBTZXQgaGVhZGVyc1xuXHRcdFx0XHRmb3IgKCBpIGluIGhlYWRlcnMgKSB7XG5cdFx0XHRcdFx0eGhyLnNldFJlcXVlc3RIZWFkZXIoIGksIGhlYWRlcnNbIGkgXSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggdHlwZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRjYWxsYmFjayA9IGVycm9yQ2FsbGJhY2sgPSB4aHIub25sb2FkID1cblx0XHRcdFx0XHRcdFx0XHR4aHIub25lcnJvciA9IHhoci5vbmFib3J0ID0geGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IG51bGw7XG5cblx0XHRcdFx0XHRcdFx0aWYgKCB0eXBlID09PSBcImFib3J0XCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0eGhyLmFib3J0KCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAoIHR5cGUgPT09IFwiZXJyb3JcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gT24gYSBtYW51YWwgbmF0aXZlIGFib3J0LCBJRTkgdGhyb3dzXG5cdFx0XHRcdFx0XHRcdFx0Ly8gZXJyb3JzIG9uIGFueSBwcm9wZXJ0eSBhY2Nlc3MgdGhhdCBpcyBub3QgcmVhZHlTdGF0ZVxuXHRcdFx0XHRcdFx0XHRcdGlmICggdHlwZW9mIHhoci5zdGF0dXMgIT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggMCwgXCJlcnJvclwiICk7XG5cdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbXBsZXRlKFxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC8vIEZpbGU6IHByb3RvY29sIGFsd2F5cyB5aWVsZHMgc3RhdHVzIDA7IHNlZSAjODYwNSwgIzE0MjA3XG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblx0XHRcdFx0XHRcdFx0XHRcdHhoclN1Y2Nlc3NTdGF0dXNbIHhoci5zdGF0dXMgXSB8fCB4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0eGhyLnN0YXR1c1RleHQsXG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJRTkgaGFzIG5vIFhIUjIgYnV0IHRocm93cyBvbiBiaW5hcnkgKHRyYWMtMTE0MjYpXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBGb3IgWEhSMiBub24tdGV4dCwgbGV0IHRoZSBjYWxsZXIgaGFuZGxlIGl0IChnaC0yNDk4KVxuXHRcdFx0XHRcdFx0XHRcdFx0KCB4aHIucmVzcG9uc2VUeXBlIHx8IFwidGV4dFwiICkgIT09IFwidGV4dFwiICB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0dHlwZW9mIHhoci5yZXNwb25zZVRleHQgIT09IFwic3RyaW5nXCIgP1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IGJpbmFyeTogeGhyLnJlc3BvbnNlIH0gOlxuXHRcdFx0XHRcdFx0XHRcdFx0XHR7IHRleHQ6IHhoci5yZXNwb25zZVRleHQgfSxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKVxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdC8vIExpc3RlbiB0byBldmVudHNcblx0XHRcdFx0eGhyLm9ubG9hZCA9IGNhbGxiYWNrKCk7XG5cdFx0XHRcdGVycm9yQ2FsbGJhY2sgPSB4aHIub25lcnJvciA9IGNhbGxiYWNrKCBcImVycm9yXCIgKTtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA5IG9ubHlcblx0XHRcdFx0Ly8gVXNlIG9ucmVhZHlzdGF0ZWNoYW5nZSB0byByZXBsYWNlIG9uYWJvcnRcblx0XHRcdFx0Ly8gdG8gaGFuZGxlIHVuY2F1Z2h0IGFib3J0c1xuXHRcdFx0XHRpZiAoIHhoci5vbmFib3J0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0eGhyLm9uYWJvcnQgPSBlcnJvckNhbGxiYWNrO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gQ2hlY2sgcmVhZHlTdGF0ZSBiZWZvcmUgdGltZW91dCBhcyBpdCBjaGFuZ2VzXG5cdFx0XHRcdFx0XHRpZiAoIHhoci5yZWFkeVN0YXRlID09PSA0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEFsbG93IG9uZXJyb3IgdG8gYmUgY2FsbGVkIGZpcnN0LFxuXHRcdFx0XHRcdFx0XHQvLyBidXQgdGhhdCB3aWxsIG5vdCBoYW5kbGUgYSBuYXRpdmUgYWJvcnRcblx0XHRcdFx0XHRcdFx0Ly8gQWxzbywgc2F2ZSBlcnJvckNhbGxiYWNrIHRvIGEgdmFyaWFibGVcblx0XHRcdFx0XHRcdFx0Ly8gYXMgeGhyLm9uZXJyb3IgY2Fubm90IGJlIGFjY2Vzc2VkXG5cdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0ZXJyb3JDYWxsYmFjaygpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDcmVhdGUgdGhlIGFib3J0IGNhbGxiYWNrXG5cdFx0XHRcdGNhbGxiYWNrID0gY2FsbGJhY2soIFwiYWJvcnRcIiApO1xuXG5cdFx0XHRcdHRyeSB7XG5cblx0XHRcdFx0XHQvLyBEbyBzZW5kIHRoZSByZXF1ZXN0ICh0aGlzIG1heSByYWlzZSBhbiBleGNlcHRpb24pXG5cdFx0XHRcdFx0eGhyLnNlbmQoIG9wdGlvbnMuaGFzQ29udGVudCAmJiBvcHRpb25zLmRhdGEgfHwgbnVsbCApO1xuXHRcdFx0XHR9IGNhdGNoICggZSApIHtcblxuXHRcdFx0XHRcdC8vICMxNDY4MzogT25seSByZXRocm93IGlmIHRoaXMgaGFzbid0IGJlZW4gbm90aWZpZWQgYXMgYW4gZXJyb3IgeWV0XG5cdFx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRcdHRocm93IGU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUHJldmVudCBhdXRvLWV4ZWN1dGlvbiBvZiBzY3JpcHRzIHdoZW4gbm8gZXhwbGljaXQgZGF0YVR5cGUgd2FzIHByb3ZpZGVkIChTZWUgZ2gtMjQzMilcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBmdW5jdGlvbiggcyApIHtcblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMuY29udGVudHMuc2NyaXB0ID0gZmFsc2U7XG5cdH1cbn0gKTtcblxuLy8gSW5zdGFsbCBzY3JpcHQgZGF0YVR5cGVcbmpRdWVyeS5hamF4U2V0dXAoIHtcblx0YWNjZXB0czoge1xuXHRcdHNjcmlwdDogXCJ0ZXh0L2phdmFzY3JpcHQsIGFwcGxpY2F0aW9uL2phdmFzY3JpcHQsIFwiICtcblx0XHRcdFwiYXBwbGljYXRpb24vZWNtYXNjcmlwdCwgYXBwbGljYXRpb24veC1lY21hc2NyaXB0XCJcblx0fSxcblx0Y29udGVudHM6IHtcblx0XHRzY3JpcHQ6IC9cXGIoPzpqYXZhfGVjbWEpc2NyaXB0XFxiL1xuXHR9LFxuXHRjb252ZXJ0ZXJzOiB7XG5cdFx0XCJ0ZXh0IHNjcmlwdFwiOiBmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdGpRdWVyeS5nbG9iYWxFdmFsKCB0ZXh0ICk7XG5cdFx0XHRyZXR1cm4gdGV4dDtcblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gSGFuZGxlIGNhY2hlJ3Mgc3BlY2lhbCBjYXNlIGFuZCBjcm9zc0RvbWFpblxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIFwic2NyaXB0XCIsIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRzLmNhY2hlID0gZmFsc2U7XG5cdH1cblx0aWYgKCBzLmNyb3NzRG9tYWluICkge1xuXHRcdHMudHlwZSA9IFwiR0VUXCI7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBzY3JpcHQgdGFnIGhhY2sgdHJhbnNwb3J0XG5qUXVlcnkuYWpheFRyYW5zcG9ydCggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cblx0Ly8gVGhpcyB0cmFuc3BvcnQgb25seSBkZWFscyB3aXRoIGNyb3NzIGRvbWFpbiByZXF1ZXN0c1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0dmFyIHNjcmlwdCwgY2FsbGJhY2s7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBfLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0c2NyaXB0ID0galF1ZXJ5KCBcIjxzY3JpcHQ+XCIgKS5wcm9wKCB7XG5cdFx0XHRcdFx0Y2hhcnNldDogcy5zY3JpcHRDaGFyc2V0LFxuXHRcdFx0XHRcdHNyYzogcy51cmxcblx0XHRcdFx0fSApLm9uKFxuXHRcdFx0XHRcdFwibG9hZCBlcnJvclwiLFxuXHRcdFx0XHRcdGNhbGxiYWNrID0gZnVuY3Rpb24oIGV2dCApIHtcblx0XHRcdFx0XHRcdHNjcmlwdC5yZW1vdmUoKTtcblx0XHRcdFx0XHRcdGNhbGxiYWNrID0gbnVsbDtcblx0XHRcdFx0XHRcdGlmICggZXZ0ICkge1xuXHRcdFx0XHRcdFx0XHRjb21wbGV0ZSggZXZ0LnR5cGUgPT09IFwiZXJyb3JcIiA/IDQwNCA6IDIwMCwgZXZ0LnR5cGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdCk7XG5cblx0XHRcdFx0Ly8gVXNlIG5hdGl2ZSBET00gbWFuaXB1bGF0aW9uIHRvIGF2b2lkIG91ciBkb21NYW5pcCBBSkFYIHRyaWNrZXJ5XG5cdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoIHNjcmlwdFsgMCBdICk7XG5cdFx0XHR9LFxuXHRcdFx0YWJvcnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9O1xuXHR9XG59ICk7XG5cblxuXG5cbnZhciBvbGRDYWxsYmFja3MgPSBbXSxcblx0cmpzb25wID0gLyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztcblxuLy8gRGVmYXVsdCBqc29ucCBzZXR0aW5nc1xualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRqc29ucDogXCJjYWxsYmFja1wiLFxuXHRqc29ucENhbGxiYWNrOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY2FsbGJhY2sgPSBvbGRDYWxsYmFja3MucG9wKCkgfHwgKCBqUXVlcnkuZXhwYW5kbyArIFwiX1wiICsgKCBub25jZSsrICkgKTtcblx0XHR0aGlzWyBjYWxsYmFjayBdID0gdHJ1ZTtcblx0XHRyZXR1cm4gY2FsbGJhY2s7XG5cdH1cbn0gKTtcblxuLy8gRGV0ZWN0LCBub3JtYWxpemUgb3B0aW9ucyBhbmQgaW5zdGFsbCBjYWxsYmFja3MgZm9yIGpzb25wIHJlcXVlc3RzXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJqc29uIGpzb25wXCIsIGZ1bmN0aW9uKCBzLCBvcmlnaW5hbFNldHRpbmdzLCBqcVhIUiApIHtcblxuXHR2YXIgY2FsbGJhY2tOYW1lLCBvdmVyd3JpdHRlbiwgcmVzcG9uc2VDb250YWluZXIsXG5cdFx0anNvblByb3AgPSBzLmpzb25wICE9PSBmYWxzZSAmJiAoIHJqc29ucC50ZXN0KCBzLnVybCApID9cblx0XHRcdFwidXJsXCIgOlxuXHRcdFx0dHlwZW9mIHMuZGF0YSA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApXG5cdFx0XHRcdFx0LmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCAmJlxuXHRcdFx0XHRyanNvbnAudGVzdCggcy5kYXRhICkgJiYgXCJkYXRhXCJcblx0XHQpO1xuXG5cdC8vIEhhbmRsZSBpZmYgdGhlIGV4cGVjdGVkIGRhdGEgdHlwZSBpcyBcImpzb25wXCIgb3Igd2UgaGF2ZSBhIHBhcmFtZXRlciB0byBzZXRcblx0aWYgKCBqc29uUHJvcCB8fCBzLmRhdGFUeXBlc1sgMCBdID09PSBcImpzb25wXCIgKSB7XG5cblx0XHQvLyBHZXQgY2FsbGJhY2sgbmFtZSwgcmVtZW1iZXJpbmcgcHJlZXhpc3RpbmcgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIGl0XG5cdFx0Y2FsbGJhY2tOYW1lID0gcy5qc29ucENhbGxiYWNrID0galF1ZXJ5LmlzRnVuY3Rpb24oIHMuanNvbnBDYWxsYmFjayApID9cblx0XHRcdHMuanNvbnBDYWxsYmFjaygpIDpcblx0XHRcdHMuanNvbnBDYWxsYmFjaztcblxuXHRcdC8vIEluc2VydCBjYWxsYmFjayBpbnRvIHVybCBvciBmb3JtIGRhdGFcblx0XHRpZiAoIGpzb25Qcm9wICkge1xuXHRcdFx0c1sganNvblByb3AgXSA9IHNbIGpzb25Qcm9wIF0ucmVwbGFjZSggcmpzb25wLCBcIiQxXCIgKyBjYWxsYmFja05hbWUgKTtcblx0XHR9IGVsc2UgaWYgKCBzLmpzb25wICE9PSBmYWxzZSApIHtcblx0XHRcdHMudXJsICs9ICggcnF1ZXJ5LnRlc3QoIHMudXJsICkgPyBcIiZcIiA6IFwiP1wiICkgKyBzLmpzb25wICsgXCI9XCIgKyBjYWxsYmFja05hbWU7XG5cdFx0fVxuXG5cdFx0Ly8gVXNlIGRhdGEgY29udmVydGVyIHRvIHJldHJpZXZlIGpzb24gYWZ0ZXIgc2NyaXB0IGV4ZWN1dGlvblxuXHRcdHMuY29udmVydGVyc1sgXCJzY3JpcHQganNvblwiIF0gPSBmdW5jdGlvbigpIHtcblx0XHRcdGlmICggIXJlc3BvbnNlQ29udGFpbmVyICkge1xuXHRcdFx0XHRqUXVlcnkuZXJyb3IoIGNhbGxiYWNrTmFtZSArIFwiIHdhcyBub3QgY2FsbGVkXCIgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXNwb25zZUNvbnRhaW5lclsgMCBdO1xuXHRcdH07XG5cblx0XHQvLyBGb3JjZSBqc29uIGRhdGFUeXBlXG5cdFx0cy5kYXRhVHlwZXNbIDAgXSA9IFwianNvblwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja1xuXHRcdG92ZXJ3cml0dGVuID0gd2luZG93WyBjYWxsYmFja05hbWUgXTtcblx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXNwb25zZUNvbnRhaW5lciA9IGFyZ3VtZW50cztcblx0XHR9O1xuXG5cdFx0Ly8gQ2xlYW4tdXAgZnVuY3Rpb24gKGZpcmVzIGFmdGVyIGNvbnZlcnRlcnMpXG5cdFx0anFYSFIuYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gSWYgcHJldmlvdXMgdmFsdWUgZGlkbid0IGV4aXN0IC0gcmVtb3ZlIGl0XG5cdFx0XHRpZiAoIG92ZXJ3cml0dGVuID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdGpRdWVyeSggd2luZG93ICkucmVtb3ZlUHJvcCggY2FsbGJhY2tOYW1lICk7XG5cblx0XHRcdC8vIE90aGVyd2lzZSByZXN0b3JlIHByZWV4aXN0aW5nIHZhbHVlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR3aW5kb3dbIGNhbGxiYWNrTmFtZSBdID0gb3ZlcndyaXR0ZW47XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNhdmUgYmFjayBhcyBmcmVlXG5cdFx0XHRpZiAoIHNbIGNhbGxiYWNrTmFtZSBdICkge1xuXG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHJlLXVzaW5nIHRoZSBvcHRpb25zIGRvZXNuJ3Qgc2NyZXcgdGhpbmdzIGFyb3VuZFxuXHRcdFx0XHRzLmpzb25wQ2FsbGJhY2sgPSBvcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHRcdFx0Ly8gU2F2ZSB0aGUgY2FsbGJhY2sgbmFtZSBmb3IgZnV0dXJlIHVzZVxuXHRcdFx0XHRvbGRDYWxsYmFja3MucHVzaCggY2FsbGJhY2tOYW1lICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENhbGwgaWYgaXQgd2FzIGEgZnVuY3Rpb24gYW5kIHdlIGhhdmUgYSByZXNwb25zZVxuXHRcdFx0aWYgKCByZXNwb25zZUNvbnRhaW5lciAmJiBqUXVlcnkuaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGpRdWVyeS5pc0Z1bmN0aW9uKCBwYXJhbXMgKSApIHtcblxuXHRcdC8vIFdlIGFzc3VtZSB0aGF0IGl0J3MgdGhlIGNhbGxiYWNrXG5cdFx0Y2FsbGJhY2sgPSBwYXJhbXM7XG5cdFx0cGFyYW1zID0gdW5kZWZpbmVkO1xuXG5cdC8vIE90aGVyd2lzZSwgYnVpbGQgYSBwYXJhbSBzdHJpbmdcblx0fSBlbHNlIGlmICggcGFyYW1zICYmIHR5cGVvZiBwYXJhbXMgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0dHlwZSA9IFwiUE9TVFwiO1xuXHR9XG5cblx0Ly8gSWYgd2UgaGF2ZSBlbGVtZW50cyB0byBtb2RpZnksIG1ha2UgdGhlIHJlcXVlc3Rcblx0aWYgKCBzZWxmLmxlbmd0aCA+IDAgKSB7XG5cdFx0alF1ZXJ5LmFqYXgoIHtcblx0XHRcdHVybDogdXJsLFxuXG5cdFx0XHQvLyBJZiBcInR5cGVcIiB2YXJpYWJsZSBpcyB1bmRlZmluZWQsIHRoZW4gXCJHRVRcIiBtZXRob2Qgd2lsbCBiZSB1c2VkLlxuXHRcdFx0Ly8gTWFrZSB2YWx1ZSBvZiB0aGlzIGZpZWxkIGV4cGxpY2l0IHNpbmNlXG5cdFx0XHQvLyB1c2VyIGNhbiBvdmVycmlkZSBpdCB0aHJvdWdoIGFqYXhTZXR1cCBtZXRob2Rcblx0XHRcdHR5cGU6IHR5cGUgfHwgXCJHRVRcIixcblx0XHRcdGRhdGFUeXBlOiBcImh0bWxcIixcblx0XHRcdGRhdGE6IHBhcmFtc1xuXHRcdH0gKS5kb25lKCBmdW5jdGlvbiggcmVzcG9uc2VUZXh0ICkge1xuXG5cdFx0XHQvLyBTYXZlIHJlc3BvbnNlIGZvciB1c2UgaW4gY29tcGxldGUgY2FsbGJhY2tcblx0XHRcdHJlc3BvbnNlID0gYXJndW1lbnRzO1xuXG5cdFx0XHRzZWxmLmh0bWwoIHNlbGVjdG9yID9cblxuXHRcdFx0XHQvLyBJZiBhIHNlbGVjdG9yIHdhcyBzcGVjaWZpZWQsIGxvY2F0ZSB0aGUgcmlnaHQgZWxlbWVudHMgaW4gYSBkdW1teSBkaXZcblx0XHRcdFx0Ly8gRXhjbHVkZSBzY3JpcHRzIHRvIGF2b2lkIElFICdQZXJtaXNzaW9uIERlbmllZCcgZXJyb3JzXG5cdFx0XHRcdGpRdWVyeSggXCI8ZGl2PlwiICkuYXBwZW5kKCBqUXVlcnkucGFyc2VIVE1MKCByZXNwb25zZVRleHQgKSApLmZpbmQoIHNlbGVjdG9yICkgOlxuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSB1c2UgdGhlIGZ1bGwgcmVzdWx0XG5cdFx0XHRcdHJlc3BvbnNlVGV4dCApO1xuXG5cdFx0Ly8gSWYgdGhlIHJlcXVlc3Qgc3VjY2VlZHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImRhdGFcIiwgXCJzdGF0dXNcIiwgXCJqcVhIUlwiXG5cdFx0Ly8gYnV0IHRoZXkgYXJlIGlnbm9yZWQgYmVjYXVzZSByZXNwb25zZSB3YXMgc2V0IGFib3ZlLlxuXHRcdC8vIElmIGl0IGZhaWxzLCB0aGlzIGZ1bmN0aW9uIGdldHMgXCJqcVhIUlwiLCBcInN0YXR1c1wiLCBcImVycm9yXCJcblx0XHR9ICkuYWx3YXlzKCBjYWxsYmFjayAmJiBmdW5jdGlvbigganFYSFIsIHN0YXR1cyApIHtcblx0XHRcdHNlbGYuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrLmFwcGx5KCB0aGlzLCByZXNwb25zZSB8fCBbIGpxWEhSLnJlc3BvbnNlVGV4dCwgc3RhdHVzLCBqcVhIUiBdICk7XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5cblxuXG4vLyBBdHRhY2ggYSBidW5jaCBvZiBmdW5jdGlvbnMgZm9yIGhhbmRsaW5nIGNvbW1vbiBBSkFYIGV2ZW50c1xualF1ZXJ5LmVhY2goIFtcblx0XCJhamF4U3RhcnRcIixcblx0XCJhamF4U3RvcFwiLFxuXHRcImFqYXhDb21wbGV0ZVwiLFxuXHRcImFqYXhFcnJvclwiLFxuXHRcImFqYXhTdWNjZXNzXCIsXG5cdFwiYWpheFNlbmRcIlxuXSwgZnVuY3Rpb24oIGksIHR5cGUgKSB7XG5cdGpRdWVyeS5mblsgdHlwZSBdID0gZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlLCBmbiApO1xuXHR9O1xufSApO1xuXG5cblxuXG5qUXVlcnkuZXhwci5wc2V1ZG9zLmFuaW1hdGVkID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiBqUXVlcnkuZ3JlcCggalF1ZXJ5LnRpbWVycywgZnVuY3Rpb24oIGZuICkge1xuXHRcdHJldHVybiBlbGVtID09PSBmbi5lbGVtO1xuXHR9ICkubGVuZ3RoO1xufTtcblxuXG5cblxualF1ZXJ5Lm9mZnNldCA9IHtcblx0c2V0T2Zmc2V0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgaSApIHtcblx0XHR2YXIgY3VyUG9zaXRpb24sIGN1ckxlZnQsIGN1ckNTU1RvcCwgY3VyVG9wLCBjdXJPZmZzZXQsIGN1ckNTU0xlZnQsIGNhbGN1bGF0ZVBvc2l0aW9uLFxuXHRcdFx0cG9zaXRpb24gPSBqUXVlcnkuY3NzKCBlbGVtLCBcInBvc2l0aW9uXCIgKSxcblx0XHRcdGN1ckVsZW0gPSBqUXVlcnkoIGVsZW0gKSxcblx0XHRcdHByb3BzID0ge307XG5cblx0XHQvLyBTZXQgcG9zaXRpb24gZmlyc3QsIGluLWNhc2UgdG9wL2xlZnQgYXJlIHNldCBldmVuIG9uIHN0YXRpYyBlbGVtXG5cdFx0aWYgKCBwb3NpdGlvbiA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdGVsZW0uc3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG5cdFx0fVxuXG5cdFx0Y3VyT2Zmc2V0ID0gY3VyRWxlbS5vZmZzZXQoKTtcblx0XHRjdXJDU1NUb3AgPSBqUXVlcnkuY3NzKCBlbGVtLCBcInRvcFwiICk7XG5cdFx0Y3VyQ1NTTGVmdCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwibGVmdFwiICk7XG5cdFx0Y2FsY3VsYXRlUG9zaXRpb24gPSAoIHBvc2l0aW9uID09PSBcImFic29sdXRlXCIgfHwgcG9zaXRpb24gPT09IFwiZml4ZWRcIiApICYmXG5cdFx0XHQoIGN1ckNTU1RvcCArIGN1ckNTU0xlZnQgKS5pbmRleE9mKCBcImF1dG9cIiApID4gLTE7XG5cblx0XHQvLyBOZWVkIHRvIGJlIGFibGUgdG8gY2FsY3VsYXRlIHBvc2l0aW9uIGlmIGVpdGhlclxuXHRcdC8vIHRvcCBvciBsZWZ0IGlzIGF1dG8gYW5kIHBvc2l0aW9uIGlzIGVpdGhlciBhYnNvbHV0ZSBvciBmaXhlZFxuXHRcdGlmICggY2FsY3VsYXRlUG9zaXRpb24gKSB7XG5cdFx0XHRjdXJQb3NpdGlvbiA9IGN1ckVsZW0ucG9zaXRpb24oKTtcblx0XHRcdGN1clRvcCA9IGN1clBvc2l0aW9uLnRvcDtcblx0XHRcdGN1ckxlZnQgPSBjdXJQb3NpdGlvbi5sZWZ0O1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1clRvcCA9IHBhcnNlRmxvYXQoIGN1ckNTU1RvcCApIHx8IDA7XG5cdFx0XHRjdXJMZWZ0ID0gcGFyc2VGbG9hdCggY3VyQ1NTTGVmdCApIHx8IDA7XG5cdFx0fVxuXG5cdFx0aWYgKCBqUXVlcnkuaXNGdW5jdGlvbiggb3B0aW9ucyApICkge1xuXG5cdFx0XHQvLyBVc2UgalF1ZXJ5LmV4dGVuZCBoZXJlIHRvIGFsbG93IG1vZGlmaWNhdGlvbiBvZiBjb29yZGluYXRlcyBhcmd1bWVudCAoZ2gtMTg0OClcblx0XHRcdG9wdGlvbnMgPSBvcHRpb25zLmNhbGwoIGVsZW0sIGksIGpRdWVyeS5leHRlbmQoIHt9LCBjdXJPZmZzZXQgKSApO1xuXHRcdH1cblxuXHRcdGlmICggb3B0aW9ucy50b3AgIT0gbnVsbCApIHtcblx0XHRcdHByb3BzLnRvcCA9ICggb3B0aW9ucy50b3AgLSBjdXJPZmZzZXQudG9wICkgKyBjdXJUb3A7XG5cdFx0fVxuXHRcdGlmICggb3B0aW9ucy5sZWZ0ICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy5sZWZ0ID0gKCBvcHRpb25zLmxlZnQgLSBjdXJPZmZzZXQubGVmdCApICsgY3VyTGVmdDtcblx0XHR9XG5cblx0XHRpZiAoIFwidXNpbmdcIiBpbiBvcHRpb25zICkge1xuXHRcdFx0b3B0aW9ucy51c2luZy5jYWxsKCBlbGVtLCBwcm9wcyApO1xuXG5cdFx0fSBlbHNlIHtcblx0XHRcdGN1ckVsZW0uY3NzKCBwcm9wcyApO1xuXHRcdH1cblx0fVxufTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRvZmZzZXQ6IGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXG5cdFx0Ly8gUHJlc2VydmUgY2hhaW5pbmcgZm9yIHNldHRlclxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiBvcHRpb25zID09PSB1bmRlZmluZWQgP1xuXHRcdFx0XHR0aGlzIDpcblx0XHRcdFx0dGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0XHRqUXVlcnkub2Zmc2V0LnNldE9mZnNldCggdGhpcywgb3B0aW9ucywgaSApO1xuXHRcdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0dmFyIGRvYywgZG9jRWxlbSwgcmVjdCwgd2luLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXTtcblxuXHRcdGlmICggIWVsZW0gKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHplcm9zIGZvciBkaXNjb25uZWN0ZWQgYW5kIGhpZGRlbiAoZGlzcGxheTogbm9uZSkgZWxlbWVudHMgKGdoLTIzMTApXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG5cdFx0Ly8gUnVubmluZyBnZXRCb3VuZGluZ0NsaWVudFJlY3Qgb24gYVxuXHRcdC8vIGRpc2Nvbm5lY3RlZCBub2RlIGluIElFIHRocm93cyBhbiBlcnJvclxuXHRcdGlmICggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4geyB0b3A6IDAsIGxlZnQ6IDAgfTtcblx0XHR9XG5cblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRkb2NFbGVtID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblx0XHR3aW4gPSBkb2MuZGVmYXVsdFZpZXc7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dG9wOiByZWN0LnRvcCArIHdpbi5wYWdlWU9mZnNldCAtIGRvY0VsZW0uY2xpZW50VG9wLFxuXHRcdFx0bGVmdDogcmVjdC5sZWZ0ICsgd2luLnBhZ2VYT2Zmc2V0IC0gZG9jRWxlbS5jbGllbnRMZWZ0XG5cdFx0fTtcblx0fSxcblxuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRwYXJlbnRPZmZzZXQgPSB7IHRvcDogMCwgbGVmdDogMCB9O1xuXG5cdFx0Ly8gRml4ZWQgZWxlbWVudHMgYXJlIG9mZnNldCBmcm9tIHdpbmRvdyAocGFyZW50T2Zmc2V0ID0ge3RvcDowLCBsZWZ0OiAwfSxcblx0XHQvLyBiZWNhdXNlIGl0IGlzIGl0cyBvbmx5IG9mZnNldCBwYXJlbnRcblx0XHRpZiAoIGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApID09PSBcImZpeGVkXCIgKSB7XG5cblx0XHRcdC8vIEFzc3VtZSBnZXRCb3VuZGluZ0NsaWVudFJlY3QgaXMgdGhlcmUgd2hlbiBjb21wdXRlZCBwb3NpdGlvbiBpcyBmaXhlZFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIEdldCAqcmVhbCogb2Zmc2V0UGFyZW50XG5cdFx0XHRvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudCgpO1xuXG5cdFx0XHQvLyBHZXQgY29ycmVjdCBvZmZzZXRzXG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXHRcdFx0aWYgKCAhbm9kZU5hbWUoIG9mZnNldFBhcmVudFsgMCBdLCBcImh0bWxcIiApICkge1xuXHRcdFx0XHRwYXJlbnRPZmZzZXQgPSBvZmZzZXRQYXJlbnQub2Zmc2V0KCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvZmZzZXRQYXJlbnQgYm9yZGVyc1xuXHRcdFx0cGFyZW50T2Zmc2V0ID0ge1xuXHRcdFx0XHR0b3A6IHBhcmVudE9mZnNldC50b3AgKyBqUXVlcnkuY3NzKCBvZmZzZXRQYXJlbnRbIDAgXSwgXCJib3JkZXJUb3BXaWR0aFwiLCB0cnVlICksXG5cdFx0XHRcdGxlZnQ6IHBhcmVudE9mZnNldC5sZWZ0ICsgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50WyAwIF0sIFwiYm9yZGVyTGVmdFdpZHRoXCIsIHRydWUgKVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBTdWJ0cmFjdCBwYXJlbnQgb2Zmc2V0cyBhbmQgZWxlbWVudCBtYXJnaW5zXG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogb2Zmc2V0LnRvcCAtIHBhcmVudE9mZnNldC50b3AgLSBqUXVlcnkuY3NzKCBlbGVtLCBcIm1hcmdpblRvcFwiLCB0cnVlICksXG5cdFx0XHRsZWZ0OiBvZmZzZXQubGVmdCAtIHBhcmVudE9mZnNldC5sZWZ0IC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5MZWZ0XCIsIHRydWUgKVxuXHRcdH07XG5cdH0sXG5cblx0Ly8gVGhpcyBtZXRob2Qgd2lsbCByZXR1cm4gZG9jdW1lbnRFbGVtZW50IGluIHRoZSBmb2xsb3dpbmcgY2FzZXM6XG5cdC8vIDEpIEZvciB0aGUgZWxlbWVudCBpbnNpZGUgdGhlIGlmcmFtZSB3aXRob3V0IG9mZnNldFBhcmVudCwgdGhpcyBtZXRob2Qgd2lsbCByZXR1cm5cblx0Ly8gICAgZG9jdW1lbnRFbGVtZW50IG9mIHRoZSBwYXJlbnQgd2luZG93XG5cdC8vIDIpIEZvciB0aGUgaGlkZGVuIG9yIGRldGFjaGVkIGVsZW1lbnRcblx0Ly8gMykgRm9yIGJvZHkgb3IgaHRtbCBlbGVtZW50LCBpLmUuIGluIGNhc2Ugb2YgdGhlIGh0bWwgbm9kZSAtIGl0IHdpbGwgcmV0dXJuIGl0c2VsZlxuXHQvL1xuXHQvLyBidXQgdGhvc2UgZXhjZXB0aW9ucyB3ZXJlIG5ldmVyIHByZXNlbnRlZCBhcyBhIHJlYWwgbGlmZSB1c2UtY2FzZXNcblx0Ly8gYW5kIG1pZ2h0IGJlIGNvbnNpZGVyZWQgYXMgbW9yZSBwcmVmZXJhYmxlIHJlc3VsdHMuXG5cdC8vXG5cdC8vIFRoaXMgbG9naWMsIGhvd2V2ZXIsIGlzIG5vdCBndWFyYW50ZWVkIGFuZCBjYW4gY2hhbmdlIGF0IGFueSBwb2ludCBpbiB0aGUgZnV0dXJlXG5cdG9mZnNldFBhcmVudDogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHRoaXMubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBvZmZzZXRQYXJlbnQgPSB0aGlzLm9mZnNldFBhcmVudDtcblxuXHRcdFx0d2hpbGUgKCBvZmZzZXRQYXJlbnQgJiYgalF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblx0XHRcdFx0b2Zmc2V0UGFyZW50ID0gb2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG9mZnNldFBhcmVudCB8fCBkb2N1bWVudEVsZW1lbnQ7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbi8vIENyZWF0ZSBzY3JvbGxMZWZ0IGFuZCBzY3JvbGxUb3AgbWV0aG9kc1xualF1ZXJ5LmVhY2goIHsgc2Nyb2xsTGVmdDogXCJwYWdlWE9mZnNldFwiLCBzY3JvbGxUb3A6IFwicGFnZVlPZmZzZXRcIiB9LCBmdW5jdGlvbiggbWV0aG9kLCBwcm9wICkge1xuXHR2YXIgdG9wID0gXCJwYWdlWU9mZnNldFwiID09PSBwcm9wO1xuXG5cdGpRdWVyeS5mblsgbWV0aG9kIF0gPSBmdW5jdGlvbiggdmFsICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBtZXRob2QsIHZhbCApIHtcblxuXHRcdFx0Ly8gQ29hbGVzY2UgZG9jdW1lbnRzIGFuZCB3aW5kb3dzXG5cdFx0XHR2YXIgd2luO1xuXHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBqUXVlcnkuaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vICQoIHdpbmRvdyApLm91dGVyV2lkdGgvSGVpZ2h0IHJldHVybiB3L2ggaW5jbHVkaW5nIHNjcm9sbGJhcnMgKGdoLTE3MjkpXG5cdFx0XHRcdFx0cmV0dXJuIGZ1bmNOYW1lLmluZGV4T2YoIFwib3V0ZXJcIiApID09PSAwID9cblx0XHRcdFx0XHRcdGVsZW1bIFwiaW5uZXJcIiArIG5hbWUgXSA6XG5cdFx0XHRcdFx0XHRlbGVtLmRvY3VtZW50LmRvY3VtZW50RWxlbWVudFsgXCJjbGllbnRcIiArIG5hbWUgXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEdldCBkb2N1bWVudCB3aWR0aCBvciBoZWlnaHRcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHRcdGRvYyA9IGVsZW0uZG9jdW1lbnRFbGVtZW50O1xuXG5cdFx0XHRcdFx0Ly8gRWl0aGVyIHNjcm9sbFtXaWR0aC9IZWlnaHRdIG9yIG9mZnNldFtXaWR0aC9IZWlnaHRdIG9yIGNsaWVudFtXaWR0aC9IZWlnaHRdLFxuXHRcdFx0XHRcdC8vIHdoaWNoZXZlciBpcyBncmVhdGVzdFxuXHRcdFx0XHRcdHJldHVybiBNYXRoLm1heChcblx0XHRcdFx0XHRcdGVsZW0uYm9keVsgXCJzY3JvbGxcIiArIG5hbWUgXSwgZG9jWyBcInNjcm9sbFwiICsgbmFtZSBdLFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcIm9mZnNldFwiICsgbmFtZSBdLCBkb2NbIFwib2Zmc2V0XCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRkb2NbIFwiY2xpZW50XCIgKyBuYW1lIF1cblx0XHRcdFx0XHQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgP1xuXG5cdFx0XHRcdFx0Ly8gR2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudCwgcmVxdWVzdGluZyBidXQgbm90IGZvcmNpbmcgcGFyc2VGbG9hdFxuXHRcdFx0XHRcdGpRdWVyeS5jc3MoIGVsZW0sIHR5cGUsIGV4dHJhICkgOlxuXG5cdFx0XHRcdFx0Ly8gU2V0IHdpZHRoIG9yIGhlaWdodCBvbiB0aGUgZWxlbWVudFxuXHRcdFx0XHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgdHlwZSwgdmFsdWUsIGV4dHJhICk7XG5cdFx0XHR9LCB0eXBlLCBjaGFpbmFibGUgPyBtYXJnaW4gOiB1bmRlZmluZWQsIGNoYWluYWJsZSApO1xuXHRcdH07XG5cdH0gKTtcbn0gKTtcblxuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0YmluZDogZnVuY3Rpb24oIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIG51bGwsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuYmluZDogZnVuY3Rpb24oIHR5cGVzLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vZmYoIHR5cGVzLCBudWxsLCBmbiApO1xuXHR9LFxuXG5cdGRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBkYXRhLCBmbiApIHtcblx0XHRyZXR1cm4gdGhpcy5vbiggdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHR1bmRlbGVnYXRlOiBmdW5jdGlvbiggc2VsZWN0b3IsIHR5cGVzLCBmbiApIHtcblxuXHRcdC8vICggbmFtZXNwYWNlICkgb3IgKCBzZWxlY3RvciwgdHlwZXMgWywgZm5dIClcblx0XHRyZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/XG5cdFx0XHR0aGlzLm9mZiggc2VsZWN0b3IsIFwiKipcIiApIDpcblx0XHRcdHRoaXMub2ZmKCB0eXBlcywgc2VsZWN0b3IgfHwgXCIqKlwiLCBmbiApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5ob2xkUmVhZHkgPSBmdW5jdGlvbiggaG9sZCApIHtcblx0aWYgKCBob2xkICkge1xuXHRcdGpRdWVyeS5yZWFkeVdhaXQrKztcblx0fSBlbHNlIHtcblx0XHRqUXVlcnkucmVhZHkoIHRydWUgKTtcblx0fVxufTtcbmpRdWVyeS5pc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcbmpRdWVyeS5wYXJzZUpTT04gPSBKU09OLnBhcnNlO1xualF1ZXJ5Lm5vZGVOYW1lID0gbm9kZU5hbWU7XG5cblxuXG5cbi8vIFJlZ2lzdGVyIGFzIGEgbmFtZWQgQU1EIG1vZHVsZSwgc2luY2UgalF1ZXJ5IGNhbiBiZSBjb25jYXRlbmF0ZWQgd2l0aCBvdGhlclxuLy8gZmlsZXMgdGhhdCBtYXkgdXNlIGRlZmluZSwgYnV0IG5vdCB2aWEgYSBwcm9wZXIgY29uY2F0ZW5hdGlvbiBzY3JpcHQgdGhhdFxuLy8gdW5kZXJzdGFuZHMgYW5vbnltb3VzIEFNRCBtb2R1bGVzLiBBIG5hbWVkIEFNRCBpcyBzYWZlc3QgYW5kIG1vc3Qgcm9idXN0XG4vLyB3YXkgdG8gcmVnaXN0ZXIuIExvd2VyY2FzZSBqcXVlcnkgaXMgdXNlZCBiZWNhdXNlIEFNRCBtb2R1bGUgbmFtZXMgYXJlXG4vLyBkZXJpdmVkIGZyb20gZmlsZSBuYW1lcywgYW5kIGpRdWVyeSBpcyBub3JtYWxseSBkZWxpdmVyZWQgaW4gYSBsb3dlcmNhc2Vcbi8vIGZpbGUgbmFtZS4gRG8gdGhpcyBhZnRlciBjcmVhdGluZyB0aGUgZ2xvYmFsIHNvIHRoYXQgaWYgYW4gQU1EIG1vZHVsZSB3YW50c1xuLy8gdG8gY2FsbCBub0NvbmZsaWN0IHRvIGhpZGUgdGhpcyB2ZXJzaW9uIG9mIGpRdWVyeSwgaXQgd2lsbCB3b3JrLlxuXG4vLyBOb3RlIHRoYXQgZm9yIG1heGltdW0gcG9ydGFiaWxpdHksIGxpYnJhcmllcyB0aGF0IGFyZSBub3QgalF1ZXJ5IHNob3VsZFxuLy8gZGVjbGFyZSB0aGVtc2VsdmVzIGFzIGFub255bW91cyBtb2R1bGVzLCBhbmQgYXZvaWQgc2V0dGluZyBhIGdsb2JhbCBpZiBhblxuLy8gQU1EIGxvYWRlciBpcyBwcmVzZW50LiBqUXVlcnkgaXMgYSBzcGVjaWFsIGNhc2UuIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWVcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9qcmJ1cmtlL3JlcXVpcmVqcy93aWtpL1VwZGF0aW5nLWV4aXN0aW5nLWxpYnJhcmllcyN3aWtpLWFub25cblxuaWYgKCB0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCApIHtcblx0ZGVmaW5lKCBcImpxdWVyeVwiLCBbXSwgZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGpRdWVyeTtcblx0fSApO1xufVxuXG5cblxuXG52YXJcblxuXHQvLyBNYXAgb3ZlciBqUXVlcnkgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0X2pRdWVyeSA9IHdpbmRvdy5qUXVlcnksXG5cblx0Ly8gTWFwIG92ZXIgdGhlICQgaW4gY2FzZSBvZiBvdmVyd3JpdGVcblx0XyQgPSB3aW5kb3cuJDtcblxualF1ZXJ5Lm5vQ29uZmxpY3QgPSBmdW5jdGlvbiggZGVlcCApIHtcblx0aWYgKCB3aW5kb3cuJCA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy4kID0gXyQ7XG5cdH1cblxuXHRpZiAoIGRlZXAgJiYgd2luZG93LmpRdWVyeSA9PT0galF1ZXJ5ICkge1xuXHRcdHdpbmRvdy5qUXVlcnkgPSBfalF1ZXJ5O1xuXHR9XG5cblx0cmV0dXJuIGpRdWVyeTtcbn07XG5cbi8vIEV4cG9zZSBqUXVlcnkgYW5kICQgaWRlbnRpZmllcnMsIGV2ZW4gaW4gQU1EXG4vLyAoIzcxMDIjY29tbWVudDoxMCwgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvcHVsbC81NTcpXG4vLyBhbmQgQ29tbW9uSlMgZm9yIGJyb3dzZXIgZW11bGF0b3JzICgjMTM1NjYpXG5pZiAoICFub0dsb2JhbCApIHtcblx0d2luZG93LmpRdWVyeSA9IHdpbmRvdy4kID0galF1ZXJ5O1xufVxuXG5cblxuXG5yZXR1cm4galF1ZXJ5O1xufSApO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qcyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcblx0aWYoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcclxuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xyXG5cdFx0bW9kdWxlLnBhdGhzID0gW107XHJcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcclxuXHRcdGlmKCFtb2R1bGUuY2hpbGRyZW4pIG1vZHVsZS5jaGlsZHJlbiA9IFtdO1xyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcclxuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0bW9kdWxlLndlYnBhY2tQb2x5ZmlsbCA9IDE7XHJcblx0fVxyXG5cdHJldHVybiBtb2R1bGU7XHJcbn07XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAod2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiLCIvKiFcbldheXBvaW50cyAtIDQuMC4xXG5Db3B5cmlnaHQgwqkgMjAxMS0yMDE2IENhbGViIFRyb3VnaHRvblxuTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuaHR0cHM6Ly9naXRodWIuY29tL2ltYWtld2VidGhpbmdzL3dheXBvaW50cy9ibG9iL21hc3Rlci9saWNlbnNlcy50eHRcbiovXG4hZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KG8pe2lmKCFvKXRocm93IG5ldyBFcnJvcihcIk5vIG9wdGlvbnMgcGFzc2VkIHRvIFdheXBvaW50IGNvbnN0cnVjdG9yXCIpO2lmKCFvLmVsZW1lbnQpdGhyb3cgbmV3IEVycm9yKFwiTm8gZWxlbWVudCBvcHRpb24gcGFzc2VkIHRvIFdheXBvaW50IGNvbnN0cnVjdG9yXCIpO2lmKCFvLmhhbmRsZXIpdGhyb3cgbmV3IEVycm9yKFwiTm8gaGFuZGxlciBvcHRpb24gcGFzc2VkIHRvIFdheXBvaW50IGNvbnN0cnVjdG9yXCIpO3RoaXMua2V5PVwid2F5cG9pbnQtXCIrZSx0aGlzLm9wdGlvbnM9dC5BZGFwdGVyLmV4dGVuZCh7fSx0LmRlZmF1bHRzLG8pLHRoaXMuZWxlbWVudD10aGlzLm9wdGlvbnMuZWxlbWVudCx0aGlzLmFkYXB0ZXI9bmV3IHQuQWRhcHRlcih0aGlzLmVsZW1lbnQpLHRoaXMuY2FsbGJhY2s9by5oYW5kbGVyLHRoaXMuYXhpcz10aGlzLm9wdGlvbnMuaG9yaXpvbnRhbD9cImhvcml6b250YWxcIjpcInZlcnRpY2FsXCIsdGhpcy5lbmFibGVkPXRoaXMub3B0aW9ucy5lbmFibGVkLHRoaXMudHJpZ2dlclBvaW50PW51bGwsdGhpcy5ncm91cD10Lkdyb3VwLmZpbmRPckNyZWF0ZSh7bmFtZTp0aGlzLm9wdGlvbnMuZ3JvdXAsYXhpczp0aGlzLmF4aXN9KSx0aGlzLmNvbnRleHQ9dC5Db250ZXh0LmZpbmRPckNyZWF0ZUJ5RWxlbWVudCh0aGlzLm9wdGlvbnMuY29udGV4dCksdC5vZmZzZXRBbGlhc2VzW3RoaXMub3B0aW9ucy5vZmZzZXRdJiYodGhpcy5vcHRpb25zLm9mZnNldD10Lm9mZnNldEFsaWFzZXNbdGhpcy5vcHRpb25zLm9mZnNldF0pLHRoaXMuZ3JvdXAuYWRkKHRoaXMpLHRoaXMuY29udGV4dC5hZGQodGhpcyksaVt0aGlzLmtleV09dGhpcyxlKz0xfXZhciBlPTAsaT17fTt0LnByb3RvdHlwZS5xdWV1ZVRyaWdnZXI9ZnVuY3Rpb24odCl7dGhpcy5ncm91cC5xdWV1ZVRyaWdnZXIodGhpcyx0KX0sdC5wcm90b3R5cGUudHJpZ2dlcj1mdW5jdGlvbih0KXt0aGlzLmVuYWJsZWQmJnRoaXMuY2FsbGJhY2smJnRoaXMuY2FsbGJhY2suYXBwbHkodGhpcyx0KX0sdC5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3RoaXMuY29udGV4dC5yZW1vdmUodGhpcyksdGhpcy5ncm91cC5yZW1vdmUodGhpcyksZGVsZXRlIGlbdGhpcy5rZXldfSx0LnByb3RvdHlwZS5kaXNhYmxlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZW5hYmxlZD0hMSx0aGlzfSx0LnByb3RvdHlwZS5lbmFibGU9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb250ZXh0LnJlZnJlc2goKSx0aGlzLmVuYWJsZWQ9ITAsdGhpc30sdC5wcm90b3R5cGUubmV4dD1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdyb3VwLm5leHQodGhpcyl9LHQucHJvdG90eXBlLnByZXZpb3VzPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ3JvdXAucHJldmlvdXModGhpcyl9LHQuaW52b2tlQWxsPWZ1bmN0aW9uKHQpe3ZhciBlPVtdO2Zvcih2YXIgbyBpbiBpKWUucHVzaChpW29dKTtmb3IodmFyIG49MCxyPWUubGVuZ3RoO3I+bjtuKyspZVtuXVt0XSgpfSx0LmRlc3Ryb3lBbGw9ZnVuY3Rpb24oKXt0Lmludm9rZUFsbChcImRlc3Ryb3lcIil9LHQuZGlzYWJsZUFsbD1mdW5jdGlvbigpe3QuaW52b2tlQWxsKFwiZGlzYWJsZVwiKX0sdC5lbmFibGVBbGw9ZnVuY3Rpb24oKXt0LkNvbnRleHQucmVmcmVzaEFsbCgpO2Zvcih2YXIgZSBpbiBpKWlbZV0uZW5hYmxlZD0hMDtyZXR1cm4gdGhpc30sdC5yZWZyZXNoQWxsPWZ1bmN0aW9uKCl7dC5Db250ZXh0LnJlZnJlc2hBbGwoKX0sdC52aWV3cG9ydEhlaWdodD1mdW5jdGlvbigpe3JldHVybiB3aW5kb3cuaW5uZXJIZWlnaHR8fGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHR9LHQudmlld3BvcnRXaWR0aD1mdW5jdGlvbigpe3JldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGh9LHQuYWRhcHRlcnM9W10sdC5kZWZhdWx0cz17Y29udGV4dDp3aW5kb3csY29udGludW91czohMCxlbmFibGVkOiEwLGdyb3VwOlwiZGVmYXVsdFwiLGhvcml6b250YWw6ITEsb2Zmc2V0OjB9LHQub2Zmc2V0QWxpYXNlcz17XCJib3R0b20taW4tdmlld1wiOmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuY29udGV4dC5pbm5lckhlaWdodCgpLXRoaXMuYWRhcHRlci5vdXRlckhlaWdodCgpfSxcInJpZ2h0LWluLXZpZXdcIjpmdW5jdGlvbigpe3JldHVybiB0aGlzLmNvbnRleHQuaW5uZXJXaWR0aCgpLXRoaXMuYWRhcHRlci5vdXRlcldpZHRoKCl9fSx3aW5kb3cuV2F5cG9pbnQ9dH0oKSxmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQodCl7d2luZG93LnNldFRpbWVvdXQodCwxZTMvNjApfWZ1bmN0aW9uIGUodCl7dGhpcy5lbGVtZW50PXQsdGhpcy5BZGFwdGVyPW4uQWRhcHRlcix0aGlzLmFkYXB0ZXI9bmV3IHRoaXMuQWRhcHRlcih0KSx0aGlzLmtleT1cIndheXBvaW50LWNvbnRleHQtXCIraSx0aGlzLmRpZFNjcm9sbD0hMSx0aGlzLmRpZFJlc2l6ZT0hMSx0aGlzLm9sZFNjcm9sbD17eDp0aGlzLmFkYXB0ZXIuc2Nyb2xsTGVmdCgpLHk6dGhpcy5hZGFwdGVyLnNjcm9sbFRvcCgpfSx0aGlzLndheXBvaW50cz17dmVydGljYWw6e30saG9yaXpvbnRhbDp7fX0sdC53YXlwb2ludENvbnRleHRLZXk9dGhpcy5rZXksb1t0LndheXBvaW50Q29udGV4dEtleV09dGhpcyxpKz0xLG4ud2luZG93Q29udGV4dHx8KG4ud2luZG93Q29udGV4dD0hMCxuLndpbmRvd0NvbnRleHQ9bmV3IGUod2luZG93KSksdGhpcy5jcmVhdGVUaHJvdHRsZWRTY3JvbGxIYW5kbGVyKCksdGhpcy5jcmVhdGVUaHJvdHRsZWRSZXNpemVIYW5kbGVyKCl9dmFyIGk9MCxvPXt9LG49d2luZG93LldheXBvaW50LHI9d2luZG93Lm9ubG9hZDtlLnByb3RvdHlwZS5hZGQ9ZnVuY3Rpb24odCl7dmFyIGU9dC5vcHRpb25zLmhvcml6b250YWw/XCJob3Jpem9udGFsXCI6XCJ2ZXJ0aWNhbFwiO3RoaXMud2F5cG9pbnRzW2VdW3Qua2V5XT10LHRoaXMucmVmcmVzaCgpfSxlLnByb3RvdHlwZS5jaGVja0VtcHR5PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5BZGFwdGVyLmlzRW1wdHlPYmplY3QodGhpcy53YXlwb2ludHMuaG9yaXpvbnRhbCksZT10aGlzLkFkYXB0ZXIuaXNFbXB0eU9iamVjdCh0aGlzLndheXBvaW50cy52ZXJ0aWNhbCksaT10aGlzLmVsZW1lbnQ9PXRoaXMuZWxlbWVudC53aW5kb3c7dCYmZSYmIWkmJih0aGlzLmFkYXB0ZXIub2ZmKFwiLndheXBvaW50c1wiKSxkZWxldGUgb1t0aGlzLmtleV0pfSxlLnByb3RvdHlwZS5jcmVhdGVUaHJvdHRsZWRSZXNpemVIYW5kbGVyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe2UuaGFuZGxlUmVzaXplKCksZS5kaWRSZXNpemU9ITF9dmFyIGU9dGhpczt0aGlzLmFkYXB0ZXIub24oXCJyZXNpemUud2F5cG9pbnRzXCIsZnVuY3Rpb24oKXtlLmRpZFJlc2l6ZXx8KGUuZGlkUmVzaXplPSEwLG4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHQpKX0pfSxlLnByb3RvdHlwZS5jcmVhdGVUaHJvdHRsZWRTY3JvbGxIYW5kbGVyPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCgpe2UuaGFuZGxlU2Nyb2xsKCksZS5kaWRTY3JvbGw9ITF9dmFyIGU9dGhpczt0aGlzLmFkYXB0ZXIub24oXCJzY3JvbGwud2F5cG9pbnRzXCIsZnVuY3Rpb24oKXsoIWUuZGlkU2Nyb2xsfHxuLmlzVG91Y2gpJiYoZS5kaWRTY3JvbGw9ITAsbi5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodCkpfSl9LGUucHJvdG90eXBlLmhhbmRsZVJlc2l6ZT1mdW5jdGlvbigpe24uQ29udGV4dC5yZWZyZXNoQWxsKCl9LGUucHJvdG90eXBlLmhhbmRsZVNjcm9sbD1mdW5jdGlvbigpe3ZhciB0PXt9LGU9e2hvcml6b250YWw6e25ld1Njcm9sbDp0aGlzLmFkYXB0ZXIuc2Nyb2xsTGVmdCgpLG9sZFNjcm9sbDp0aGlzLm9sZFNjcm9sbC54LGZvcndhcmQ6XCJyaWdodFwiLGJhY2t3YXJkOlwibGVmdFwifSx2ZXJ0aWNhbDp7bmV3U2Nyb2xsOnRoaXMuYWRhcHRlci5zY3JvbGxUb3AoKSxvbGRTY3JvbGw6dGhpcy5vbGRTY3JvbGwueSxmb3J3YXJkOlwiZG93blwiLGJhY2t3YXJkOlwidXBcIn19O2Zvcih2YXIgaSBpbiBlKXt2YXIgbz1lW2ldLG49by5uZXdTY3JvbGw+by5vbGRTY3JvbGwscj1uP28uZm9yd2FyZDpvLmJhY2t3YXJkO2Zvcih2YXIgcyBpbiB0aGlzLndheXBvaW50c1tpXSl7dmFyIGE9dGhpcy53YXlwb2ludHNbaV1bc107aWYobnVsbCE9PWEudHJpZ2dlclBvaW50KXt2YXIgbD1vLm9sZFNjcm9sbDxhLnRyaWdnZXJQb2ludCxoPW8ubmV3U2Nyb2xsPj1hLnRyaWdnZXJQb2ludCxwPWwmJmgsdT0hbCYmIWg7KHB8fHUpJiYoYS5xdWV1ZVRyaWdnZXIociksdFthLmdyb3VwLmlkXT1hLmdyb3VwKX19fWZvcih2YXIgYyBpbiB0KXRbY10uZmx1c2hUcmlnZ2VycygpO3RoaXMub2xkU2Nyb2xsPXt4OmUuaG9yaXpvbnRhbC5uZXdTY3JvbGwseTplLnZlcnRpY2FsLm5ld1Njcm9sbH19LGUucHJvdG90eXBlLmlubmVySGVpZ2h0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZWxlbWVudD09dGhpcy5lbGVtZW50LndpbmRvdz9uLnZpZXdwb3J0SGVpZ2h0KCk6dGhpcy5hZGFwdGVyLmlubmVySGVpZ2h0KCl9LGUucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbih0KXtkZWxldGUgdGhpcy53YXlwb2ludHNbdC5heGlzXVt0LmtleV0sdGhpcy5jaGVja0VtcHR5KCl9LGUucHJvdG90eXBlLmlubmVyV2lkdGg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbGVtZW50PT10aGlzLmVsZW1lbnQud2luZG93P24udmlld3BvcnRXaWR0aCgpOnRoaXMuYWRhcHRlci5pbm5lcldpZHRoKCl9LGUucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt2YXIgdD1bXTtmb3IodmFyIGUgaW4gdGhpcy53YXlwb2ludHMpZm9yKHZhciBpIGluIHRoaXMud2F5cG9pbnRzW2VdKXQucHVzaCh0aGlzLndheXBvaW50c1tlXVtpXSk7Zm9yKHZhciBvPTAsbj10Lmxlbmd0aDtuPm87bysrKXRbb10uZGVzdHJveSgpfSxlLnByb3RvdHlwZS5yZWZyZXNoPWZ1bmN0aW9uKCl7dmFyIHQsZT10aGlzLmVsZW1lbnQ9PXRoaXMuZWxlbWVudC53aW5kb3csaT1lP3ZvaWQgMDp0aGlzLmFkYXB0ZXIub2Zmc2V0KCksbz17fTt0aGlzLmhhbmRsZVNjcm9sbCgpLHQ9e2hvcml6b250YWw6e2NvbnRleHRPZmZzZXQ6ZT8wOmkubGVmdCxjb250ZXh0U2Nyb2xsOmU/MDp0aGlzLm9sZFNjcm9sbC54LGNvbnRleHREaW1lbnNpb246dGhpcy5pbm5lcldpZHRoKCksb2xkU2Nyb2xsOnRoaXMub2xkU2Nyb2xsLngsZm9yd2FyZDpcInJpZ2h0XCIsYmFja3dhcmQ6XCJsZWZ0XCIsb2Zmc2V0UHJvcDpcImxlZnRcIn0sdmVydGljYWw6e2NvbnRleHRPZmZzZXQ6ZT8wOmkudG9wLGNvbnRleHRTY3JvbGw6ZT8wOnRoaXMub2xkU2Nyb2xsLnksY29udGV4dERpbWVuc2lvbjp0aGlzLmlubmVySGVpZ2h0KCksb2xkU2Nyb2xsOnRoaXMub2xkU2Nyb2xsLnksZm9yd2FyZDpcImRvd25cIixiYWNrd2FyZDpcInVwXCIsb2Zmc2V0UHJvcDpcInRvcFwifX07Zm9yKHZhciByIGluIHQpe3ZhciBzPXRbcl07Zm9yKHZhciBhIGluIHRoaXMud2F5cG9pbnRzW3JdKXt2YXIgbCxoLHAsdSxjLGQ9dGhpcy53YXlwb2ludHNbcl1bYV0sZj1kLm9wdGlvbnMub2Zmc2V0LHc9ZC50cmlnZ2VyUG9pbnQseT0wLGc9bnVsbD09dztkLmVsZW1lbnQhPT1kLmVsZW1lbnQud2luZG93JiYoeT1kLmFkYXB0ZXIub2Zmc2V0KClbcy5vZmZzZXRQcm9wXSksXCJmdW5jdGlvblwiPT10eXBlb2YgZj9mPWYuYXBwbHkoZCk6XCJzdHJpbmdcIj09dHlwZW9mIGYmJihmPXBhcnNlRmxvYXQoZiksZC5vcHRpb25zLm9mZnNldC5pbmRleE9mKFwiJVwiKT4tMSYmKGY9TWF0aC5jZWlsKHMuY29udGV4dERpbWVuc2lvbipmLzEwMCkpKSxsPXMuY29udGV4dFNjcm9sbC1zLmNvbnRleHRPZmZzZXQsZC50cmlnZ2VyUG9pbnQ9TWF0aC5mbG9vcih5K2wtZiksaD13PHMub2xkU2Nyb2xsLHA9ZC50cmlnZ2VyUG9pbnQ+PXMub2xkU2Nyb2xsLHU9aCYmcCxjPSFoJiYhcCwhZyYmdT8oZC5xdWV1ZVRyaWdnZXIocy5iYWNrd2FyZCksb1tkLmdyb3VwLmlkXT1kLmdyb3VwKTohZyYmYz8oZC5xdWV1ZVRyaWdnZXIocy5mb3J3YXJkKSxvW2QuZ3JvdXAuaWRdPWQuZ3JvdXApOmcmJnMub2xkU2Nyb2xsPj1kLnRyaWdnZXJQb2ludCYmKGQucXVldWVUcmlnZ2VyKHMuZm9yd2FyZCksb1tkLmdyb3VwLmlkXT1kLmdyb3VwKX19cmV0dXJuIG4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIG8pb1t0XS5mbHVzaFRyaWdnZXJzKCl9KSx0aGlzfSxlLmZpbmRPckNyZWF0ZUJ5RWxlbWVudD1mdW5jdGlvbih0KXtyZXR1cm4gZS5maW5kQnlFbGVtZW50KHQpfHxuZXcgZSh0KX0sZS5yZWZyZXNoQWxsPWZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIG8pb1t0XS5yZWZyZXNoKCl9LGUuZmluZEJ5RWxlbWVudD1mdW5jdGlvbih0KXtyZXR1cm4gb1t0LndheXBvaW50Q29udGV4dEtleV19LHdpbmRvdy5vbmxvYWQ9ZnVuY3Rpb24oKXtyJiZyKCksZS5yZWZyZXNoQWxsKCl9LG4ucmVxdWVzdEFuaW1hdGlvbkZyYW1lPWZ1bmN0aW9uKGUpe3ZhciBpPXdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fHQ7aS5jYWxsKHdpbmRvdyxlKX0sbi5Db250ZXh0PWV9KCksZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KHQsZSl7cmV0dXJuIHQudHJpZ2dlclBvaW50LWUudHJpZ2dlclBvaW50fWZ1bmN0aW9uIGUodCxlKXtyZXR1cm4gZS50cmlnZ2VyUG9pbnQtdC50cmlnZ2VyUG9pbnR9ZnVuY3Rpb24gaSh0KXt0aGlzLm5hbWU9dC5uYW1lLHRoaXMuYXhpcz10LmF4aXMsdGhpcy5pZD10aGlzLm5hbWUrXCItXCIrdGhpcy5heGlzLHRoaXMud2F5cG9pbnRzPVtdLHRoaXMuY2xlYXJUcmlnZ2VyUXVldWVzKCksb1t0aGlzLmF4aXNdW3RoaXMubmFtZV09dGhpc312YXIgbz17dmVydGljYWw6e30saG9yaXpvbnRhbDp7fX0sbj13aW5kb3cuV2F5cG9pbnQ7aS5wcm90b3R5cGUuYWRkPWZ1bmN0aW9uKHQpe3RoaXMud2F5cG9pbnRzLnB1c2godCl9LGkucHJvdG90eXBlLmNsZWFyVHJpZ2dlclF1ZXVlcz1mdW5jdGlvbigpe3RoaXMudHJpZ2dlclF1ZXVlcz17dXA6W10sZG93bjpbXSxsZWZ0OltdLHJpZ2h0OltdfX0saS5wcm90b3R5cGUuZmx1c2hUcmlnZ2Vycz1mdW5jdGlvbigpe2Zvcih2YXIgaSBpbiB0aGlzLnRyaWdnZXJRdWV1ZXMpe3ZhciBvPXRoaXMudHJpZ2dlclF1ZXVlc1tpXSxuPVwidXBcIj09PWl8fFwibGVmdFwiPT09aTtvLnNvcnQobj9lOnQpO2Zvcih2YXIgcj0wLHM9by5sZW5ndGg7cz5yO3IrPTEpe3ZhciBhPW9bcl07KGEub3B0aW9ucy5jb250aW51b3VzfHxyPT09by5sZW5ndGgtMSkmJmEudHJpZ2dlcihbaV0pfX10aGlzLmNsZWFyVHJpZ2dlclF1ZXVlcygpfSxpLnByb3RvdHlwZS5uZXh0PWZ1bmN0aW9uKGUpe3RoaXMud2F5cG9pbnRzLnNvcnQodCk7dmFyIGk9bi5BZGFwdGVyLmluQXJyYXkoZSx0aGlzLndheXBvaW50cyksbz1pPT09dGhpcy53YXlwb2ludHMubGVuZ3RoLTE7cmV0dXJuIG8/bnVsbDp0aGlzLndheXBvaW50c1tpKzFdfSxpLnByb3RvdHlwZS5wcmV2aW91cz1mdW5jdGlvbihlKXt0aGlzLndheXBvaW50cy5zb3J0KHQpO3ZhciBpPW4uQWRhcHRlci5pbkFycmF5KGUsdGhpcy53YXlwb2ludHMpO3JldHVybiBpP3RoaXMud2F5cG9pbnRzW2ktMV06bnVsbH0saS5wcm90b3R5cGUucXVldWVUcmlnZ2VyPWZ1bmN0aW9uKHQsZSl7dGhpcy50cmlnZ2VyUXVldWVzW2VdLnB1c2godCl9LGkucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbih0KXt2YXIgZT1uLkFkYXB0ZXIuaW5BcnJheSh0LHRoaXMud2F5cG9pbnRzKTtlPi0xJiZ0aGlzLndheXBvaW50cy5zcGxpY2UoZSwxKX0saS5wcm90b3R5cGUuZmlyc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy53YXlwb2ludHNbMF19LGkucHJvdG90eXBlLmxhc3Q9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy53YXlwb2ludHNbdGhpcy53YXlwb2ludHMubGVuZ3RoLTFdfSxpLmZpbmRPckNyZWF0ZT1mdW5jdGlvbih0KXtyZXR1cm4gb1t0LmF4aXNdW3QubmFtZV18fG5ldyBpKHQpfSxuLkdyb3VwPWl9KCksZnVuY3Rpb24oKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiB0KHQpe3RoaXMuJGVsZW1lbnQ9ZSh0KX12YXIgZT13aW5kb3cualF1ZXJ5LGk9d2luZG93LldheXBvaW50O2UuZWFjaChbXCJpbm5lckhlaWdodFwiLFwiaW5uZXJXaWR0aFwiLFwib2ZmXCIsXCJvZmZzZXRcIixcIm9uXCIsXCJvdXRlckhlaWdodFwiLFwib3V0ZXJXaWR0aFwiLFwic2Nyb2xsTGVmdFwiLFwic2Nyb2xsVG9wXCJdLGZ1bmN0aW9uKGUsaSl7dC5wcm90b3R5cGVbaV09ZnVuY3Rpb24oKXt2YXIgdD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO3JldHVybiB0aGlzLiRlbGVtZW50W2ldLmFwcGx5KHRoaXMuJGVsZW1lbnQsdCl9fSksZS5lYWNoKFtcImV4dGVuZFwiLFwiaW5BcnJheVwiLFwiaXNFbXB0eU9iamVjdFwiXSxmdW5jdGlvbihpLG8pe3Rbb109ZVtvXX0pLGkuYWRhcHRlcnMucHVzaCh7bmFtZTpcImpxdWVyeVwiLEFkYXB0ZXI6dH0pLGkuQWRhcHRlcj10fSgpLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gdCh0KXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgaT1bXSxvPWFyZ3VtZW50c1swXTtyZXR1cm4gdC5pc0Z1bmN0aW9uKGFyZ3VtZW50c1swXSkmJihvPXQuZXh0ZW5kKHt9LGFyZ3VtZW50c1sxXSksby5oYW5kbGVyPWFyZ3VtZW50c1swXSksdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIG49dC5leHRlbmQoe30sbyx7ZWxlbWVudDp0aGlzfSk7XCJzdHJpbmdcIj09dHlwZW9mIG4uY29udGV4dCYmKG4uY29udGV4dD10KHRoaXMpLmNsb3Nlc3Qobi5jb250ZXh0KVswXSksaS5wdXNoKG5ldyBlKG4pKX0pLGl9fXZhciBlPXdpbmRvdy5XYXlwb2ludDt3aW5kb3cualF1ZXJ5JiYod2luZG93LmpRdWVyeS5mbi53YXlwb2ludD10KHdpbmRvdy5qUXVlcnkpKSx3aW5kb3cuWmVwdG8mJih3aW5kb3cuWmVwdG8uZm4ud2F5cG9pbnQ9dCh3aW5kb3cuWmVwdG8pKX0oKTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9ub2RlX21vZHVsZXMvd2F5cG9pbnRzL2xpYi9qcXVlcnkud2F5cG9pbnRzLm1pbi5qcyIsIi8qIVxuV2F5cG9pbnRzIFN0aWNreSBFbGVtZW50IFNob3J0Y3V0IC0gNC4wLjFcbkNvcHlyaWdodCDCqSAyMDExLTIwMTYgQ2FsZWIgVHJvdWdodG9uXG5MaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5odHRwczovL2dpdGh1Yi5jb20vaW1ha2V3ZWJ0aGluZ3Mvd2F5cG9pbnRzL2Jsb2IvbWFzdGVyL2xpY2Vuc2VzLnR4dFxuKi9cbiFmdW5jdGlvbigpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIHQocyl7dGhpcy5vcHRpb25zPWUuZXh0ZW5kKHt9LGkuZGVmYXVsdHMsdC5kZWZhdWx0cyxzKSx0aGlzLmVsZW1lbnQ9dGhpcy5vcHRpb25zLmVsZW1lbnQsdGhpcy4kZWxlbWVudD1lKHRoaXMuZWxlbWVudCksdGhpcy5jcmVhdGVXcmFwcGVyKCksdGhpcy5jcmVhdGVXYXlwb2ludCgpfXZhciBlPXdpbmRvdy5qUXVlcnksaT13aW5kb3cuV2F5cG9pbnQ7dC5wcm90b3R5cGUuY3JlYXRlV2F5cG9pbnQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLm9wdGlvbnMuaGFuZGxlcjt0aGlzLndheXBvaW50PW5ldyBpKGUuZXh0ZW5kKHt9LHRoaXMub3B0aW9ucyx7ZWxlbWVudDp0aGlzLndyYXBwZXIsaGFuZGxlcjplLnByb3h5KGZ1bmN0aW9uKGUpe3ZhciBpPXRoaXMub3B0aW9ucy5kaXJlY3Rpb24uaW5kZXhPZihlKT4tMSxzPWk/dGhpcy4kZWxlbWVudC5vdXRlckhlaWdodCghMCk6XCJcIjt0aGlzLiR3cmFwcGVyLmhlaWdodChzKSx0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKHRoaXMub3B0aW9ucy5zdHVja0NsYXNzLGkpLHQmJnQuY2FsbCh0aGlzLGUpfSx0aGlzKX0pKX0sdC5wcm90b3R5cGUuY3JlYXRlV3JhcHBlcj1mdW5jdGlvbigpe3RoaXMub3B0aW9ucy53cmFwcGVyJiZ0aGlzLiRlbGVtZW50LndyYXAodGhpcy5vcHRpb25zLndyYXBwZXIpLHRoaXMuJHdyYXBwZXI9dGhpcy4kZWxlbWVudC5wYXJlbnQoKSx0aGlzLndyYXBwZXI9dGhpcy4kd3JhcHBlclswXX0sdC5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3RoaXMuJGVsZW1lbnQucGFyZW50KClbMF09PT10aGlzLndyYXBwZXImJih0aGlzLndheXBvaW50LmRlc3Ryb3koKSx0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5zdHVja0NsYXNzKSx0aGlzLm9wdGlvbnMud3JhcHBlciYmdGhpcy4kZWxlbWVudC51bndyYXAoKSl9LHQuZGVmYXVsdHM9e3dyYXBwZXI6JzxkaXYgY2xhc3M9XCJzdGlja3ktd3JhcHBlclwiIC8+JyxzdHVja0NsYXNzOlwic3R1Y2tcIixkaXJlY3Rpb246XCJkb3duIHJpZ2h0XCJ9LGkuU3RpY2t5PXR9KCk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vbm9kZV9tb2R1bGVzL3dheXBvaW50cy9saWIvc2hvcnRjdXRzL3N0aWNreS5taW4uanMiLCIvKiFcbiogQ3VzdG9taXplZCB2ZXJzaW9uIG9mIGlTY3JvbGwuanMgMC4wLjVcbiogSXQgZml4ZXMgYnVncyBhZmZlY3RpbmcgaXRzIGludGVncmF0aW9uIHdpdGggZnVsbHBhZ2UuanNcbiovXG4vKiEgaVNjcm9sbCB2NS4yLjAgfiAoYykgMjAwOC0yMDE2IE1hdHRlbyBTcGluZWxsaSB+IGh0dHA6Ly9jdWJpcS5vcmcvbGljZW5zZSAqL1xuKGZ1bmN0aW9uICh3aW5kb3csIGRvY3VtZW50LCBNYXRoKSB7XG4gICAgdmFyIHJBRiA9IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgIHx8XG4gICAgICAgIHdpbmRvdy53ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgIHx8XG4gICAgICAgIHdpbmRvdy5tb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUgICAgIHx8XG4gICAgICAgIHdpbmRvdy5vUmVxdWVzdEFuaW1hdGlvbkZyYW1lICAgICAgIHx8XG4gICAgICAgIHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZSAgICAgIHx8XG4gICAgICAgIGZ1bmN0aW9uIChjYWxsYmFjaykgeyB3aW5kb3cuc2V0VGltZW91dChjYWxsYmFjaywgMTAwMCAvIDYwKTsgfTtcblxuICAgIHZhciB1dGlscyA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBtZSA9IHt9O1xuXG4gICAgICAgIHZhciBfZWxlbWVudFN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gICAgICAgIHZhciBfdmVuZG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB2ZW5kb3JzID0gWyd0JywgJ3dlYmtpdFQnLCAnTW96VCcsICdtc1QnLCAnT1QnXSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0sXG4gICAgICAgICAgICAgICAgaSA9IDAsXG4gICAgICAgICAgICAgICAgbCA9IHZlbmRvcnMubGVuZ3RoO1xuXG4gICAgICAgICAgICBmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtID0gdmVuZG9yc1tpXSArICdyYW5zZm9ybSc7XG4gICAgICAgICAgICAgICAgaWYgKCB0cmFuc2Zvcm0gaW4gX2VsZW1lbnRTdHlsZSApIHJldHVybiB2ZW5kb3JzW2ldLnN1YnN0cigwLCB2ZW5kb3JzW2ldLmxlbmd0aC0xKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9KSgpO1xuXG4gICAgICAgIGZ1bmN0aW9uIF9wcmVmaXhTdHlsZSAoc3R5bGUpIHtcbiAgICAgICAgICAgIGlmICggX3ZlbmRvciA9PT0gZmFsc2UgKSByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICBpZiAoIF92ZW5kb3IgPT09ICcnICkgcmV0dXJuIHN0eWxlO1xuICAgICAgICAgICAgcmV0dXJuIF92ZW5kb3IgKyBzdHlsZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0eWxlLnN1YnN0cigxKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG1lLmdldFRpbWUgPSBEYXRlLm5vdyB8fCBmdW5jdGlvbiBnZXRUaW1lICgpIHsgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpOyB9O1xuXG4gICAgICAgIG1lLmV4dGVuZCA9IGZ1bmN0aW9uICh0YXJnZXQsIG9iaikge1xuICAgICAgICAgICAgZm9yICggdmFyIGkgaW4gb2JqICkge1xuICAgICAgICAgICAgICAgIHRhcmdldFtpXSA9IG9ialtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBtZS5hZGRFdmVudCA9IGZ1bmN0aW9uIChlbCwgdHlwZSwgZm4sIGNhcHR1cmUpIHtcbiAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgZm4sICEhY2FwdHVyZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgbWUucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiAoZWwsIHR5cGUsIGZuLCBjYXB0dXJlKSB7XG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGZuLCAhIWNhcHR1cmUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIG1lLnByZWZpeFBvaW50ZXJFdmVudCA9IGZ1bmN0aW9uIChwb2ludGVyRXZlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB3aW5kb3cuTVNQb2ludGVyRXZlbnQgP1xuICAgICAgICAgICAgICAgICdNU1BvaW50ZXInICsgcG9pbnRlckV2ZW50LmNoYXJBdCg3KS50b1VwcGVyQ2FzZSgpICsgcG9pbnRlckV2ZW50LnN1YnN0cig4KTpcbiAgICAgICAgICAgICAgICBwb2ludGVyRXZlbnQ7XG4gICAgICAgIH07XG5cbiAgICAgICAgbWUubW9tZW50dW0gPSBmdW5jdGlvbiAoY3VycmVudCwgc3RhcnQsIHRpbWUsIGxvd2VyTWFyZ2luLCB3cmFwcGVyU2l6ZSwgZGVjZWxlcmF0aW9uKSB7XG4gICAgICAgICAgICB2YXIgZGlzdGFuY2UgPSBjdXJyZW50IC0gc3RhcnQsXG4gICAgICAgICAgICAgICAgc3BlZWQgPSBNYXRoLmFicyhkaXN0YW5jZSkgLyB0aW1lLFxuICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLFxuICAgICAgICAgICAgICAgIGR1cmF0aW9uO1xuXG4gICAgICAgICAgICBkZWNlbGVyYXRpb24gPSBkZWNlbGVyYXRpb24gPT09IHVuZGVmaW5lZCA/IDAuMDAwNiA6IGRlY2VsZXJhdGlvbjtcblxuICAgICAgICAgICAgZGVzdGluYXRpb24gPSBjdXJyZW50ICsgKCBzcGVlZCAqIHNwZWVkICkgLyAoIDIgKiBkZWNlbGVyYXRpb24gKSAqICggZGlzdGFuY2UgPCAwID8gLTEgOiAxICk7XG4gICAgICAgICAgICBkdXJhdGlvbiA9IHNwZWVkIC8gZGVjZWxlcmF0aW9uO1xuXG4gICAgICAgICAgICBpZiAoIGRlc3RpbmF0aW9uIDwgbG93ZXJNYXJnaW4gKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24gPSB3cmFwcGVyU2l6ZSA/IGxvd2VyTWFyZ2luIC0gKCB3cmFwcGVyU2l6ZSAvIDIuNSAqICggc3BlZWQgLyA4ICkgKSA6IGxvd2VyTWFyZ2luO1xuICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gTWF0aC5hYnMoZGVzdGluYXRpb24gLSBjdXJyZW50KTtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbiA9IGRpc3RhbmNlIC8gc3BlZWQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBkZXN0aW5hdGlvbiA+IDAgKSB7XG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb24gPSB3cmFwcGVyU2l6ZSA/IHdyYXBwZXJTaXplIC8gMi41ICogKCBzcGVlZCAvIDggKSA6IDA7XG4gICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBNYXRoLmFicyhjdXJyZW50KSArIGRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgICAgIGR1cmF0aW9uID0gZGlzdGFuY2UgLyBzcGVlZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbjogTWF0aC5yb3VuZChkZXN0aW5hdGlvbiksXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uXG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBfdHJhbnNmb3JtID0gX3ByZWZpeFN0eWxlKCd0cmFuc2Zvcm0nKTtcblxuICAgICAgICBtZS5leHRlbmQobWUsIHtcbiAgICAgICAgICAgIGhhc1RyYW5zZm9ybTogX3RyYW5zZm9ybSAhPT0gZmFsc2UsXG4gICAgICAgICAgICBoYXNQZXJzcGVjdGl2ZTogX3ByZWZpeFN0eWxlKCdwZXJzcGVjdGl2ZScpIGluIF9lbGVtZW50U3R5bGUsXG4gICAgICAgICAgICBoYXNUb3VjaDogJ29udG91Y2hzdGFydCcgaW4gd2luZG93LFxuICAgICAgICAgICAgaGFzUG9pbnRlcjogISEod2luZG93LlBvaW50ZXJFdmVudCB8fCB3aW5kb3cuTVNQb2ludGVyRXZlbnQpLCAvLyBJRTEwIGlzIHByZWZpeGVkXG4gICAgICAgICAgICBoYXNUcmFuc2l0aW9uOiBfcHJlZml4U3R5bGUoJ3RyYW5zaXRpb24nKSBpbiBfZWxlbWVudFN0eWxlXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8qXG4gICAgICAgIFRoaXMgc2hvdWxkIGZpbmQgYWxsIEFuZHJvaWQgYnJvd3NlcnMgbG93ZXIgdGhhbiBidWlsZCA1MzUuMTkgKGJvdGggc3RvY2sgYnJvd3NlciBhbmQgd2VidmlldylcbiAgICAgICAgLSBnYWxheHkgUzIgaXMgb2tcbiAgICAgICAgLSAyLjMuNiA6IGBBcHBsZVdlYktpdC81MzMuMSAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIE1vYmlsZSBTYWZhcmkvNTMzLjFgXG4gICAgICAgIC0gNC4wLjQgOiBgQXBwbGVXZWJLaXQvNTM0LjMwIChLSFRNTCwgbGlrZSBHZWNrbykgVmVyc2lvbi80LjAgTW9iaWxlIFNhZmFyaS81MzQuMzBgXG4gICAgICAgLSBnYWxheHkgUzMgaXMgYmFkQW5kcm9pZCAoc3RvY2sgYnJvd2VyLCB3ZWJ2aWV3KVxuICAgICAgICAgYEFwcGxlV2ViS2l0LzUzNC4zMCAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIE1vYmlsZSBTYWZhcmkvNTM0LjMwYFxuICAgICAgIC0gZ2FsYXh5IFM0IGlzIGJhZEFuZHJvaWQgKHN0b2NrIGJyb3dlciwgd2VidmlldylcbiAgICAgICAgIGBBcHBsZVdlYktpdC81MzQuMzAgKEtIVE1MLCBsaWtlIEdlY2tvKSBWZXJzaW9uLzQuMCBNb2JpbGUgU2FmYXJpLzUzNC4zMGBcbiAgICAgICAtIGdhbGF4eSBTNSBpcyBPS1xuICAgICAgICAgYEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIE1vYmlsZSBTYWZhcmkvNTM3LjM2IChDaHJvbWUvKWBcbiAgICAgICAtIGdhbGF4eSBTNiBpcyBPS1xuICAgICAgICAgYEFwcGxlV2ViS2l0LzUzNy4zNiAoS0hUTUwsIGxpa2UgR2Vja28pIFZlcnNpb24vNC4wIE1vYmlsZSBTYWZhcmkvNTM3LjM2IChDaHJvbWUvKWBcbiAgICAgICovXG4gICAgICAgIG1lLmlzQmFkQW5kcm9pZCA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBhcHBWZXJzaW9uID0gd2luZG93Lm5hdmlnYXRvci5hcHBWZXJzaW9uO1xuICAgICAgICAgICAgLy8gQW5kcm9pZCBicm93c2VyIGlzIG5vdCBhIGNocm9tZSBicm93c2VyLlxuICAgICAgICAgICAgaWYgKC9BbmRyb2lkLy50ZXN0KGFwcFZlcnNpb24pICYmICEoL0Nocm9tZVxcL1xcZC8udGVzdChhcHBWZXJzaW9uKSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2FmYXJpVmVyc2lvbiA9IGFwcFZlcnNpb24ubWF0Y2goL1NhZmFyaVxcLyhcXGQrLlxcZCkvKTtcbiAgICAgICAgICAgICAgICBpZihzYWZhcmlWZXJzaW9uICYmIHR5cGVvZiBzYWZhcmlWZXJzaW9uID09PSBcIm9iamVjdFwiICYmIHNhZmFyaVZlcnNpb24ubGVuZ3RoID49IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlRmxvYXQoc2FmYXJpVmVyc2lvblsxXSkgPCA1MzUuMTk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgbWUuZXh0ZW5kKG1lLnN0eWxlID0ge30sIHtcbiAgICAgICAgICAgIHRyYW5zZm9ybTogX3RyYW5zZm9ybSxcbiAgICAgICAgICAgIHRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbjogX3ByZWZpeFN0eWxlKCd0cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24nKSxcbiAgICAgICAgICAgIHRyYW5zaXRpb25EdXJhdGlvbjogX3ByZWZpeFN0eWxlKCd0cmFuc2l0aW9uRHVyYXRpb24nKSxcbiAgICAgICAgICAgIHRyYW5zaXRpb25EZWxheTogX3ByZWZpeFN0eWxlKCd0cmFuc2l0aW9uRGVsYXknKSxcbiAgICAgICAgICAgIHRyYW5zZm9ybU9yaWdpbjogX3ByZWZpeFN0eWxlKCd0cmFuc2Zvcm1PcmlnaW4nKVxuICAgICAgICB9KTtcblxuICAgICAgICBtZS5oYXNDbGFzcyA9IGZ1bmN0aW9uIChlLCBjKSB7XG4gICAgICAgICAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiKF58XFxcXHMpXCIgKyBjICsgXCIoXFxcXHN8JClcIik7XG4gICAgICAgICAgICByZXR1cm4gcmUudGVzdChlLmNsYXNzTmFtZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgbWUuYWRkQ2xhc3MgPSBmdW5jdGlvbiAoZSwgYykge1xuICAgICAgICAgICAgaWYgKCBtZS5oYXNDbGFzcyhlLCBjKSApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBuZXdjbGFzcyA9IGUuY2xhc3NOYW1lLnNwbGl0KCcgJyk7XG4gICAgICAgICAgICBuZXdjbGFzcy5wdXNoKGMpO1xuICAgICAgICAgICAgZS5jbGFzc05hbWUgPSBuZXdjbGFzcy5qb2luKCcgJyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgbWUucmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiAoZSwgYykge1xuICAgICAgICAgICAgaWYgKCAhbWUuaGFzQ2xhc3MoZSwgYykgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcmUgPSBuZXcgUmVnRXhwKFwiKF58XFxcXHMpXCIgKyBjICsgXCIoXFxcXHN8JClcIiwgJ2cnKTtcbiAgICAgICAgICAgIGUuY2xhc3NOYW1lID0gZS5jbGFzc05hbWUucmVwbGFjZShyZSwgJyAnKTtcbiAgICAgICAgfTtcblxuICAgICAgICBtZS5vZmZzZXQgPSBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgIHZhciBsZWZ0ID0gLWVsLm9mZnNldExlZnQsXG4gICAgICAgICAgICAgICAgdG9wID0gLWVsLm9mZnNldFRvcDtcblxuICAgICAgICAgICAgLy8ganNoaW50IC1XMDg0XG4gICAgICAgICAgICB3aGlsZSAoZWwgPSBlbC5vZmZzZXRQYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBsZWZ0IC09IGVsLm9mZnNldExlZnQ7XG4gICAgICAgICAgICAgICAgdG9wIC09IGVsLm9mZnNldFRvcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGpzaGludCArVzA4NFxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGxlZnQ6IGxlZnQsXG4gICAgICAgICAgICAgICAgdG9wOiB0b3BcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG5cbiAgICAgICAgbWUucHJldmVudERlZmF1bHRFeGNlcHRpb24gPSBmdW5jdGlvbiAoZWwsIGV4Y2VwdGlvbnMpIHtcbiAgICAgICAgICAgIGZvciAoIHZhciBpIGluIGV4Y2VwdGlvbnMgKSB7XG4gICAgICAgICAgICAgICAgaWYgKCBleGNlcHRpb25zW2ldLnRlc3QoZWxbaV0pICkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcblxuICAgICAgICBtZS5leHRlbmQobWUuZXZlbnRUeXBlID0ge30sIHtcbiAgICAgICAgICAgIHRvdWNoc3RhcnQ6IDEsXG4gICAgICAgICAgICB0b3VjaG1vdmU6IDEsXG4gICAgICAgICAgICB0b3VjaGVuZDogMSxcblxuICAgICAgICAgICAgbW91c2Vkb3duOiAyLFxuICAgICAgICAgICAgbW91c2Vtb3ZlOiAyLFxuICAgICAgICAgICAgbW91c2V1cDogMixcblxuICAgICAgICAgICAgcG9pbnRlcmRvd246IDMsXG4gICAgICAgICAgICBwb2ludGVybW92ZTogMyxcbiAgICAgICAgICAgIHBvaW50ZXJ1cDogMyxcblxuICAgICAgICAgICAgTVNQb2ludGVyRG93bjogMyxcbiAgICAgICAgICAgIE1TUG9pbnRlck1vdmU6IDMsXG4gICAgICAgICAgICBNU1BvaW50ZXJVcDogM1xuICAgICAgICB9KTtcblxuICAgICAgICBtZS5leHRlbmQobWUuZWFzZSA9IHt9LCB7XG4gICAgICAgICAgICBxdWFkcmF0aWM6IHtcbiAgICAgICAgICAgICAgICBzdHlsZTogJ2N1YmljLWJlemllcigwLjI1LCAwLjQ2LCAwLjQ1LCAwLjk0KScsXG4gICAgICAgICAgICAgICAgZm46IGZ1bmN0aW9uIChrKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBrICogKCAyIC0gayApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjaXJjdWxhcjoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiAnY3ViaWMtYmV6aWVyKDAuMSwgMC41NywgMC4xLCAxKScsICAgLy8gTm90IHByb3Blcmx5IFwiY2lyY3VsYXJcIiBidXQgdGhpcyBsb29rcyBiZXR0ZXIsIGl0IHNob3VsZCBiZSAoMC4wNzUsIDAuODIsIDAuMTY1LCAxKVxuICAgICAgICAgICAgICAgIGZuOiBmdW5jdGlvbiAoaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KCAxIC0gKCAtLWsgKiBrICkgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYmFjazoge1xuICAgICAgICAgICAgICAgIHN0eWxlOiAnY3ViaWMtYmV6aWVyKDAuMTc1LCAwLjg4NSwgMC4zMiwgMS4yNzUpJyxcbiAgICAgICAgICAgICAgICBmbjogZnVuY3Rpb24gKGspIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGIgPSA0O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCBrID0gayAtIDEgKSAqIGsgKiAoICggYiArIDEgKSAqIGsgKyBiICkgKyAxO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBib3VuY2U6IHtcbiAgICAgICAgICAgICAgICBzdHlsZTogJycsXG4gICAgICAgICAgICAgICAgZm46IGZ1bmN0aW9uIChrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICggKCBrIC89IDEgKSA8ICggMSAvIDIuNzUgKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA3LjU2MjUgKiBrICogaztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICggayA8ICggMiAvIDIuNzUgKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA3LjU2MjUgKiAoIGsgLT0gKCAxLjUgLyAyLjc1ICkgKSAqIGsgKyAwLjc1O1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBrIDwgKCAyLjUgLyAyLjc1ICkgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gNy41NjI1ICogKCBrIC09ICggMi4yNSAvIDIuNzUgKSApICogayArIDAuOTM3NTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA3LjU2MjUgKiAoIGsgLT0gKCAyLjYyNSAvIDIuNzUgKSApICogayArIDAuOTg0Mzc1O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVsYXN0aWM6IHtcbiAgICAgICAgICAgICAgICBzdHlsZTogJycsXG4gICAgICAgICAgICAgICAgZm46IGZ1bmN0aW9uIChrKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmID0gMC4yMixcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSAwLjQ7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCBrID09PSAwICkgeyByZXR1cm4gMDsgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoIGsgPT0gMSApIHsgcmV0dXJuIDE7IH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCBlICogTWF0aC5wb3coIDIsIC0gMTAgKiBrICkgKiBNYXRoLnNpbiggKCBrIC0gZiAvIDQgKSAqICggMiAqIE1hdGguUEkgKSAvIGYgKSArIDEgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG1lLnRhcCA9IGZ1bmN0aW9uIChlLCBldmVudE5hbWUpIHtcbiAgICAgICAgICAgIHZhciBldiA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgICAgICAgICAgZXYuaW5pdEV2ZW50KGV2ZW50TmFtZSwgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICBldi5wYWdlWCA9IGUucGFnZVg7XG4gICAgICAgICAgICBldi5wYWdlWSA9IGUucGFnZVk7XG4gICAgICAgICAgICBlLnRhcmdldC5kaXNwYXRjaEV2ZW50KGV2KTtcbiAgICAgICAgfTtcblxuICAgICAgICBtZS5jbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gZS50YXJnZXQsXG4gICAgICAgICAgICAgICAgZXY7XG5cbiAgICAgICAgICAgIGlmICggISgvKFNFTEVDVHxJTlBVVHxURVhUQVJFQSkvaSkudGVzdCh0YXJnZXQudGFnTmFtZSkgKSB7XG4gICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL01vdXNlRXZlbnQvaW5pdE1vdXNlRXZlbnRcbiAgICAgICAgICAgICAgICAvLyBpbml0TW91c2VFdmVudCBpcyBkZXByZWNhdGVkLlxuICAgICAgICAgICAgICAgIGV2ID0gbmV3IE1vdXNlRXZlbnQoJ2NsaWNrJywge1xuICAgICAgICAgICAgICAgICAgICB2aWV3OiBlLnZpZXcgfHwgd2luZG93LFxuICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IDEsXG4gICAgICAgICAgICAgICAgICAgIHNjcmVlblg6IHRhcmdldC5zY3JlZW5YIHx8IDAsXG4gICAgICAgICAgICAgICAgICAgIHNjcmVlblk6IHRhcmdldC5zY3JlZW5ZIHx8IDAsXG4gICAgICAgICAgICAgICAgICAgIGNsaWVudFg6IHRhcmdldC5jbGllbnRYIHx8IDAsXG4gICAgICAgICAgICAgICAgICAgIGNsaWVudFk6IHRhcmdldC5jbGllbnRZIHx8IDAsXG4gICAgICAgICAgICAgICAgICAgIGN0cmxLZXk6ICEhZS5jdHJsS2V5LFxuICAgICAgICAgICAgICAgICAgICBhbHRLZXk6ICEhZS5hbHRLZXksXG4gICAgICAgICAgICAgICAgICAgIHNoaWZ0S2V5OiAhIWUuc2hpZnRLZXksXG4gICAgICAgICAgICAgICAgICAgIG1ldGFLZXk6ICEhZS5tZXRhS2V5LFxuICAgICAgICAgICAgICAgICAgICBidXR0b246IDAsXG4gICAgICAgICAgICAgICAgICAgIHJlbGF0ZWRUYXJnZXQ6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIF9jb25zdHJ1Y3RlZDogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGFyZ2V0LmRpc3BhdGNoRXZlbnQoZXYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBtZTtcbiAgICB9KSgpO1xuICAgIHdpbmRvdy5JU2Nyb2xsID0gZnVuY3Rpb24gKGVsLCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMud3JhcHBlciA9IHR5cGVvZiBlbCA9PSAnc3RyaW5nJyA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpIDogZWw7XG4gICAgICAgIHRoaXMuc2Nyb2xsZXIgPSB0aGlzLndyYXBwZXIuY2hpbGRyZW5bMF07XG4gICAgICAgIHRoaXMuc2Nyb2xsZXJTdHlsZSA9IHRoaXMuc2Nyb2xsZXIuc3R5bGU7ICAgICAgIC8vIGNhY2hlIHN0eWxlIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2VcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XG5cbiAgICAgICAgICAgIHJlc2l6ZVNjcm9sbGJhcnM6IHRydWUsXG5cbiAgICAgICAgICAgIG1vdXNlV2hlZWxTcGVlZDogMjAsXG5cbiAgICAgICAgICAgIHNuYXBUaHJlc2hvbGQ6IDAuMzM0LFxuXG4gICAgLy8gSU5TRVJUIFBPSU5UOiBPUFRJT05TXG4gICAgICAgICAgICBkaXNhYmxlUG9pbnRlciA6ICF1dGlscy5oYXNQb2ludGVyLFxuICAgICAgICAgICAgZGlzYWJsZVRvdWNoIDogdXRpbHMuaGFzUG9pbnRlciB8fCAhdXRpbHMuaGFzVG91Y2gsXG4gICAgICAgICAgICBkaXNhYmxlTW91c2UgOiB1dGlscy5oYXNQb2ludGVyIHx8IHV0aWxzLmhhc1RvdWNoLFxuICAgICAgICAgICAgc3RhcnRYOiAwLFxuICAgICAgICAgICAgc3RhcnRZOiAwLFxuICAgICAgICAgICAgc2Nyb2xsWTogdHJ1ZSxcbiAgICAgICAgICAgIGRpcmVjdGlvbkxvY2tUaHJlc2hvbGQ6IDUsXG4gICAgICAgICAgICBtb21lbnR1bTogdHJ1ZSxcblxuICAgICAgICAgICAgYm91bmNlOiB0cnVlLFxuICAgICAgICAgICAgYm91bmNlVGltZTogNjAwLFxuICAgICAgICAgICAgYm91bmNlRWFzaW5nOiAnJyxcblxuICAgICAgICAgICAgcHJldmVudERlZmF1bHQ6IHRydWUsXG4gICAgICAgICAgICBwcmV2ZW50RGVmYXVsdEV4Y2VwdGlvbjogeyB0YWdOYW1lOiAvXihJTlBVVHxURVhUQVJFQXxCVVRUT058U0VMRUNUfExBQkVMfEEpJC8gfSxcblxuICAgICAgICAgICAgSFdDb21wb3NpdGluZzogdHJ1ZSxcbiAgICAgICAgICAgIHVzZVRyYW5zaXRpb246IHRydWUsXG4gICAgICAgICAgICB1c2VUcmFuc2Zvcm06IHRydWUsXG4gICAgICAgICAgICBiaW5kVG9XcmFwcGVyOiB0eXBlb2Ygd2luZG93Lm9ubW91c2Vkb3duID09PSBcInVuZGVmaW5lZFwiXG4gICAgICAgIH07XG5cbiAgICAgICAgZm9yICggdmFyIGkgaW4gb3B0aW9ucyApIHtcbiAgICAgICAgICAgIHRoaXMub3B0aW9uc1tpXSA9IG9wdGlvbnNbaV07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBOb3JtYWxpemUgb3B0aW9uc1xuICAgICAgICB0aGlzLnRyYW5zbGF0ZVogPSB0aGlzLm9wdGlvbnMuSFdDb21wb3NpdGluZyAmJiB1dGlscy5oYXNQZXJzcGVjdGl2ZSA/ICcgdHJhbnNsYXRlWigwKScgOiAnJztcblxuICAgICAgICB0aGlzLm9wdGlvbnMudXNlVHJhbnNpdGlvbiA9IHV0aWxzLmhhc1RyYW5zaXRpb24gJiYgdGhpcy5vcHRpb25zLnVzZVRyYW5zaXRpb247XG4gICAgICAgIHRoaXMub3B0aW9ucy51c2VUcmFuc2Zvcm0gPSB1dGlscy5oYXNUcmFuc2Zvcm0gJiYgdGhpcy5vcHRpb25zLnVzZVRyYW5zZm9ybTtcblxuICAgICAgICB0aGlzLm9wdGlvbnMuZXZlbnRQYXNzdGhyb3VnaCA9IHRoaXMub3B0aW9ucy5ldmVudFBhc3N0aHJvdWdoID09PSB0cnVlID8gJ3ZlcnRpY2FsJyA6IHRoaXMub3B0aW9ucy5ldmVudFBhc3N0aHJvdWdoO1xuICAgICAgICB0aGlzLm9wdGlvbnMucHJldmVudERlZmF1bHQgPSAhdGhpcy5vcHRpb25zLmV2ZW50UGFzc3Rocm91Z2ggJiYgdGhpcy5vcHRpb25zLnByZXZlbnREZWZhdWx0O1xuXG4gICAgICAgIC8vIElmIHlvdSB3YW50IGV2ZW50UGFzc3Rocm91Z2ggSSBoYXZlIHRvIGxvY2sgb25lIG9mIHRoZSBheGVzXG4gICAgICAgIHRoaXMub3B0aW9ucy5zY3JvbGxZID0gdGhpcy5vcHRpb25zLmV2ZW50UGFzc3Rocm91Z2ggPT0gJ3ZlcnRpY2FsJyA/IGZhbHNlIDogdGhpcy5vcHRpb25zLnNjcm9sbFk7XG4gICAgICAgIHRoaXMub3B0aW9ucy5zY3JvbGxYID0gdGhpcy5vcHRpb25zLmV2ZW50UGFzc3Rocm91Z2ggPT0gJ2hvcml6b250YWwnID8gZmFsc2UgOiB0aGlzLm9wdGlvbnMuc2Nyb2xsWDtcblxuICAgICAgICAvLyBXaXRoIGV2ZW50UGFzc3Rocm91Z2ggd2UgYWxzbyBuZWVkIGxvY2tEaXJlY3Rpb24gbWVjaGFuaXNtXG4gICAgICAgIHRoaXMub3B0aW9ucy5mcmVlU2Nyb2xsID0gdGhpcy5vcHRpb25zLmZyZWVTY3JvbGwgJiYgIXRoaXMub3B0aW9ucy5ldmVudFBhc3N0aHJvdWdoO1xuICAgICAgICB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uTG9ja1RocmVzaG9sZCA9IHRoaXMub3B0aW9ucy5ldmVudFBhc3N0aHJvdWdoID8gMCA6IHRoaXMub3B0aW9ucy5kaXJlY3Rpb25Mb2NrVGhyZXNob2xkO1xuXG4gICAgICAgIHRoaXMub3B0aW9ucy5ib3VuY2VFYXNpbmcgPSB0eXBlb2YgdGhpcy5vcHRpb25zLmJvdW5jZUVhc2luZyA9PSAnc3RyaW5nJyA/IHV0aWxzLmVhc2VbdGhpcy5vcHRpb25zLmJvdW5jZUVhc2luZ10gfHwgdXRpbHMuZWFzZS5jaXJjdWxhciA6IHRoaXMub3B0aW9ucy5ib3VuY2VFYXNpbmc7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zLnJlc2l6ZVBvbGxpbmcgPSB0aGlzLm9wdGlvbnMucmVzaXplUG9sbGluZyA9PT0gdW5kZWZpbmVkID8gNjAgOiB0aGlzLm9wdGlvbnMucmVzaXplUG9sbGluZztcblxuICAgICAgICBpZiAoIHRoaXMub3B0aW9ucy50YXAgPT09IHRydWUgKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMudGFwID0gJ3RhcCc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vY3ViaXEvaXNjcm9sbC9pc3N1ZXMvMTAyOVxuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy51c2VUcmFuc2l0aW9uICYmICF0aGlzLm9wdGlvbnMudXNlVHJhbnNmb3JtKSB7XG4gICAgICAgICAgICBpZighKC9yZWxhdGl2ZXxhYnNvbHV0ZS9pKS50ZXN0KHRoaXMuc2Nyb2xsZXJTdHlsZS5wb3NpdGlvbikpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbGVyU3R5bGUucG9zaXRpb24gPSBcInJlbGF0aXZlXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHRoaXMub3B0aW9ucy5zaHJpbmtTY3JvbGxiYXJzID09ICdzY2FsZScgKSB7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMudXNlVHJhbnNpdGlvbiA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vcHRpb25zLmludmVydFdoZWVsRGlyZWN0aW9uID0gdGhpcy5vcHRpb25zLmludmVydFdoZWVsRGlyZWN0aW9uID8gLTEgOiAxO1xuXG4gICAgLy8gSU5TRVJUIFBPSU5UOiBOT1JNQUxJWkFUSU9OXG5cbiAgICAgICAgLy8gU29tZSBkZWZhdWx0c1xuICAgICAgICB0aGlzLnggPSAwO1xuICAgICAgICB0aGlzLnkgPSAwO1xuICAgICAgICB0aGlzLmRpcmVjdGlvblggPSAwO1xuICAgICAgICB0aGlzLmRpcmVjdGlvblkgPSAwO1xuICAgICAgICB0aGlzLl9ldmVudHMgPSB7fTtcblxuICAgIC8vIElOU0VSVCBQT0lOVDogREVGQVVMVFNcblxuICAgICAgICB0aGlzLl9pbml0KCk7XG4gICAgICAgIHRoaXMucmVmcmVzaCgpO1xuXG4gICAgICAgIHRoaXMuc2Nyb2xsVG8odGhpcy5vcHRpb25zLnN0YXJ0WCwgdGhpcy5vcHRpb25zLnN0YXJ0WSk7XG4gICAgICAgIHRoaXMuZW5hYmxlKCk7XG4gICAgfVxuXG4gICAgSVNjcm9sbC5wcm90b3R5cGUgPSB7XG4gICAgICAgIHZlcnNpb246ICc1LjIuMCcsXG5cbiAgICAgICAgX2luaXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuX2luaXRFdmVudHMoKTtcblxuICAgICAgICAgICAgaWYgKCB0aGlzLm9wdGlvbnMuc2Nyb2xsYmFycyB8fCB0aGlzLm9wdGlvbnMuaW5kaWNhdG9ycyApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9pbml0SW5kaWNhdG9ycygpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIHRoaXMub3B0aW9ucy5tb3VzZVdoZWVsICkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luaXRXaGVlbCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIHRoaXMub3B0aW9ucy5zbmFwICkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luaXRTbmFwKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggdGhpcy5vcHRpb25zLmtleUJpbmRpbmdzICkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2luaXRLZXlzKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAvLyBJTlNFUlQgUE9JTlQ6IF9pbml0XG5cbiAgICAgICAgfSxcblxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLl9pbml0RXZlbnRzKHRydWUpO1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucmVzaXplVGltZW91dCk7XG4gICAgICAgICAgICB0aGlzLnJlc2l6ZVRpbWVvdXQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5fZXhlY0V2ZW50KCdkZXN0cm95Jyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX3RyYW5zaXRpb25FbmQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoIGUudGFyZ2V0ICE9IHRoaXMuc2Nyb2xsZXIgfHwgIXRoaXMuaXNJblRyYW5zaXRpb24gKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl90cmFuc2l0aW9uVGltZSgpO1xuICAgICAgICAgICAgaWYgKCAhdGhpcy5yZXNldFBvc2l0aW9uKHRoaXMub3B0aW9ucy5ib3VuY2VUaW1lKSApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzSW5UcmFuc2l0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXhlY0V2ZW50KCdzY3JvbGxFbmQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBfc3RhcnQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICAvLyBSZWFjdCB0byBsZWZ0IG1vdXNlIGJ1dHRvbiBvbmx5XG4gICAgICAgICAgICBpZiAoIHV0aWxzLmV2ZW50VHlwZVtlLnR5cGVdICE9IDEgKSB7XG4gICAgICAgICAgICAgIC8vIGZvciBidXR0b24gcHJvcGVydHlcbiAgICAgICAgICAgICAgLy8gaHR0cDovL3VuaXhwYXBhLmNvbS9qcy9tb3VzZS5odG1sXG4gICAgICAgICAgICAgIHZhciBidXR0b247XG4gICAgICAgICAgICBpZiAoIWUud2hpY2gpIHtcbiAgICAgICAgICAgICAgLyogSUUgY2FzZSAqL1xuICAgICAgICAgICAgICBidXR0b24gPSAoZS5idXR0b24gPCAyKSA/IDAgOlxuICAgICAgICAgICAgICAgICAgICAgICAoKGUuYnV0dG9uID09IDQpID8gMSA6IDIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgLyogQWxsIG90aGVycyAqL1xuICAgICAgICAgICAgICBidXR0b24gPSBlLmJ1dHRvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIGJ1dHRvbiAhPT0gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCAhdGhpcy5lbmFibGVkIHx8ICh0aGlzLmluaXRpYXRlZCAmJiB1dGlscy5ldmVudFR5cGVbZS50eXBlXSAhPT0gdGhpcy5pbml0aWF0ZWQpICkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCB0aGlzLm9wdGlvbnMucHJldmVudERlZmF1bHQgJiYgIXV0aWxzLmlzQmFkQW5kcm9pZCAmJiAhdXRpbHMucHJldmVudERlZmF1bHRFeGNlcHRpb24oZS50YXJnZXQsIHRoaXMub3B0aW9ucy5wcmV2ZW50RGVmYXVsdEV4Y2VwdGlvbikgKSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgcG9pbnQgPSBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0gOiBlLFxuICAgICAgICAgICAgICAgIHBvcztcblxuICAgICAgICAgICAgdGhpcy5pbml0aWF0ZWQgID0gdXRpbHMuZXZlbnRUeXBlW2UudHlwZV07XG4gICAgICAgICAgICB0aGlzLm1vdmVkICAgICAgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZGlzdFggICAgICA9IDA7XG4gICAgICAgICAgICB0aGlzLmRpc3RZICAgICAgPSAwO1xuICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb25YID0gMDtcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uWSA9IDA7XG4gICAgICAgICAgICB0aGlzLmRpcmVjdGlvbkxvY2tlZCA9IDA7XG5cbiAgICAgICAgICAgIHRoaXMuc3RhcnRUaW1lID0gdXRpbHMuZ2V0VGltZSgpO1xuXG4gICAgICAgICAgICBpZiAoIHRoaXMub3B0aW9ucy51c2VUcmFuc2l0aW9uICYmIHRoaXMuaXNJblRyYW5zaXRpb24gKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvblRpbWUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzSW5UcmFuc2l0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcG9zID0gdGhpcy5nZXRDb21wdXRlZFBvc2l0aW9uKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNsYXRlKE1hdGgucm91bmQocG9zLngpLCBNYXRoLnJvdW5kKHBvcy55KSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXhlY0V2ZW50KCdzY3JvbGxFbmQnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoICF0aGlzLm9wdGlvbnMudXNlVHJhbnNpdGlvbiAmJiB0aGlzLmlzQW5pbWF0aW5nICkge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNBbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0aGlzLl9leGVjRXZlbnQoJ3Njcm9sbEVuZCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnN0YXJ0WCAgICA9IHRoaXMueDtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRZICAgID0gdGhpcy55O1xuICAgICAgICAgICAgdGhpcy5hYnNTdGFydFggPSB0aGlzLng7XG4gICAgICAgICAgICB0aGlzLmFic1N0YXJ0WSA9IHRoaXMueTtcbiAgICAgICAgICAgIHRoaXMucG9pbnRYICAgID0gcG9pbnQucGFnZVg7XG4gICAgICAgICAgICB0aGlzLnBvaW50WSAgICA9IHBvaW50LnBhZ2VZO1xuXG4gICAgICAgICAgICB0aGlzLl9leGVjRXZlbnQoJ2JlZm9yZVNjcm9sbFN0YXJ0Jyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX21vdmU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoICF0aGlzLmVuYWJsZWQgfHwgdXRpbHMuZXZlbnRUeXBlW2UudHlwZV0gIT09IHRoaXMuaW5pdGlhdGVkICkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCB0aGlzLm9wdGlvbnMucHJldmVudERlZmF1bHQgKSB7ICAgIC8vIGluY3JlYXNlcyBwZXJmb3JtYW5jZSBvbiBBbmRyb2lkPyBUT0RPOiBjaGVjayFcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBwb2ludCAgICAgICA9IGUudG91Y2hlcyA/IGUudG91Y2hlc1swXSA6IGUsXG4gICAgICAgICAgICAgICAgZGVsdGFYICAgICAgPSBwb2ludC5wYWdlWCAtIHRoaXMucG9pbnRYLFxuICAgICAgICAgICAgICAgIGRlbHRhWSAgICAgID0gcG9pbnQucGFnZVkgLSB0aGlzLnBvaW50WSxcbiAgICAgICAgICAgICAgICB0aW1lc3RhbXAgICA9IHV0aWxzLmdldFRpbWUoKSxcbiAgICAgICAgICAgICAgICBuZXdYLCBuZXdZLFxuICAgICAgICAgICAgICAgIGFic0Rpc3RYLCBhYnNEaXN0WTtcblxuICAgICAgICAgICAgdGhpcy5wb2ludFggICAgID0gcG9pbnQucGFnZVg7XG4gICAgICAgICAgICB0aGlzLnBvaW50WSAgICAgPSBwb2ludC5wYWdlWTtcblxuICAgICAgICAgICAgdGhpcy5kaXN0WCAgICAgICs9IGRlbHRhWDtcbiAgICAgICAgICAgIHRoaXMuZGlzdFkgICAgICArPSBkZWx0YVk7XG4gICAgICAgICAgICBhYnNEaXN0WCAgICAgICAgPSBNYXRoLmFicyh0aGlzLmRpc3RYKTtcbiAgICAgICAgICAgIGFic0Rpc3RZICAgICAgICA9IE1hdGguYWJzKHRoaXMuZGlzdFkpO1xuXG4gICAgICAgICAgICAvLyBXZSBuZWVkIHRvIG1vdmUgYXQgbGVhc3QgMTAgcGl4ZWxzIGZvciB0aGUgc2Nyb2xsaW5nIHRvIGluaXRpYXRlXG4gICAgICAgICAgICBpZiAoIHRpbWVzdGFtcCAtIHRoaXMuZW5kVGltZSA+IDMwMCAmJiAoYWJzRGlzdFggPCAxMCAmJiBhYnNEaXN0WSA8IDEwKSApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHlvdSBhcmUgc2Nyb2xsaW5nIGluIG9uZSBkaXJlY3Rpb24gbG9jayB0aGUgb3RoZXJcbiAgICAgICAgICAgIGlmICggIXRoaXMuZGlyZWN0aW9uTG9ja2VkICYmICF0aGlzLm9wdGlvbnMuZnJlZVNjcm9sbCApIHtcbiAgICAgICAgICAgICAgICBpZiAoIGFic0Rpc3RYID4gYWJzRGlzdFkgKyB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uTG9ja1RocmVzaG9sZCApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb25Mb2NrZWQgPSAnaCc7ICAgICAvLyBsb2NrIGhvcml6b250YWxseVxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGFic0Rpc3RZID49IGFic0Rpc3RYICsgdGhpcy5vcHRpb25zLmRpcmVjdGlvbkxvY2tUaHJlc2hvbGQgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uTG9ja2VkID0gJ3YnOyAgICAgLy8gbG9jayB2ZXJ0aWNhbGx5XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb25Mb2NrZWQgPSAnbic7ICAgICAvLyBubyBsb2NrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIHRoaXMuZGlyZWN0aW9uTG9ja2VkID09ICdoJyApIHtcbiAgICAgICAgICAgICAgICBpZiAoIHRoaXMub3B0aW9ucy5ldmVudFBhc3N0aHJvdWdoID09ICd2ZXJ0aWNhbCcgKSB7XG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCB0aGlzLm9wdGlvbnMuZXZlbnRQYXNzdGhyb3VnaCA9PSAnaG9yaXpvbnRhbCcgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdGlhdGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBkZWx0YVkgPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmICggdGhpcy5kaXJlY3Rpb25Mb2NrZWQgPT0gJ3YnICkge1xuICAgICAgICAgICAgICAgIGlmICggdGhpcy5vcHRpb25zLmV2ZW50UGFzc3Rocm91Z2ggPT0gJ2hvcml6b250YWwnICkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggdGhpcy5vcHRpb25zLmV2ZW50UGFzc3Rocm91Z2ggPT0gJ3ZlcnRpY2FsJyApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbml0aWF0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGRlbHRhWCA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlbHRhWCA9IHRoaXMuaGFzSG9yaXpvbnRhbFNjcm9sbCA/IGRlbHRhWCA6IDA7XG4gICAgICAgICAgICBkZWx0YVkgPSB0aGlzLmhhc1ZlcnRpY2FsU2Nyb2xsID8gZGVsdGFZIDogMDtcblxuICAgICAgICAgICAgbmV3WCA9IHRoaXMueCArIGRlbHRhWDtcbiAgICAgICAgICAgIG5ld1kgPSB0aGlzLnkgKyBkZWx0YVk7XG5cbiAgICAgICAgICAgIC8vIFNsb3cgZG93biBpZiBvdXRzaWRlIG9mIHRoZSBib3VuZGFyaWVzXG4gICAgICAgICAgICBpZiAoIG5ld1ggPiAwIHx8IG5ld1ggPCB0aGlzLm1heFNjcm9sbFggKSB7XG4gICAgICAgICAgICAgICAgbmV3WCA9IHRoaXMub3B0aW9ucy5ib3VuY2UgPyB0aGlzLnggKyBkZWx0YVggLyAzIDogbmV3WCA+IDAgPyAwIDogdGhpcy5tYXhTY3JvbGxYO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCBuZXdZID4gMCB8fCBuZXdZIDwgdGhpcy5tYXhTY3JvbGxZICkge1xuICAgICAgICAgICAgICAgIG5ld1kgPSB0aGlzLm9wdGlvbnMuYm91bmNlID8gdGhpcy55ICsgZGVsdGFZIC8gMyA6IG5ld1kgPiAwID8gMCA6IHRoaXMubWF4U2Nyb2xsWTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb25YID0gZGVsdGFYID4gMCA/IC0xIDogZGVsdGFYIDwgMCA/IDEgOiAwO1xuICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb25ZID0gZGVsdGFZID4gMCA/IC0xIDogZGVsdGFZIDwgMCA/IDEgOiAwO1xuXG4gICAgICAgICAgICBpZiAoICF0aGlzLm1vdmVkICkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V4ZWNFdmVudCgnc2Nyb2xsU3RhcnQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5tb3ZlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIHRoaXMuX3RyYW5zbGF0ZShuZXdYLCBuZXdZKTtcblxuICAgIC8qIFJFUExBQ0UgU1RBUlQ6IF9tb3ZlICovXG5cbiAgICAgICAgICAgIGlmICggdGltZXN0YW1wIC0gdGhpcy5zdGFydFRpbWUgPiAzMDAgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydFRpbWUgPSB0aW1lc3RhbXA7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydFggPSB0aGlzLng7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydFkgPSB0aGlzLnk7XG4gICAgICAgICAgICB9XG5cbiAgICAvKiBSRVBMQUNFIEVORDogX21vdmUgKi9cblxuICAgICAgICB9LFxuXG4gICAgICAgIF9lbmQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoICF0aGlzLmVuYWJsZWQgfHwgdXRpbHMuZXZlbnRUeXBlW2UudHlwZV0gIT09IHRoaXMuaW5pdGlhdGVkICkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCB0aGlzLm9wdGlvbnMucHJldmVudERlZmF1bHQgJiYgIXV0aWxzLnByZXZlbnREZWZhdWx0RXhjZXB0aW9uKGUudGFyZ2V0LCB0aGlzLm9wdGlvbnMucHJldmVudERlZmF1bHRFeGNlcHRpb24pICkge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHBvaW50ID0gZS5jaGFuZ2VkVG91Y2hlcyA/IGUuY2hhbmdlZFRvdWNoZXNbMF0gOiBlLFxuICAgICAgICAgICAgICAgIG1vbWVudHVtWCxcbiAgICAgICAgICAgICAgICBtb21lbnR1bVksXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gPSB1dGlscy5nZXRUaW1lKCkgLSB0aGlzLnN0YXJ0VGltZSxcbiAgICAgICAgICAgICAgICBuZXdYID0gTWF0aC5yb3VuZCh0aGlzLngpLFxuICAgICAgICAgICAgICAgIG5ld1kgPSBNYXRoLnJvdW5kKHRoaXMueSksXG4gICAgICAgICAgICAgICAgZGlzdGFuY2VYID0gTWF0aC5hYnMobmV3WCAtIHRoaXMuc3RhcnRYKSxcbiAgICAgICAgICAgICAgICBkaXN0YW5jZVkgPSBNYXRoLmFicyhuZXdZIC0gdGhpcy5zdGFydFkpLFxuICAgICAgICAgICAgICAgIHRpbWUgPSAwLFxuICAgICAgICAgICAgICAgIGVhc2luZyA9ICcnO1xuXG4gICAgICAgICAgICB0aGlzLmlzSW5UcmFuc2l0aW9uID0gMDtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhdGVkID0gMDtcbiAgICAgICAgICAgIHRoaXMuZW5kVGltZSA9IHV0aWxzLmdldFRpbWUoKTtcblxuICAgICAgICAgICAgLy8gcmVzZXQgaWYgd2UgYXJlIG91dHNpZGUgb2YgdGhlIGJvdW5kYXJpZXNcbiAgICAgICAgICAgIGlmICggdGhpcy5yZXNldFBvc2l0aW9uKHRoaXMub3B0aW9ucy5ib3VuY2VUaW1lKSApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG8obmV3WCwgbmV3WSk7ICAvLyBlbnN1cmVzIHRoYXQgdGhlIGxhc3QgcG9zaXRpb24gaXMgcm91bmRlZFxuXG4gICAgICAgICAgICAvLyB3ZSBzY3JvbGxlZCBsZXNzIHRoYW4gMTAgcGl4ZWxzXG4gICAgICAgICAgICBpZiAoICF0aGlzLm1vdmVkICkge1xuICAgICAgICAgICAgICAgIGlmICggdGhpcy5vcHRpb25zLnRhcCApIHtcbiAgICAgICAgICAgICAgICAgICAgdXRpbHMudGFwKGUsIHRoaXMub3B0aW9ucy50YXApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICggdGhpcy5vcHRpb25zLmNsaWNrICkge1xuICAgICAgICAgICAgICAgICAgICB1dGlscy5jbGljayhlKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9leGVjRXZlbnQoJ3Njcm9sbENhbmNlbCcpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCB0aGlzLl9ldmVudHMuZmxpY2sgJiYgZHVyYXRpb24gPCAyMDAgJiYgZGlzdGFuY2VYIDwgMTAwICYmIGRpc3RhbmNlWSA8IDEwMCApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9leGVjRXZlbnQoJ2ZsaWNrJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBzdGFydCBtb21lbnR1bSBhbmltYXRpb24gaWYgbmVlZGVkXG4gICAgICAgICAgICBpZiAoIHRoaXMub3B0aW9ucy5tb21lbnR1bSAmJiBkdXJhdGlvbiA8IDMwMCApIHtcbiAgICAgICAgICAgICAgICBtb21lbnR1bVggPSB0aGlzLmhhc0hvcml6b250YWxTY3JvbGwgPyB1dGlscy5tb21lbnR1bSh0aGlzLngsIHRoaXMuc3RhcnRYLCBkdXJhdGlvbiwgdGhpcy5tYXhTY3JvbGxYLCB0aGlzLm9wdGlvbnMuYm91bmNlID8gdGhpcy53cmFwcGVyV2lkdGggOiAwLCB0aGlzLm9wdGlvbnMuZGVjZWxlcmF0aW9uKSA6IHsgZGVzdGluYXRpb246IG5ld1gsIGR1cmF0aW9uOiAwIH07XG4gICAgICAgICAgICAgICAgbW9tZW50dW1ZID0gdGhpcy5oYXNWZXJ0aWNhbFNjcm9sbCA/IHV0aWxzLm1vbWVudHVtKHRoaXMueSwgdGhpcy5zdGFydFksIGR1cmF0aW9uLCB0aGlzLm1heFNjcm9sbFksIHRoaXMub3B0aW9ucy5ib3VuY2UgPyB0aGlzLndyYXBwZXJIZWlnaHQgOiAwLCB0aGlzLm9wdGlvbnMuZGVjZWxlcmF0aW9uKSA6IHsgZGVzdGluYXRpb246IG5ld1ksIGR1cmF0aW9uOiAwIH07XG4gICAgICAgICAgICAgICAgbmV3WCA9IG1vbWVudHVtWC5kZXN0aW5hdGlvbjtcbiAgICAgICAgICAgICAgICBuZXdZID0gbW9tZW50dW1ZLmRlc3RpbmF0aW9uO1xuICAgICAgICAgICAgICAgIHRpbWUgPSBNYXRoLm1heChtb21lbnR1bVguZHVyYXRpb24sIG1vbWVudHVtWS5kdXJhdGlvbik7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0luVHJhbnNpdGlvbiA9IDE7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgaWYgKCB0aGlzLm9wdGlvbnMuc25hcCApIHtcbiAgICAgICAgICAgICAgICB2YXIgc25hcCA9IHRoaXMuX25lYXJlc3RTbmFwKG5ld1gsIG5ld1kpO1xuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSBzbmFwO1xuICAgICAgICAgICAgICAgIHRpbWUgPSB0aGlzLm9wdGlvbnMuc25hcFNwZWVkIHx8IE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5taW4oTWF0aC5hYnMobmV3WCAtIHNuYXAueCksIDEwMDApLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hdGgubWluKE1hdGguYWJzKG5ld1kgLSBzbmFwLnkpLCAxMDAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSwgMzAwKTtcbiAgICAgICAgICAgICAgICBuZXdYID0gc25hcC54O1xuICAgICAgICAgICAgICAgIG5ld1kgPSBzbmFwLnk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdGlvblggPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uWSA9IDA7XG4gICAgICAgICAgICAgICAgZWFzaW5nID0gdGhpcy5vcHRpb25zLmJvdW5jZUVhc2luZztcbiAgICAgICAgICAgIH1cblxuICAgIC8vIElOU0VSVCBQT0lOVDogX2VuZFxuXG4gICAgICAgICAgICBpZiAoIG5ld1ggIT0gdGhpcy54IHx8IG5ld1kgIT0gdGhpcy55ICkge1xuICAgICAgICAgICAgICAgIC8vIGNoYW5nZSBlYXNpbmcgZnVuY3Rpb24gd2hlbiBzY3JvbGxlciBnb2VzIG91dCBvZiB0aGUgYm91bmRhcmllc1xuICAgICAgICAgICAgICAgIGlmICggbmV3WCA+IDAgfHwgbmV3WCA8IHRoaXMubWF4U2Nyb2xsWCB8fCBuZXdZID4gMCB8fCBuZXdZIDwgdGhpcy5tYXhTY3JvbGxZICkge1xuICAgICAgICAgICAgICAgICAgICBlYXNpbmcgPSB1dGlscy5lYXNlLnF1YWRyYXRpYztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFRvKG5ld1gsIG5ld1ksIHRpbWUsIGVhc2luZyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9leGVjRXZlbnQoJ3Njcm9sbEVuZCcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9yZXNpemU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMucmVzaXplVGltZW91dCk7XG5cbiAgICAgICAgICAgIHRoaXMucmVzaXplVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoYXQucmVmcmVzaCgpO1xuICAgICAgICAgICAgfSwgdGhpcy5vcHRpb25zLnJlc2l6ZVBvbGxpbmcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlc2V0UG9zaXRpb246IGZ1bmN0aW9uICh0aW1lKSB7XG4gICAgICAgICAgICB2YXIgeCA9IHRoaXMueCxcbiAgICAgICAgICAgICAgICB5ID0gdGhpcy55O1xuXG4gICAgICAgICAgICB0aW1lID0gdGltZSB8fCAwO1xuXG4gICAgICAgICAgICBpZiAoICF0aGlzLmhhc0hvcml6b250YWxTY3JvbGwgfHwgdGhpcy54ID4gMCApIHtcbiAgICAgICAgICAgICAgICB4ID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIHRoaXMueCA8IHRoaXMubWF4U2Nyb2xsWCApIHtcbiAgICAgICAgICAgICAgICB4ID0gdGhpcy5tYXhTY3JvbGxYO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoICF0aGlzLmhhc1ZlcnRpY2FsU2Nyb2xsIHx8IHRoaXMueSA+IDAgKSB7XG4gICAgICAgICAgICAgICAgeSA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB0aGlzLnkgPCB0aGlzLm1heFNjcm9sbFkgKSB7XG4gICAgICAgICAgICAgICAgeSA9IHRoaXMubWF4U2Nyb2xsWTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCB4ID09IHRoaXMueCAmJiB5ID09IHRoaXMueSApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG8oeCwgeSwgdGltZSwgdGhpcy5vcHRpb25zLmJvdW5jZUVhc2luZyk7XG5cbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRpc2FibGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB9LFxuXG4gICAgICAgIGVuYWJsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgfSxcblxuICAgICAgICByZWZyZXNoOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgcmYgPSB0aGlzLndyYXBwZXIub2Zmc2V0SGVpZ2h0OyAgICAgLy8gRm9yY2UgcmVmbG93XG5cbiAgICAgICAgICAgIHRoaXMud3JhcHBlcldpZHRoICAgPSB0aGlzLndyYXBwZXIuY2xpZW50V2lkdGg7XG4gICAgICAgICAgICB0aGlzLndyYXBwZXJIZWlnaHQgID0gdGhpcy53cmFwcGVyLmNsaWVudEhlaWdodDtcblxuICAgIC8qIFJFUExBQ0UgU1RBUlQ6IHJlZnJlc2ggKi9cblxuICAgICAgICAgICAgdGhpcy5zY3JvbGxlcldpZHRoICA9IHRoaXMuc2Nyb2xsZXIub2Zmc2V0V2lkdGg7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbGVySGVpZ2h0ID0gdGhpcy5zY3JvbGxlci5vZmZzZXRIZWlnaHQ7XG5cbiAgICAgICAgICAgIHRoaXMubWF4U2Nyb2xsWCAgICAgPSB0aGlzLndyYXBwZXJXaWR0aCAtIHRoaXMuc2Nyb2xsZXJXaWR0aDtcbiAgICAgICAgICAgIHRoaXMubWF4U2Nyb2xsWSAgICAgPSB0aGlzLndyYXBwZXJIZWlnaHQgLSB0aGlzLnNjcm9sbGVySGVpZ2h0O1xuXG4gICAgLyogUkVQTEFDRSBFTkQ6IHJlZnJlc2ggKi9cblxuICAgICAgICAgICAgdGhpcy5oYXNIb3Jpem9udGFsU2Nyb2xsICAgID0gdGhpcy5vcHRpb25zLnNjcm9sbFggJiYgdGhpcy5tYXhTY3JvbGxYIDwgMDtcbiAgICAgICAgICAgIHRoaXMuaGFzVmVydGljYWxTY3JvbGwgICAgICA9IHRoaXMub3B0aW9ucy5zY3JvbGxZICYmIHRoaXMubWF4U2Nyb2xsWSA8IDA7XG5cbiAgICAgICAgICAgIGlmICggIXRoaXMuaGFzSG9yaXpvbnRhbFNjcm9sbCApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1heFNjcm9sbFggPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsZXJXaWR0aCA9IHRoaXMud3JhcHBlcldpZHRoO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoICF0aGlzLmhhc1ZlcnRpY2FsU2Nyb2xsICkge1xuICAgICAgICAgICAgICAgIHRoaXMubWF4U2Nyb2xsWSA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxlckhlaWdodCA9IHRoaXMud3JhcHBlckhlaWdodDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5lbmRUaW1lID0gMDtcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uWCA9IDA7XG4gICAgICAgICAgICB0aGlzLmRpcmVjdGlvblkgPSAwO1xuXG4gICAgICAgICAgICB0aGlzLndyYXBwZXJPZmZzZXQgPSB1dGlscy5vZmZzZXQodGhpcy53cmFwcGVyKTtcblxuICAgICAgICAgICAgdGhpcy5fZXhlY0V2ZW50KCdyZWZyZXNoJyk7XG5cbiAgICAgICAgICAgIHRoaXMucmVzZXRQb3NpdGlvbigpO1xuXG4gICAgLy8gSU5TRVJUIFBPSU5UOiBfcmVmcmVzaFxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgb246IGZ1bmN0aW9uICh0eXBlLCBmbikge1xuICAgICAgICAgICAgaWYgKCAhdGhpcy5fZXZlbnRzW3R5cGVdICkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXSA9IFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9ldmVudHNbdHlwZV0ucHVzaChmbik7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb2ZmOiBmdW5jdGlvbiAodHlwZSwgZm4pIHtcbiAgICAgICAgICAgIGlmICggIXRoaXMuX2V2ZW50c1t0eXBlXSApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBpbmRleCA9IHRoaXMuX2V2ZW50c1t0eXBlXS5pbmRleE9mKGZuKTtcblxuICAgICAgICAgICAgaWYgKCBpbmRleCA+IC0xICkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2V2ZW50c1t0eXBlXS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIF9leGVjRXZlbnQ6IGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgICAgICBpZiAoICF0aGlzLl9ldmVudHNbdHlwZV0gKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgaSA9IDAsXG4gICAgICAgICAgICAgICAgbCA9IHRoaXMuX2V2ZW50c1t0eXBlXS5sZW5ndGg7XG5cbiAgICAgICAgICAgIGlmICggIWwgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXZlbnRzW3R5cGVdW2ldLmFwcGx5KHRoaXMsIFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2Nyb2xsQnk6IGZ1bmN0aW9uICh4LCB5LCB0aW1lLCBlYXNpbmcpIHtcbiAgICAgICAgICAgIHggPSB0aGlzLnggKyB4O1xuICAgICAgICAgICAgeSA9IHRoaXMueSArIHk7XG4gICAgICAgICAgICB0aW1lID0gdGltZSB8fCAwO1xuXG4gICAgICAgICAgICB0aGlzLnNjcm9sbFRvKHgsIHksIHRpbWUsIGVhc2luZyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2Nyb2xsVG86IGZ1bmN0aW9uICh4LCB5LCB0aW1lLCBlYXNpbmcpIHtcbiAgICAgICAgICAgIGVhc2luZyA9IGVhc2luZyB8fCB1dGlscy5lYXNlLmNpcmN1bGFyO1xuXG4gICAgICAgICAgICB0aGlzLmlzSW5UcmFuc2l0aW9uID0gdGhpcy5vcHRpb25zLnVzZVRyYW5zaXRpb24gJiYgdGltZSA+IDA7XG4gICAgICAgICAgICB2YXIgdHJhbnNpdGlvblR5cGUgPSB0aGlzLm9wdGlvbnMudXNlVHJhbnNpdGlvbiAmJiBlYXNpbmcuc3R5bGU7XG4gICAgICAgICAgICBpZiAoICF0aW1lIHx8IHRyYW5zaXRpb25UeXBlICkge1xuICAgICAgICAgICAgICAgICAgICBpZih0cmFuc2l0aW9uVHlwZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uKGVhc2luZy5zdHlsZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2l0aW9uVGltZSh0aW1lKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zbGF0ZSh4LCB5KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYW5pbWF0ZSh4LCB5LCB0aW1lLCBlYXNpbmcuZm4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIHNjcm9sbFRvRWxlbWVudDogZnVuY3Rpb24gKGVsLCB0aW1lLCBvZmZzZXRYLCBvZmZzZXRZLCBlYXNpbmcpIHtcbiAgICAgICAgICAgIGVsID0gZWwubm9kZVR5cGUgPyBlbCA6IHRoaXMuc2Nyb2xsZXIucXVlcnlTZWxlY3RvcihlbCk7XG5cbiAgICAgICAgICAgIGlmICggIWVsICkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHBvcyA9IHV0aWxzLm9mZnNldChlbCk7XG5cbiAgICAgICAgICAgIHBvcy5sZWZ0IC09IHRoaXMud3JhcHBlck9mZnNldC5sZWZ0O1xuICAgICAgICAgICAgcG9zLnRvcCAgLT0gdGhpcy53cmFwcGVyT2Zmc2V0LnRvcDtcblxuICAgICAgICAgICAgLy8gaWYgb2Zmc2V0WC9ZIGFyZSB0cnVlIHdlIGNlbnRlciB0aGUgZWxlbWVudCB0byB0aGUgc2NyZWVuXG4gICAgICAgICAgICBpZiAoIG9mZnNldFggPT09IHRydWUgKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0WCA9IE1hdGgucm91bmQoZWwub2Zmc2V0V2lkdGggLyAyIC0gdGhpcy53cmFwcGVyLm9mZnNldFdpZHRoIC8gMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIG9mZnNldFkgPT09IHRydWUgKSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0WSA9IE1hdGgucm91bmQoZWwub2Zmc2V0SGVpZ2h0IC8gMiAtIHRoaXMud3JhcHBlci5vZmZzZXRIZWlnaHQgLyAyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcG9zLmxlZnQgLT0gb2Zmc2V0WCB8fCAwO1xuICAgICAgICAgICAgcG9zLnRvcCAgLT0gb2Zmc2V0WSB8fCAwO1xuXG4gICAgICAgICAgICBwb3MubGVmdCA9IHBvcy5sZWZ0ID4gMCA/IDAgOiBwb3MubGVmdCA8IHRoaXMubWF4U2Nyb2xsWCA/IHRoaXMubWF4U2Nyb2xsWCA6IHBvcy5sZWZ0O1xuICAgICAgICAgICAgcG9zLnRvcCAgPSBwb3MudG9wICA+IDAgPyAwIDogcG9zLnRvcCAgPCB0aGlzLm1heFNjcm9sbFkgPyB0aGlzLm1heFNjcm9sbFkgOiBwb3MudG9wO1xuXG4gICAgICAgICAgICB0aW1lID0gdGltZSA9PT0gdW5kZWZpbmVkIHx8IHRpbWUgPT09IG51bGwgfHwgdGltZSA9PT0gJ2F1dG8nID8gTWF0aC5tYXgoTWF0aC5hYnModGhpcy54LXBvcy5sZWZ0KSwgTWF0aC5hYnModGhpcy55LXBvcy50b3ApKSA6IHRpbWU7XG5cbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG8ocG9zLmxlZnQsIHBvcy50b3AsIHRpbWUsIGVhc2luZyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX3RyYW5zaXRpb25UaW1lOiBmdW5jdGlvbiAodGltZSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMudXNlVHJhbnNpdGlvbikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRpbWUgPSB0aW1lIHx8IDA7XG4gICAgICAgICAgICB2YXIgZHVyYXRpb25Qcm9wID0gdXRpbHMuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uO1xuICAgICAgICAgICAgaWYoIWR1cmF0aW9uUHJvcCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5zY3JvbGxlclN0eWxlW2R1cmF0aW9uUHJvcF0gPSB0aW1lICsgJ21zJztcblxuICAgICAgICAgICAgaWYgKCAhdGltZSAmJiB1dGlscy5pc0JhZEFuZHJvaWQgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxlclN0eWxlW2R1cmF0aW9uUHJvcF0gPSAnMC4wMDAxbXMnO1xuICAgICAgICAgICAgICAgIC8vIHJlbW92ZSAwLjAwMDFtc1xuICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgICAgICAgICByQUYoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmKHNlbGYuc2Nyb2xsZXJTdHlsZVtkdXJhdGlvblByb3BdID09PSAnMC4wMDAxbXMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnNjcm9sbGVyU3R5bGVbZHVyYXRpb25Qcm9wXSA9ICcwcyc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuXG4gICAgICAgICAgICBpZiAoIHRoaXMuaW5kaWNhdG9ycyApIHtcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IHRoaXMuaW5kaWNhdG9ycy5sZW5ndGg7IGktLTsgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kaWNhdG9yc1tpXS50cmFuc2l0aW9uVGltZSh0aW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cblxuICAgIC8vIElOU0VSVCBQT0lOVDogX3RyYW5zaXRpb25UaW1lXG5cbiAgICAgICAgfSxcblxuICAgICAgICBfdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uOiBmdW5jdGlvbiAoZWFzaW5nKSB7XG4gICAgICAgICAgICB0aGlzLnNjcm9sbGVyU3R5bGVbdXRpbHMuc3R5bGUudHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uXSA9IGVhc2luZztcblxuXG4gICAgICAgICAgICBpZiAoIHRoaXMuaW5kaWNhdG9ycyApIHtcbiAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IHRoaXMuaW5kaWNhdG9ycy5sZW5ndGg7IGktLTsgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kaWNhdG9yc1tpXS50cmFuc2l0aW9uVGltaW5nRnVuY3Rpb24oZWFzaW5nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cblxuICAgIC8vIElOU0VSVCBQT0lOVDogX3RyYW5zaXRpb25UaW1pbmdGdW5jdGlvblxuXG4gICAgICAgIH0sXG5cbiAgICAgICAgX3RyYW5zbGF0ZTogZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgICAgIGlmICggdGhpcy5vcHRpb25zLnVzZVRyYW5zZm9ybSApIHtcblxuICAgIC8qIFJFUExBQ0UgU1RBUlQ6IF90cmFuc2xhdGUgKi9cblxuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsZXJTdHlsZVt1dGlscy5zdHlsZS50cmFuc2Zvcm1dID0gJ3RyYW5zbGF0ZSgnICsgeCArICdweCwnICsgeSArICdweCknICsgdGhpcy50cmFuc2xhdGVaO1xuXG4gICAgLyogUkVQTEFDRSBFTkQ6IF90cmFuc2xhdGUgKi9cblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB4ID0gTWF0aC5yb3VuZCh4KTtcbiAgICAgICAgICAgICAgICB5ID0gTWF0aC5yb3VuZCh5KTtcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbGVyU3R5bGUubGVmdCA9IHggKyAncHgnO1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsZXJTdHlsZS50b3AgPSB5ICsgJ3B4JztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgICAgIHRoaXMueSA9IHk7XG5cblxuICAgICAgICBpZiAoIHRoaXMuaW5kaWNhdG9ycyApIHtcbiAgICAgICAgICAgIGZvciAoIHZhciBpID0gdGhpcy5pbmRpY2F0b3JzLmxlbmd0aDsgaS0tOyApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluZGljYXRvcnNbaV0udXBkYXRlUG9zaXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG5cbiAgICAvLyBJTlNFUlQgUE9JTlQ6IF90cmFuc2xhdGVcblxuICAgICAgICB9LFxuXG4gICAgICAgIF9pbml0RXZlbnRzOiBmdW5jdGlvbiAocmVtb3ZlKSB7XG4gICAgICAgICAgICB2YXIgZXZlbnRUeXBlID0gcmVtb3ZlID8gdXRpbHMucmVtb3ZlRXZlbnQgOiB1dGlscy5hZGRFdmVudCxcbiAgICAgICAgICAgICAgICB0YXJnZXQgPSB0aGlzLm9wdGlvbnMuYmluZFRvV3JhcHBlciA/IHRoaXMud3JhcHBlciA6IHdpbmRvdztcblxuICAgICAgICAgICAgZXZlbnRUeXBlKHdpbmRvdywgJ29yaWVudGF0aW9uY2hhbmdlJywgdGhpcyk7XG4gICAgICAgICAgICBldmVudFR5cGUod2luZG93LCAncmVzaXplJywgdGhpcyk7XG5cbiAgICAgICAgICAgIGlmICggdGhpcy5vcHRpb25zLmNsaWNrICkge1xuICAgICAgICAgICAgICAgIGV2ZW50VHlwZSh0aGlzLndyYXBwZXIsICdjbGljaycsIHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoICF0aGlzLm9wdGlvbnMuZGlzYWJsZU1vdXNlICkge1xuICAgICAgICAgICAgICAgIGV2ZW50VHlwZSh0aGlzLndyYXBwZXIsICdtb3VzZWRvd24nLCB0aGlzKTtcbiAgICAgICAgICAgICAgICBldmVudFR5cGUodGFyZ2V0LCAnbW91c2Vtb3ZlJywgdGhpcyk7XG4gICAgICAgICAgICAgICAgZXZlbnRUeXBlKHRhcmdldCwgJ21vdXNlY2FuY2VsJywgdGhpcyk7XG4gICAgICAgICAgICAgICAgZXZlbnRUeXBlKHRhcmdldCwgJ21vdXNldXAnLCB0aGlzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCB1dGlscy5oYXNQb2ludGVyICYmICF0aGlzLm9wdGlvbnMuZGlzYWJsZVBvaW50ZXIgKSB7XG4gICAgICAgICAgICAgICAgZXZlbnRUeXBlKHRoaXMud3JhcHBlciwgdXRpbHMucHJlZml4UG9pbnRlckV2ZW50KCdwb2ludGVyZG93bicpLCB0aGlzKTtcbiAgICAgICAgICAgICAgICBldmVudFR5cGUodGFyZ2V0LCB1dGlscy5wcmVmaXhQb2ludGVyRXZlbnQoJ3BvaW50ZXJtb3ZlJyksIHRoaXMpO1xuICAgICAgICAgICAgICAgIGV2ZW50VHlwZSh0YXJnZXQsIHV0aWxzLnByZWZpeFBvaW50ZXJFdmVudCgncG9pbnRlcmNhbmNlbCcpLCB0aGlzKTtcbiAgICAgICAgICAgICAgICBldmVudFR5cGUodGFyZ2V0LCB1dGlscy5wcmVmaXhQb2ludGVyRXZlbnQoJ3BvaW50ZXJ1cCcpLCB0aGlzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCB1dGlscy5oYXNUb3VjaCAmJiAhdGhpcy5vcHRpb25zLmRpc2FibGVUb3VjaCApIHtcbiAgICAgICAgICAgICAgICBldmVudFR5cGUodGhpcy53cmFwcGVyLCAndG91Y2hzdGFydCcsIHRoaXMpO1xuICAgICAgICAgICAgICAgIGV2ZW50VHlwZSh0YXJnZXQsICd0b3VjaG1vdmUnLCB0aGlzKTtcbiAgICAgICAgICAgICAgICBldmVudFR5cGUodGFyZ2V0LCAndG91Y2hjYW5jZWwnLCB0aGlzKTtcbiAgICAgICAgICAgICAgICBldmVudFR5cGUodGFyZ2V0LCAndG91Y2hlbmQnLCB0aGlzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZXZlbnRUeXBlKHRoaXMuc2Nyb2xsZXIsICd0cmFuc2l0aW9uZW5kJywgdGhpcyk7XG4gICAgICAgICAgICBldmVudFR5cGUodGhpcy5zY3JvbGxlciwgJ3dlYmtpdFRyYW5zaXRpb25FbmQnLCB0aGlzKTtcbiAgICAgICAgICAgIGV2ZW50VHlwZSh0aGlzLnNjcm9sbGVyLCAnb1RyYW5zaXRpb25FbmQnLCB0aGlzKTtcbiAgICAgICAgICAgIGV2ZW50VHlwZSh0aGlzLnNjcm9sbGVyLCAnTVNUcmFuc2l0aW9uRW5kJywgdGhpcyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZ2V0Q29tcHV0ZWRQb3NpdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIG1hdHJpeCA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuc2Nyb2xsZXIsIG51bGwpLFxuICAgICAgICAgICAgICAgIHgsIHk7XG5cbiAgICAgICAgICAgIGlmICggdGhpcy5vcHRpb25zLnVzZVRyYW5zZm9ybSApIHtcbiAgICAgICAgICAgICAgICBtYXRyaXggPSBtYXRyaXhbdXRpbHMuc3R5bGUudHJhbnNmb3JtXS5zcGxpdCgnKScpWzBdLnNwbGl0KCcsICcpO1xuICAgICAgICAgICAgICAgIHggPSArKG1hdHJpeFsxMl0gfHwgbWF0cml4WzRdKTtcbiAgICAgICAgICAgICAgICB5ID0gKyhtYXRyaXhbMTNdIHx8IG1hdHJpeFs1XSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHggPSArbWF0cml4LmxlZnQucmVwbGFjZSgvW14tXFxkLl0vZywgJycpO1xuICAgICAgICAgICAgICAgIHkgPSArbWF0cml4LnRvcC5yZXBsYWNlKC9bXi1cXGQuXS9nLCAnJyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7IHg6IHgsIHk6IHkgfTtcbiAgICAgICAgfSxcbiAgICAgICAgX2luaXRJbmRpY2F0b3JzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaW50ZXJhY3RpdmUgPSB0aGlzLm9wdGlvbnMuaW50ZXJhY3RpdmVTY3JvbGxiYXJzLFxuICAgICAgICAgICAgICAgIGN1c3RvbVN0eWxlID0gdHlwZW9mIHRoaXMub3B0aW9ucy5zY3JvbGxiYXJzICE9ICdzdHJpbmcnLFxuICAgICAgICAgICAgICAgIGluZGljYXRvcnMgPSBbXSxcbiAgICAgICAgICAgICAgICBpbmRpY2F0b3I7XG5cbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgdGhpcy5pbmRpY2F0b3JzID0gW107XG5cbiAgICAgICAgICAgIGlmICggdGhpcy5vcHRpb25zLnNjcm9sbGJhcnMgKSB7XG4gICAgICAgICAgICAgICAgLy8gVmVydGljYWwgc2Nyb2xsYmFyXG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLm9wdGlvbnMuc2Nyb2xsWSApIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kaWNhdG9yID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWw6IGNyZWF0ZURlZmF1bHRTY3JvbGxiYXIoJ3YnLCBpbnRlcmFjdGl2ZSwgdGhpcy5vcHRpb25zLnNjcm9sbGJhcnMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3RpdmU6IGludGVyYWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFNjcm9sbGJhcnM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21TdHlsZTogY3VzdG9tU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNpemU6IHRoaXMub3B0aW9ucy5yZXNpemVTY3JvbGxiYXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hyaW5rOiB0aGlzLm9wdGlvbnMuc2hyaW5rU2Nyb2xsYmFycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhZGU6IHRoaXMub3B0aW9ucy5mYWRlU2Nyb2xsYmFycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3Rlblg6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy53cmFwcGVyLmFwcGVuZENoaWxkKGluZGljYXRvci5lbCk7XG4gICAgICAgICAgICAgICAgICAgIGluZGljYXRvcnMucHVzaChpbmRpY2F0b3IpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIEhvcml6b250YWwgc2Nyb2xsYmFyXG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLm9wdGlvbnMuc2Nyb2xsWCApIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kaWNhdG9yID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWw6IGNyZWF0ZURlZmF1bHRTY3JvbGxiYXIoJ2gnLCBpbnRlcmFjdGl2ZSwgdGhpcy5vcHRpb25zLnNjcm9sbGJhcnMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJhY3RpdmU6IGludGVyYWN0aXZlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdFNjcm9sbGJhcnM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXN0b21TdHlsZTogY3VzdG9tU3R5bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNpemU6IHRoaXMub3B0aW9ucy5yZXNpemVTY3JvbGxiYXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2hyaW5rOiB0aGlzLm9wdGlvbnMuc2hyaW5rU2Nyb2xsYmFycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhZGU6IHRoaXMub3B0aW9ucy5mYWRlU2Nyb2xsYmFycyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3Rlblk6IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy53cmFwcGVyLmFwcGVuZENoaWxkKGluZGljYXRvci5lbCk7XG4gICAgICAgICAgICAgICAgICAgIGluZGljYXRvcnMucHVzaChpbmRpY2F0b3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCB0aGlzLm9wdGlvbnMuaW5kaWNhdG9ycyApIHtcbiAgICAgICAgICAgICAgICAvLyBUT0RPOiBjaGVjayBjb25jYXQgY29tcGF0aWJpbGl0eVxuICAgICAgICAgICAgICAgIGluZGljYXRvcnMgPSBpbmRpY2F0b3JzLmNvbmNhdCh0aGlzLm9wdGlvbnMuaW5kaWNhdG9ycyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAoIHZhciBpID0gaW5kaWNhdG9ycy5sZW5ndGg7IGktLTsgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbmRpY2F0b3JzLnB1c2goIG5ldyBJbmRpY2F0b3IodGhpcywgaW5kaWNhdG9yc1tpXSkgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVE9ETzogY2hlY2sgaWYgd2UgY2FuIHVzZSBhcnJheS5tYXAgKHdpZGUgY29tcGF0aWJpbGl0eSBhbmQgcGVyZm9ybWFuY2UgaXNzdWVzKVxuICAgICAgICAgICAgZnVuY3Rpb24gX2luZGljYXRvcnNNYXAgKGZuKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoYXQuaW5kaWNhdG9ycykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKCB2YXIgaSA9IHRoYXQuaW5kaWNhdG9ycy5sZW5ndGg7IGktLTsgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbi5jYWxsKHRoYXQuaW5kaWNhdG9yc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggdGhpcy5vcHRpb25zLmZhZGVTY3JvbGxiYXJzICkge1xuICAgICAgICAgICAgICAgIHRoaXMub24oJ3Njcm9sbEVuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX2luZGljYXRvcnNNYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWRlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5vbignc2Nyb2xsQ2FuY2VsJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfaW5kaWNhdG9yc01hcChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZhZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm9uKCdzY3JvbGxTdGFydCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX2luZGljYXRvcnNNYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mYWRlKDEpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMub24oJ2JlZm9yZVNjcm9sbFN0YXJ0JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICBfaW5kaWNhdG9yc01hcChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZhZGUoMSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgIHRoaXMub24oJ3JlZnJlc2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX2luZGljYXRvcnNNYXAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLm9uKCdkZXN0cm95JywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9pbmRpY2F0b3JzTWFwKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXN0cm95KCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5pbmRpY2F0b3JzO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2luaXRXaGVlbDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdXRpbHMuYWRkRXZlbnQodGhpcy53cmFwcGVyLCAnd2hlZWwnLCB0aGlzKTtcbiAgICAgICAgICAgIHV0aWxzLmFkZEV2ZW50KHRoaXMud3JhcHBlciwgJ21vdXNld2hlZWwnLCB0aGlzKTtcbiAgICAgICAgICAgIHV0aWxzLmFkZEV2ZW50KHRoaXMud3JhcHBlciwgJ0RPTU1vdXNlU2Nyb2xsJywgdGhpcyk7XG5cbiAgICAgICAgICAgIHRoaXMub24oJ2Rlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMud2hlZWxUaW1lb3V0KTtcbiAgICAgICAgICAgICAgICB0aGlzLndoZWVsVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICAgICAgdXRpbHMucmVtb3ZlRXZlbnQodGhpcy53cmFwcGVyLCAnd2hlZWwnLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB1dGlscy5yZW1vdmVFdmVudCh0aGlzLndyYXBwZXIsICdtb3VzZXdoZWVsJywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdXRpbHMucmVtb3ZlRXZlbnQodGhpcy53cmFwcGVyLCAnRE9NTW91c2VTY3JvbGwnLCB0aGlzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIF93aGVlbDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGlmICggIXRoaXMuZW5hYmxlZCApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB3aGVlbERlbHRhWCwgd2hlZWxEZWx0YVksXG4gICAgICAgICAgICAgICAgbmV3WCwgbmV3WSxcbiAgICAgICAgICAgICAgICB0aGF0ID0gdGhpcztcblxuICAgICAgICAgICAgaWYgKCB0aGlzLndoZWVsVGltZW91dCA9PT0gdW5kZWZpbmVkICkge1xuICAgICAgICAgICAgICAgIHRoYXQuX2V4ZWNFdmVudCgnc2Nyb2xsU3RhcnQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRXhlY3V0ZSB0aGUgc2Nyb2xsRW5kIGV2ZW50IGFmdGVyIDQwMG1zIHRoZSB3aGVlbCBzdG9wcGVkIHNjcm9sbGluZ1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMud2hlZWxUaW1lb3V0KTtcbiAgICAgICAgICAgIHRoaXMud2hlZWxUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYoIXRoYXQub3B0aW9ucy5zbmFwKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuX2V4ZWNFdmVudCgnc2Nyb2xsRW5kJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoYXQud2hlZWxUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfSwgNDAwKTtcblxuICAgICAgICAgICAgaWYgKCAnZGVsdGFYJyBpbiBlICkge1xuICAgICAgICAgICAgICAgIGlmIChlLmRlbHRhTW9kZSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICB3aGVlbERlbHRhWCA9IC1lLmRlbHRhWCAqIHRoaXMub3B0aW9ucy5tb3VzZVdoZWVsU3BlZWQ7XG4gICAgICAgICAgICAgICAgICAgIHdoZWVsRGVsdGFZID0gLWUuZGVsdGFZICogdGhpcy5vcHRpb25zLm1vdXNlV2hlZWxTcGVlZDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB3aGVlbERlbHRhWCA9IC1lLmRlbHRhWDtcbiAgICAgICAgICAgICAgICAgICAgd2hlZWxEZWx0YVkgPSAtZS5kZWx0YVk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICggJ3doZWVsRGVsdGFYJyBpbiBlICkge1xuICAgICAgICAgICAgICAgIHdoZWVsRGVsdGFYID0gZS53aGVlbERlbHRhWCAvIDEyMCAqIHRoaXMub3B0aW9ucy5tb3VzZVdoZWVsU3BlZWQ7XG4gICAgICAgICAgICAgICAgd2hlZWxEZWx0YVkgPSBlLndoZWVsRGVsdGFZIC8gMTIwICogdGhpcy5vcHRpb25zLm1vdXNlV2hlZWxTcGVlZDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoICd3aGVlbERlbHRhJyBpbiBlICkge1xuICAgICAgICAgICAgICAgIHdoZWVsRGVsdGFYID0gd2hlZWxEZWx0YVkgPSBlLndoZWVsRGVsdGEgLyAxMjAgKiB0aGlzLm9wdGlvbnMubW91c2VXaGVlbFNwZWVkO1xuICAgICAgICAgICAgfSBlbHNlIGlmICggJ2RldGFpbCcgaW4gZSApIHtcbiAgICAgICAgICAgICAgICB3aGVlbERlbHRhWCA9IHdoZWVsRGVsdGFZID0gLWUuZGV0YWlsIC8gMyAqIHRoaXMub3B0aW9ucy5tb3VzZVdoZWVsU3BlZWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd2hlZWxEZWx0YVggKj0gdGhpcy5vcHRpb25zLmludmVydFdoZWVsRGlyZWN0aW9uO1xuICAgICAgICAgICAgd2hlZWxEZWx0YVkgKj0gdGhpcy5vcHRpb25zLmludmVydFdoZWVsRGlyZWN0aW9uO1xuXG4gICAgICAgICAgICBpZiAoICF0aGlzLmhhc1ZlcnRpY2FsU2Nyb2xsICkge1xuICAgICAgICAgICAgICAgIHdoZWVsRGVsdGFYID0gd2hlZWxEZWx0YVk7XG4gICAgICAgICAgICAgICAgd2hlZWxEZWx0YVkgPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIHRoaXMub3B0aW9ucy5zbmFwICkge1xuICAgICAgICAgICAgICAgIG5ld1ggPSB0aGlzLmN1cnJlbnRQYWdlLnBhZ2VYO1xuICAgICAgICAgICAgICAgIG5ld1kgPSB0aGlzLmN1cnJlbnRQYWdlLnBhZ2VZO1xuXG4gICAgICAgICAgICAgICAgaWYgKCB3aGVlbERlbHRhWCA+IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1gtLTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCB3aGVlbERlbHRhWCA8IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1grKztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoIHdoZWVsRGVsdGFZID4gMCApIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3WS0tO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHdoZWVsRGVsdGFZIDwgMCApIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3WSsrO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuZ29Ub1BhZ2UobmV3WCwgbmV3WSk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG5ld1ggPSB0aGlzLnggKyBNYXRoLnJvdW5kKHRoaXMuaGFzSG9yaXpvbnRhbFNjcm9sbCA/IHdoZWVsRGVsdGFYIDogMCk7XG4gICAgICAgICAgICBuZXdZID0gdGhpcy55ICsgTWF0aC5yb3VuZCh0aGlzLmhhc1ZlcnRpY2FsU2Nyb2xsID8gd2hlZWxEZWx0YVkgOiAwKTtcblxuICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb25YID0gd2hlZWxEZWx0YVggPiAwID8gLTEgOiB3aGVlbERlbHRhWCA8IDAgPyAxIDogMDtcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uWSA9IHdoZWVsRGVsdGFZID4gMCA/IC0xIDogd2hlZWxEZWx0YVkgPCAwID8gMSA6IDA7XG5cbiAgICAgICAgICAgIGlmICggbmV3WCA+IDAgKSB7XG4gICAgICAgICAgICAgICAgbmV3WCA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBuZXdYIDwgdGhpcy5tYXhTY3JvbGxYICkge1xuICAgICAgICAgICAgICAgIG5ld1ggPSB0aGlzLm1heFNjcm9sbFg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggbmV3WSA+IDAgKSB7XG4gICAgICAgICAgICAgICAgbmV3WSA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBuZXdZIDwgdGhpcy5tYXhTY3JvbGxZICkge1xuICAgICAgICAgICAgICAgIG5ld1kgPSB0aGlzLm1heFNjcm9sbFk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG8obmV3WCwgbmV3WSwgMCk7XG5cbiAgICAvLyBJTlNFUlQgUE9JTlQ6IF93aGVlbFxuICAgICAgICB9LFxuXG4gICAgICAgIF9pbml0U25hcDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IHt9O1xuXG4gICAgICAgICAgICBpZiAoIHR5cGVvZiB0aGlzLm9wdGlvbnMuc25hcCA9PSAnc3RyaW5nJyApIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuc25hcCA9IHRoaXMuc2Nyb2xsZXIucXVlcnlTZWxlY3RvckFsbCh0aGlzLm9wdGlvbnMuc25hcCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMub24oJ3JlZnJlc2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGkgPSAwLCBsLFxuICAgICAgICAgICAgICAgICAgICBtID0gMCwgbixcbiAgICAgICAgICAgICAgICAgICAgY3gsIGN5LFxuICAgICAgICAgICAgICAgICAgICB4ID0gMCwgeSxcbiAgICAgICAgICAgICAgICAgICAgc3RlcFggPSB0aGlzLm9wdGlvbnMuc25hcFN0ZXBYIHx8IHRoaXMud3JhcHBlcldpZHRoLFxuICAgICAgICAgICAgICAgICAgICBzdGVwWSA9IHRoaXMub3B0aW9ucy5zbmFwU3RlcFkgfHwgdGhpcy53cmFwcGVySGVpZ2h0LFxuICAgICAgICAgICAgICAgICAgICBlbDtcblxuICAgICAgICAgICAgICAgIHRoaXMucGFnZXMgPSBbXTtcblxuICAgICAgICAgICAgICAgIGlmICggIXRoaXMud3JhcHBlcldpZHRoIHx8ICF0aGlzLndyYXBwZXJIZWlnaHQgfHwgIXRoaXMuc2Nyb2xsZXJXaWR0aCB8fCAhdGhpcy5zY3JvbGxlckhlaWdodCApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICggdGhpcy5vcHRpb25zLnNuYXAgPT09IHRydWUgKSB7XG4gICAgICAgICAgICAgICAgICAgIGN4ID0gTWF0aC5yb3VuZCggc3RlcFggLyAyICk7XG4gICAgICAgICAgICAgICAgICAgIGN5ID0gTWF0aC5yb3VuZCggc3RlcFkgLyAyICk7XG5cbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKCB4ID4gLXRoaXMuc2Nyb2xsZXJXaWR0aCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFnZXNbaV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGwgPSAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgeSA9IDA7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICggeSA+IC10aGlzLnNjcm9sbGVySGVpZ2h0ICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFnZXNbaV1bbF0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IE1hdGgubWF4KHgsIHRoaXMubWF4U2Nyb2xsWCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHk6IE1hdGgubWF4KHksIHRoaXMubWF4U2Nyb2xsWSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpZHRoOiBzdGVwWCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBzdGVwWSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3g6IHggLSBjeCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3k6IHkgLSBjeVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5IC09IHN0ZXBZO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgeCAtPSBzdGVwWDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGVsID0gdGhpcy5vcHRpb25zLnNuYXA7XG4gICAgICAgICAgICAgICAgICAgIGwgPSBlbC5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIG4gPSAtMTtcblxuICAgICAgICAgICAgICAgICAgICBmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGkgPT09IDAgfHwgZWxbaV0ub2Zmc2V0TGVmdCA8PSBlbFtpLTFdLm9mZnNldExlZnQgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbSA9IDA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbisrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoICF0aGlzLnBhZ2VzW21dICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFnZXNbbV0gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgeCA9IE1hdGgubWF4KC1lbFtpXS5vZmZzZXRMZWZ0LCB0aGlzLm1heFNjcm9sbFgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgeSA9IE1hdGgubWF4KC1lbFtpXS5vZmZzZXRUb3AsIHRoaXMubWF4U2Nyb2xsWSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjeCA9IHggLSBNYXRoLnJvdW5kKGVsW2ldLm9mZnNldFdpZHRoIC8gMik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjeSA9IHkgLSBNYXRoLnJvdW5kKGVsW2ldLm9mZnNldEhlaWdodCAvIDIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2VzW21dW25dID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHg6IHgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeTogeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogZWxbaV0ub2Zmc2V0V2lkdGgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBlbFtpXS5vZmZzZXRIZWlnaHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3g6IGN4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN5OiBjeVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB4ID4gdGhpcy5tYXhTY3JvbGxYICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0rKztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuZ29Ub1BhZ2UodGhpcy5jdXJyZW50UGFnZS5wYWdlWCB8fCAwLCB0aGlzLmN1cnJlbnRQYWdlLnBhZ2VZIHx8IDAsIDApO1xuXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIHNuYXAgdGhyZXNob2xkIGlmIG5lZWRlZFxuICAgICAgICAgICAgICAgIGlmICggdGhpcy5vcHRpb25zLnNuYXBUaHJlc2hvbGQgJSAxID09PSAwICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNuYXBUaHJlc2hvbGRYID0gdGhpcy5vcHRpb25zLnNuYXBUaHJlc2hvbGQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc25hcFRocmVzaG9sZFkgPSB0aGlzLm9wdGlvbnMuc25hcFRocmVzaG9sZDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNuYXBUaHJlc2hvbGRYID0gTWF0aC5yb3VuZCh0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2UucGFnZVhdW3RoaXMuY3VycmVudFBhZ2UucGFnZVldLndpZHRoICogdGhpcy5vcHRpb25zLnNuYXBUaHJlc2hvbGQpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNuYXBUaHJlc2hvbGRZID0gTWF0aC5yb3VuZCh0aGlzLnBhZ2VzW3RoaXMuY3VycmVudFBhZ2UucGFnZVhdW3RoaXMuY3VycmVudFBhZ2UucGFnZVldLmhlaWdodCAqIHRoaXMub3B0aW9ucy5zbmFwVGhyZXNob2xkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdGhpcy5vbignZmxpY2snLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRpbWUgPSB0aGlzLm9wdGlvbnMuc25hcFNwZWVkIHx8IE1hdGgubWF4KFxuICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWF0aC5taW4oTWF0aC5hYnModGhpcy54IC0gdGhpcy5zdGFydFgpLCAxMDAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLm1pbihNYXRoLmFicyh0aGlzLnkgLSB0aGlzLnN0YXJ0WSksIDEwMDApXG4gICAgICAgICAgICAgICAgICAgICAgICApLCAzMDApO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5nb1RvUGFnZShcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZS5wYWdlWCArIHRoaXMuZGlyZWN0aW9uWCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZS5wYWdlWSArIHRoaXMuZGlyZWN0aW9uWSxcbiAgICAgICAgICAgICAgICAgICAgdGltZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBfbmVhcmVzdFNuYXA6IGZ1bmN0aW9uICh4LCB5KSB7XG4gICAgICAgICAgICBpZiAoICF0aGlzLnBhZ2VzLmxlbmd0aCApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyB4OiAwLCB5OiAwLCBwYWdlWDogMCwgcGFnZVk6IDAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIGkgPSAwLFxuICAgICAgICAgICAgICAgIGwgPSB0aGlzLnBhZ2VzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICBtID0gMDtcblxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UgZXhjZWVkZWQgdGhlIHNuYXAgdGhyZXNob2xkXG4gICAgICAgICAgICBpZiAoIE1hdGguYWJzKHggLSB0aGlzLmFic1N0YXJ0WCkgPCB0aGlzLnNuYXBUaHJlc2hvbGRYICYmXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoeSAtIHRoaXMuYWJzU3RhcnRZKSA8IHRoaXMuc25hcFRocmVzaG9sZFkgKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFBhZ2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggeCA+IDAgKSB7XG4gICAgICAgICAgICAgICAgeCA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB4IDwgdGhpcy5tYXhTY3JvbGxYICkge1xuICAgICAgICAgICAgICAgIHggPSB0aGlzLm1heFNjcm9sbFg7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggeSA+IDAgKSB7XG4gICAgICAgICAgICAgICAgeSA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB5IDwgdGhpcy5tYXhTY3JvbGxZICkge1xuICAgICAgICAgICAgICAgIHkgPSB0aGlzLm1heFNjcm9sbFk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAoIDsgaSA8IGw7IGkrKyApIHtcbiAgICAgICAgICAgICAgICBpZiAoIHggPj0gdGhpcy5wYWdlc1tpXVswXS5jeCApIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IHRoaXMucGFnZXNbaV1bMF0ueDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsID0gdGhpcy5wYWdlc1tpXS5sZW5ndGg7XG5cbiAgICAgICAgICAgIGZvciAoIDsgbSA8IGw7IG0rKyApIHtcbiAgICAgICAgICAgICAgICBpZiAoIHkgPj0gdGhpcy5wYWdlc1swXVttXS5jeSApIHtcbiAgICAgICAgICAgICAgICAgICAgeSA9IHRoaXMucGFnZXNbMF1bbV0ueTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIGkgPT0gdGhpcy5jdXJyZW50UGFnZS5wYWdlWCApIHtcbiAgICAgICAgICAgICAgICBpICs9IHRoaXMuZGlyZWN0aW9uWDtcblxuICAgICAgICAgICAgICAgIGlmICggaSA8IDAgKSB7XG4gICAgICAgICAgICAgICAgICAgIGkgPSAwO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIGkgPj0gdGhpcy5wYWdlcy5sZW5ndGggKSB7XG4gICAgICAgICAgICAgICAgICAgIGkgPSB0aGlzLnBhZ2VzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgeCA9IHRoaXMucGFnZXNbaV1bMF0ueDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCBtID09IHRoaXMuY3VycmVudFBhZ2UucGFnZVkgKSB7XG4gICAgICAgICAgICAgICAgbSArPSB0aGlzLmRpcmVjdGlvblk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIG0gPCAwICkge1xuICAgICAgICAgICAgICAgICAgICBtID0gMDtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCBtID49IHRoaXMucGFnZXNbMF0ubGVuZ3RoICkge1xuICAgICAgICAgICAgICAgICAgICBtID0gdGhpcy5wYWdlc1swXS5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHkgPSB0aGlzLnBhZ2VzWzBdW21dLnk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgeDogeCxcbiAgICAgICAgICAgICAgICB5OiB5LFxuICAgICAgICAgICAgICAgIHBhZ2VYOiBpLFxuICAgICAgICAgICAgICAgIHBhZ2VZOiBtXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuXG4gICAgICAgIGdvVG9QYWdlOiBmdW5jdGlvbiAoeCwgeSwgdGltZSwgZWFzaW5nKSB7XG4gICAgICAgICAgICBlYXNpbmcgPSBlYXNpbmcgfHwgdGhpcy5vcHRpb25zLmJvdW5jZUVhc2luZztcblxuICAgICAgICAgICAgaWYgKCB4ID49IHRoaXMucGFnZXMubGVuZ3RoICkge1xuICAgICAgICAgICAgICAgIHggPSB0aGlzLnBhZ2VzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB4IDwgMCApIHtcbiAgICAgICAgICAgICAgICB4ID0gMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCB5ID49IHRoaXMucGFnZXNbeF0ubGVuZ3RoICkge1xuICAgICAgICAgICAgICAgIHkgPSB0aGlzLnBhZ2VzW3hdLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB5IDwgMCApIHtcbiAgICAgICAgICAgICAgICB5ID0gMDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHBvc1ggPSB0aGlzLnBhZ2VzW3hdW3ldLngsXG4gICAgICAgICAgICAgICAgcG9zWSA9IHRoaXMucGFnZXNbeF1beV0ueTtcblxuICAgICAgICAgICAgdGltZSA9IHRpbWUgPT09IHVuZGVmaW5lZCA/IHRoaXMub3B0aW9ucy5zbmFwU3BlZWQgfHwgTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgICAgIE1hdGgubWluKE1hdGguYWJzKHBvc1ggLSB0aGlzLngpLCAxMDAwKSxcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5taW4oTWF0aC5hYnMocG9zWSAtIHRoaXMueSksIDEwMDApXG4gICAgICAgICAgICAgICAgKSwgMzAwKSA6IHRpbWU7XG5cbiAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSB7XG4gICAgICAgICAgICAgICAgeDogcG9zWCxcbiAgICAgICAgICAgICAgICB5OiBwb3NZLFxuICAgICAgICAgICAgICAgIHBhZ2VYOiB4LFxuICAgICAgICAgICAgICAgIHBhZ2VZOiB5XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICB0aGlzLnNjcm9sbFRvKHBvc1gsIHBvc1ksIHRpbWUsIGVhc2luZyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKHRpbWUsIGVhc2luZykge1xuICAgICAgICAgICAgdmFyIHggPSB0aGlzLmN1cnJlbnRQYWdlLnBhZ2VYLFxuICAgICAgICAgICAgICAgIHkgPSB0aGlzLmN1cnJlbnRQYWdlLnBhZ2VZO1xuXG4gICAgICAgICAgICB4Kys7XG5cbiAgICAgICAgICAgIGlmICggeCA+PSB0aGlzLnBhZ2VzLmxlbmd0aCAmJiB0aGlzLmhhc1ZlcnRpY2FsU2Nyb2xsICkge1xuICAgICAgICAgICAgICAgIHggPSAwO1xuICAgICAgICAgICAgICAgIHkrKztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5nb1RvUGFnZSh4LCB5LCB0aW1lLCBlYXNpbmcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHByZXY6IGZ1bmN0aW9uICh0aW1lLCBlYXNpbmcpIHtcbiAgICAgICAgICAgIHZhciB4ID0gdGhpcy5jdXJyZW50UGFnZS5wYWdlWCxcbiAgICAgICAgICAgICAgICB5ID0gdGhpcy5jdXJyZW50UGFnZS5wYWdlWTtcblxuICAgICAgICAgICAgeC0tO1xuXG4gICAgICAgICAgICBpZiAoIHggPCAwICYmIHRoaXMuaGFzVmVydGljYWxTY3JvbGwgKSB7XG4gICAgICAgICAgICAgICAgeCA9IDA7XG4gICAgICAgICAgICAgICAgeS0tO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmdvVG9QYWdlKHgsIHksIHRpbWUsIGVhc2luZyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2luaXRLZXlzOiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgLy8gZGVmYXVsdCBrZXkgYmluZGluZ3NcbiAgICAgICAgICAgIHZhciBrZXlzID0ge1xuICAgICAgICAgICAgICAgIHBhZ2VVcDogMzMsXG4gICAgICAgICAgICAgICAgcGFnZURvd246IDM0LFxuICAgICAgICAgICAgICAgIGVuZDogMzUsXG4gICAgICAgICAgICAgICAgaG9tZTogMzYsXG4gICAgICAgICAgICAgICAgbGVmdDogMzcsXG4gICAgICAgICAgICAgICAgdXA6IDM4LFxuICAgICAgICAgICAgICAgIHJpZ2h0OiAzOSxcbiAgICAgICAgICAgICAgICBkb3duOiA0MFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhciBpO1xuXG4gICAgICAgICAgICAvLyBpZiB5b3UgZ2l2ZSBtZSBjaGFyYWN0ZXJzIEkgZ2l2ZSB5b3Uga2V5Y29kZVxuICAgICAgICAgICAgaWYgKCB0eXBlb2YgdGhpcy5vcHRpb25zLmtleUJpbmRpbmdzID09ICdvYmplY3QnICkge1xuICAgICAgICAgICAgICAgIGZvciAoIGkgaW4gdGhpcy5vcHRpb25zLmtleUJpbmRpbmdzICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHR5cGVvZiB0aGlzLm9wdGlvbnMua2V5QmluZGluZ3NbaV0gPT0gJ3N0cmluZycgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMua2V5QmluZGluZ3NbaV0gPSB0aGlzLm9wdGlvbnMua2V5QmluZGluZ3NbaV0udG9VcHBlckNhc2UoKS5jaGFyQ29kZUF0KDApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMua2V5QmluZGluZ3MgPSB7fTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yICggaSBpbiBrZXlzICkge1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5rZXlCaW5kaW5nc1tpXSA9IHRoaXMub3B0aW9ucy5rZXlCaW5kaW5nc1tpXSB8fCBrZXlzW2ldO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB1dGlscy5hZGRFdmVudCh3aW5kb3csICdrZXlkb3duJywgdGhpcyk7XG5cbiAgICAgICAgICAgIHRoaXMub24oJ2Rlc3Ryb3knLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdXRpbHMucmVtb3ZlRXZlbnQod2luZG93LCAna2V5ZG93bicsIHRoaXMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX2tleTogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGlmICggIXRoaXMuZW5hYmxlZCApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciBzbmFwID0gdGhpcy5vcHRpb25zLnNuYXAsICAgLy8gd2UgYXJlIHVzaW5nIHRoaXMgYWxvdCwgYmV0dGVyIHRvIGNhY2hlIGl0XG4gICAgICAgICAgICAgICAgbmV3WCA9IHNuYXAgPyB0aGlzLmN1cnJlbnRQYWdlLnBhZ2VYIDogdGhpcy54LFxuICAgICAgICAgICAgICAgIG5ld1kgPSBzbmFwID8gdGhpcy5jdXJyZW50UGFnZS5wYWdlWSA6IHRoaXMueSxcbiAgICAgICAgICAgICAgICBub3cgPSB1dGlscy5nZXRUaW1lKCksXG4gICAgICAgICAgICAgICAgcHJldlRpbWUgPSB0aGlzLmtleVRpbWUgfHwgMCxcbiAgICAgICAgICAgICAgICBhY2NlbGVyYXRpb24gPSAwLjI1MCxcbiAgICAgICAgICAgICAgICBwb3M7XG5cbiAgICAgICAgICAgIGlmICggdGhpcy5vcHRpb25zLnVzZVRyYW5zaXRpb24gJiYgdGhpcy5pc0luVHJhbnNpdGlvbiApIHtcbiAgICAgICAgICAgICAgICBwb3MgPSB0aGlzLmdldENvbXB1dGVkUG9zaXRpb24oKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zbGF0ZShNYXRoLnJvdW5kKHBvcy54KSwgTWF0aC5yb3VuZChwb3MueSkpO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNJblRyYW5zaXRpb24gPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5rZXlBY2NlbGVyYXRpb24gPSBub3cgLSBwcmV2VGltZSA8IDIwMCA/IE1hdGgubWluKHRoaXMua2V5QWNjZWxlcmF0aW9uICsgYWNjZWxlcmF0aW9uLCA1MCkgOiAwO1xuXG4gICAgICAgICAgICBzd2l0Y2ggKCBlLmtleUNvZGUgKSB7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLm9wdGlvbnMua2V5QmluZGluZ3MucGFnZVVwOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXMuaGFzSG9yaXpvbnRhbFNjcm9sbCAmJiAhdGhpcy5oYXNWZXJ0aWNhbFNjcm9sbCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ggKz0gc25hcCA/IDEgOiB0aGlzLndyYXBwZXJXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld1kgKz0gc25hcCA/IDEgOiB0aGlzLndyYXBwZXJIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLm9wdGlvbnMua2V5QmluZGluZ3MucGFnZURvd246XG4gICAgICAgICAgICAgICAgICAgIGlmICggdGhpcy5oYXNIb3Jpem9udGFsU2Nyb2xsICYmICF0aGlzLmhhc1ZlcnRpY2FsU2Nyb2xsICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3WCAtPSBzbmFwID8gMSA6IHRoaXMud3JhcHBlcldpZHRoO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3WSAtPSBzbmFwID8gMSA6IHRoaXMud3JhcHBlckhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMub3B0aW9ucy5rZXlCaW5kaW5ncy5lbmQ6XG4gICAgICAgICAgICAgICAgICAgIG5ld1ggPSBzbmFwID8gdGhpcy5wYWdlcy5sZW5ndGgtMSA6IHRoaXMubWF4U2Nyb2xsWDtcbiAgICAgICAgICAgICAgICAgICAgbmV3WSA9IHNuYXAgPyB0aGlzLnBhZ2VzWzBdLmxlbmd0aC0xIDogdGhpcy5tYXhTY3JvbGxZO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMub3B0aW9ucy5rZXlCaW5kaW5ncy5ob21lOlxuICAgICAgICAgICAgICAgICAgICBuZXdYID0gMDtcbiAgICAgICAgICAgICAgICAgICAgbmV3WSA9IDA7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgdGhpcy5vcHRpb25zLmtleUJpbmRpbmdzLmxlZnQ6XG4gICAgICAgICAgICAgICAgICAgIG5ld1ggKz0gc25hcCA/IC0xIDogNSArIHRoaXMua2V5QWNjZWxlcmF0aW9uPj4wO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMub3B0aW9ucy5rZXlCaW5kaW5ncy51cDpcbiAgICAgICAgICAgICAgICAgICAgbmV3WSArPSBzbmFwID8gMSA6IDUgKyB0aGlzLmtleUFjY2VsZXJhdGlvbj4+MDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSB0aGlzLm9wdGlvbnMua2V5QmluZGluZ3MucmlnaHQ6XG4gICAgICAgICAgICAgICAgICAgIG5ld1ggLT0gc25hcCA/IC0xIDogNSArIHRoaXMua2V5QWNjZWxlcmF0aW9uPj4wO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIHRoaXMub3B0aW9ucy5rZXlCaW5kaW5ncy5kb3duOlxuICAgICAgICAgICAgICAgICAgICBuZXdZIC09IHNuYXAgPyAxIDogNSArIHRoaXMua2V5QWNjZWxlcmF0aW9uPj4wO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggc25hcCApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmdvVG9QYWdlKG5ld1gsIG5ld1kpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCBuZXdYID4gMCApIHtcbiAgICAgICAgICAgICAgICBuZXdYID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLmtleUFjY2VsZXJhdGlvbiA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCBuZXdYIDwgdGhpcy5tYXhTY3JvbGxYICkge1xuICAgICAgICAgICAgICAgIG5ld1ggPSB0aGlzLm1heFNjcm9sbFg7XG4gICAgICAgICAgICAgICAgdGhpcy5rZXlBY2NlbGVyYXRpb24gPSAwO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIG5ld1kgPiAwICkge1xuICAgICAgICAgICAgICAgIG5ld1kgPSAwO1xuICAgICAgICAgICAgICAgIHRoaXMua2V5QWNjZWxlcmF0aW9uID0gMDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIG5ld1kgPCB0aGlzLm1heFNjcm9sbFkgKSB7XG4gICAgICAgICAgICAgICAgbmV3WSA9IHRoaXMubWF4U2Nyb2xsWTtcbiAgICAgICAgICAgICAgICB0aGlzLmtleUFjY2VsZXJhdGlvbiA9IDA7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG8obmV3WCwgbmV3WSwgMCk7XG5cbiAgICAgICAgICAgIHRoaXMua2V5VGltZSA9IG5vdztcbiAgICAgICAgfSxcblxuICAgICAgICBfYW5pbWF0ZTogZnVuY3Rpb24gKGRlc3RYLCBkZXN0WSwgZHVyYXRpb24sIGVhc2luZ0ZuKSB7XG4gICAgICAgICAgICB2YXIgdGhhdCA9IHRoaXMsXG4gICAgICAgICAgICAgICAgc3RhcnRYID0gdGhpcy54LFxuICAgICAgICAgICAgICAgIHN0YXJ0WSA9IHRoaXMueSxcbiAgICAgICAgICAgICAgICBzdGFydFRpbWUgPSB1dGlscy5nZXRUaW1lKCksXG4gICAgICAgICAgICAgICAgZGVzdFRpbWUgPSBzdGFydFRpbWUgKyBkdXJhdGlvbjtcblxuICAgICAgICAgICAgZnVuY3Rpb24gc3RlcCAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIG5vdyA9IHV0aWxzLmdldFRpbWUoKSxcbiAgICAgICAgICAgICAgICAgICAgbmV3WCwgbmV3WSxcbiAgICAgICAgICAgICAgICAgICAgZWFzaW5nO1xuXG4gICAgICAgICAgICAgICAgaWYgKCBub3cgPj0gZGVzdFRpbWUgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoYXQuaXNBbmltYXRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhhdC5fdHJhbnNsYXRlKGRlc3RYLCBkZXN0WSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCAhdGhhdC5yZXNldFBvc2l0aW9uKHRoYXQub3B0aW9ucy5ib3VuY2VUaW1lKSApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoYXQuX2V4ZWNFdmVudCgnc2Nyb2xsRW5kJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgbm93ID0gKCBub3cgLSBzdGFydFRpbWUgKSAvIGR1cmF0aW9uO1xuICAgICAgICAgICAgICAgIGVhc2luZyA9IGVhc2luZ0ZuKG5vdyk7XG4gICAgICAgICAgICAgICAgbmV3WCA9ICggZGVzdFggLSBzdGFydFggKSAqIGVhc2luZyArIHN0YXJ0WDtcbiAgICAgICAgICAgICAgICBuZXdZID0gKCBkZXN0WSAtIHN0YXJ0WSApICogZWFzaW5nICsgc3RhcnRZO1xuICAgICAgICAgICAgICAgIHRoYXQuX3RyYW5zbGF0ZShuZXdYLCBuZXdZKTtcblxuICAgICAgICAgICAgICAgIGlmICggdGhhdC5pc0FuaW1hdGluZyApIHtcbiAgICAgICAgICAgICAgICAgICAgckFGKHN0ZXApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5pc0FuaW1hdGluZyA9IHRydWU7XG4gICAgICAgICAgICBzdGVwKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGhhbmRsZUV2ZW50OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgc3dpdGNoICggZS50eXBlICkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3RvdWNoc3RhcnQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3BvaW50ZXJkb3duJzpcbiAgICAgICAgICAgICAgICBjYXNlICdNU1BvaW50ZXJEb3duJzpcbiAgICAgICAgICAgICAgICBjYXNlICdtb3VzZWRvd24nOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGFydChlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndG91Y2htb3ZlJzpcbiAgICAgICAgICAgICAgICBjYXNlICdwb2ludGVybW92ZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnTVNQb2ludGVyTW92ZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnbW91c2Vtb3ZlJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW92ZShlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndG91Y2hlbmQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3BvaW50ZXJ1cCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnTVNQb2ludGVyVXAnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ21vdXNldXAnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3RvdWNoY2FuY2VsJzpcbiAgICAgICAgICAgICAgICBjYXNlICdwb2ludGVyY2FuY2VsJzpcbiAgICAgICAgICAgICAgICBjYXNlICdNU1BvaW50ZXJDYW5jZWwnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ21vdXNlY2FuY2VsJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW5kKGUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdvcmllbnRhdGlvbmNoYW5nZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAncmVzaXplJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVzaXplKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ3RyYW5zaXRpb25lbmQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3dlYmtpdFRyYW5zaXRpb25FbmQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ29UcmFuc2l0aW9uRW5kJzpcbiAgICAgICAgICAgICAgICBjYXNlICdNU1RyYW5zaXRpb25FbmQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2l0aW9uRW5kKGUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICd3aGVlbCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnRE9NTW91c2VTY3JvbGwnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ21vdXNld2hlZWwnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl93aGVlbChlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAna2V5ZG93bic6XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2tleShlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnY2xpY2snOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXMuZW5hYmxlZCAmJiAhZS5fY29uc3RydWN0ZWQgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBmdW5jdGlvbiBjcmVhdGVEZWZhdWx0U2Nyb2xsYmFyIChkaXJlY3Rpb24sIGludGVyYWN0aXZlLCB0eXBlKSB7XG4gICAgICAgIHZhciBzY3JvbGxiYXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSxcbiAgICAgICAgICAgIGluZGljYXRvciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG4gICAgICAgIGlmICggdHlwZSA9PT0gdHJ1ZSApIHtcbiAgICAgICAgICAgIHNjcm9sbGJhci5zdHlsZS5jc3NUZXh0ID0gJ3Bvc2l0aW9uOmFic29sdXRlO3otaW5kZXg6OTk5OSc7XG4gICAgICAgICAgICBpbmRpY2F0b3Iuc3R5bGUuY3NzVGV4dCA9ICctd2Via2l0LWJveC1zaXppbmc6Ym9yZGVyLWJveDstbW96LWJveC1zaXppbmc6Ym9yZGVyLWJveDtib3gtc2l6aW5nOmJvcmRlci1ib3g7cG9zaXRpb246YWJzb2x1dGU7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLDApO2JvcmRlcjoxcHggc29saWQgcmdiYSgyNTUsMjU1LDI1NSwwKTtib3JkZXItcmFkaXVzOjNweCc7XG4gICAgICAgIH1cblxuICAgICAgICBpbmRpY2F0b3IuY2xhc3NOYW1lID0gJ2lTY3JvbGxJbmRpY2F0b3InO1xuXG4gICAgICAgIGlmICggZGlyZWN0aW9uID09ICdoJyApIHtcbiAgICAgICAgICAgIGlmICggdHlwZSA9PT0gdHJ1ZSApIHtcbiAgICAgICAgICAgICAgICBzY3JvbGxiYXIuc3R5bGUuY3NzVGV4dCArPSAnO2hlaWdodDo3cHg7bGVmdDoycHg7cmlnaHQ6MnB4O2JvdHRvbTowJztcbiAgICAgICAgICAgICAgICBpbmRpY2F0b3Iuc3R5bGUuaGVpZ2h0ID0gJzEwMCUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2Nyb2xsYmFyLmNsYXNzTmFtZSA9ICdpU2Nyb2xsSG9yaXpvbnRhbFNjcm9sbGJhcic7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIHR5cGUgPT09IHRydWUgKSB7XG4gICAgICAgICAgICAgICAgc2Nyb2xsYmFyLnN0eWxlLmNzc1RleHQgKz0gJzt3aWR0aDo3cHg7Ym90dG9tOjJweDt0b3A6MnB4O3JpZ2h0OjFweCc7XG4gICAgICAgICAgICAgICAgaW5kaWNhdG9yLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2Nyb2xsYmFyLmNsYXNzTmFtZSA9ICdpU2Nyb2xsVmVydGljYWxTY3JvbGxiYXInO1xuICAgICAgICB9XG5cbiAgICAgICAgc2Nyb2xsYmFyLnN0eWxlLmNzc1RleHQgKz0gJztvdmVyZmxvdzpoaWRkZW4nO1xuXG4gICAgICAgIGlmICggIWludGVyYWN0aXZlICkge1xuICAgICAgICAgICAgc2Nyb2xsYmFyLnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XG4gICAgICAgIH1cblxuICAgICAgICBzY3JvbGxiYXIuYXBwZW5kQ2hpbGQoaW5kaWNhdG9yKTtcblxuICAgICAgICByZXR1cm4gc2Nyb2xsYmFyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIEluZGljYXRvciAoc2Nyb2xsZXIsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy53cmFwcGVyID0gdHlwZW9mIG9wdGlvbnMuZWwgPT0gJ3N0cmluZycgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG9wdGlvbnMuZWwpIDogb3B0aW9ucy5lbDtcbiAgICAgICAgdGhpcy53cmFwcGVyU3R5bGUgPSB0aGlzLndyYXBwZXIuc3R5bGU7XG4gICAgICAgIHRoaXMuaW5kaWNhdG9yID0gdGhpcy53cmFwcGVyLmNoaWxkcmVuWzBdO1xuICAgICAgICB0aGlzLmluZGljYXRvclN0eWxlID0gdGhpcy5pbmRpY2F0b3Iuc3R5bGU7XG4gICAgICAgIHRoaXMuc2Nyb2xsZXIgPSBzY3JvbGxlcjtcblxuICAgICAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgICAgICBsaXN0ZW5YOiB0cnVlLFxuICAgICAgICAgICAgbGlzdGVuWTogdHJ1ZSxcbiAgICAgICAgICAgIGludGVyYWN0aXZlOiBmYWxzZSxcbiAgICAgICAgICAgIHJlc2l6ZTogdHJ1ZSxcbiAgICAgICAgICAgIGRlZmF1bHRTY3JvbGxiYXJzOiBmYWxzZSxcbiAgICAgICAgICAgIHNocmluazogZmFsc2UsXG4gICAgICAgICAgICBmYWRlOiBmYWxzZSxcbiAgICAgICAgICAgIHNwZWVkUmF0aW9YOiAwLFxuICAgICAgICAgICAgc3BlZWRSYXRpb1k6IDBcbiAgICAgICAgfTtcblxuICAgICAgICBmb3IgKCB2YXIgaSBpbiBvcHRpb25zICkge1xuICAgICAgICAgICAgdGhpcy5vcHRpb25zW2ldID0gb3B0aW9uc1tpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2l6ZVJhdGlvWCA9IDE7XG4gICAgICAgIHRoaXMuc2l6ZVJhdGlvWSA9IDE7XG4gICAgICAgIHRoaXMubWF4UG9zWCA9IDA7XG4gICAgICAgIHRoaXMubWF4UG9zWSA9IDA7XG5cbiAgICAgICAgaWYgKCB0aGlzLm9wdGlvbnMuaW50ZXJhY3RpdmUgKSB7XG4gICAgICAgICAgICBpZiAoICF0aGlzLm9wdGlvbnMuZGlzYWJsZVRvdWNoICkge1xuICAgICAgICAgICAgICAgIHV0aWxzLmFkZEV2ZW50KHRoaXMuaW5kaWNhdG9yLCAndG91Y2hzdGFydCcsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHV0aWxzLmFkZEV2ZW50KHdpbmRvdywgJ3RvdWNoZW5kJywgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoICF0aGlzLm9wdGlvbnMuZGlzYWJsZVBvaW50ZXIgKSB7XG4gICAgICAgICAgICAgICAgdXRpbHMuYWRkRXZlbnQodGhpcy5pbmRpY2F0b3IsIHV0aWxzLnByZWZpeFBvaW50ZXJFdmVudCgncG9pbnRlcmRvd24nKSwgdGhpcyk7XG4gICAgICAgICAgICAgICAgdXRpbHMuYWRkRXZlbnQod2luZG93LCB1dGlscy5wcmVmaXhQb2ludGVyRXZlbnQoJ3BvaW50ZXJ1cCcpLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggIXRoaXMub3B0aW9ucy5kaXNhYmxlTW91c2UgKSB7XG4gICAgICAgICAgICAgICAgdXRpbHMuYWRkRXZlbnQodGhpcy5pbmRpY2F0b3IsICdtb3VzZWRvd24nLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB1dGlscy5hZGRFdmVudCh3aW5kb3csICdtb3VzZXVwJywgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIHRoaXMub3B0aW9ucy5mYWRlICkge1xuICAgICAgICAgICAgdGhpcy53cmFwcGVyU3R5bGVbdXRpbHMuc3R5bGUudHJhbnNmb3JtXSA9IHRoaXMuc2Nyb2xsZXIudHJhbnNsYXRlWjtcbiAgICAgICAgICAgIHZhciBkdXJhdGlvblByb3AgPSB1dGlscy5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb247XG4gICAgICAgICAgICBpZighZHVyYXRpb25Qcm9wKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy53cmFwcGVyU3R5bGVbZHVyYXRpb25Qcm9wXSA9IHV0aWxzLmlzQmFkQW5kcm9pZCA/ICcwLjAwMDFtcycgOiAnMG1zJztcbiAgICAgICAgICAgIC8vIHJlbW92ZSAwLjAwMDFtc1xuICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgaWYodXRpbHMuaXNCYWRBbmRyb2lkKSB7XG4gICAgICAgICAgICAgICAgckFGKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBpZihzZWxmLndyYXBwZXJTdHlsZVtkdXJhdGlvblByb3BdID09PSAnMC4wMDAxbXMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLndyYXBwZXJTdHlsZVtkdXJhdGlvblByb3BdID0gJzBzJztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy53cmFwcGVyU3R5bGUub3BhY2l0eSA9ICcwJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEluZGljYXRvci5wcm90b3R5cGUgPSB7XG4gICAgICAgIGhhbmRsZUV2ZW50OiBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgc3dpdGNoICggZS50eXBlICkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ3RvdWNoc3RhcnQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3BvaW50ZXJkb3duJzpcbiAgICAgICAgICAgICAgICBjYXNlICdNU1BvaW50ZXJEb3duJzpcbiAgICAgICAgICAgICAgICBjYXNlICdtb3VzZWRvd24nOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGFydChlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndG91Y2htb3ZlJzpcbiAgICAgICAgICAgICAgICBjYXNlICdwb2ludGVybW92ZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnTVNQb2ludGVyTW92ZSc6XG4gICAgICAgICAgICAgICAgY2FzZSAnbW91c2Vtb3ZlJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW92ZShlKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAndG91Y2hlbmQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3BvaW50ZXJ1cCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnTVNQb2ludGVyVXAnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ21vdXNldXAnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3RvdWNoY2FuY2VsJzpcbiAgICAgICAgICAgICAgICBjYXNlICdwb2ludGVyY2FuY2VsJzpcbiAgICAgICAgICAgICAgICBjYXNlICdNU1BvaW50ZXJDYW5jZWwnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ21vdXNlY2FuY2VsJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW5kKGUpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBkZXN0cm95OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIHRoaXMub3B0aW9ucy5mYWRlU2Nyb2xsYmFycyApIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5mYWRlVGltZW91dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5mYWRlVGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIHRoaXMub3B0aW9ucy5pbnRlcmFjdGl2ZSApIHtcbiAgICAgICAgICAgICAgICB1dGlscy5yZW1vdmVFdmVudCh0aGlzLmluZGljYXRvciwgJ3RvdWNoc3RhcnQnLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB1dGlscy5yZW1vdmVFdmVudCh0aGlzLmluZGljYXRvciwgdXRpbHMucHJlZml4UG9pbnRlckV2ZW50KCdwb2ludGVyZG93bicpLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB1dGlscy5yZW1vdmVFdmVudCh0aGlzLmluZGljYXRvciwgJ21vdXNlZG93bicsIHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgdXRpbHMucmVtb3ZlRXZlbnQod2luZG93LCAndG91Y2htb3ZlJywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdXRpbHMucmVtb3ZlRXZlbnQod2luZG93LCB1dGlscy5wcmVmaXhQb2ludGVyRXZlbnQoJ3BvaW50ZXJtb3ZlJyksIHRoaXMpO1xuICAgICAgICAgICAgICAgIHV0aWxzLnJlbW92ZUV2ZW50KHdpbmRvdywgJ21vdXNlbW92ZScsIHRoaXMpO1xuXG4gICAgICAgICAgICAgICAgdXRpbHMucmVtb3ZlRXZlbnQod2luZG93LCAndG91Y2hlbmQnLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB1dGlscy5yZW1vdmVFdmVudCh3aW5kb3csIHV0aWxzLnByZWZpeFBvaW50ZXJFdmVudCgncG9pbnRlcnVwJyksIHRoaXMpO1xuICAgICAgICAgICAgICAgIHV0aWxzLnJlbW92ZUV2ZW50KHdpbmRvdywgJ21vdXNldXAnLCB0aGlzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCB0aGlzLm9wdGlvbnMuZGVmYXVsdFNjcm9sbGJhcnMgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53cmFwcGVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy53cmFwcGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBfc3RhcnQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgcG9pbnQgPSBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0gOiBlO1xuXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICB0aGlzLnRyYW5zaXRpb25UaW1lKCk7XG5cbiAgICAgICAgICAgIHRoaXMuaW5pdGlhdGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubW92ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMubGFzdFBvaW50WCA9IHBvaW50LnBhZ2VYO1xuICAgICAgICAgICAgdGhpcy5sYXN0UG9pbnRZID0gcG9pbnQucGFnZVk7XG5cbiAgICAgICAgICAgIHRoaXMuc3RhcnRUaW1lICA9IHV0aWxzLmdldFRpbWUoKTtcblxuICAgICAgICAgICAgaWYgKCAhdGhpcy5vcHRpb25zLmRpc2FibGVUb3VjaCApIHtcbiAgICAgICAgICAgICAgICB1dGlscy5hZGRFdmVudCh3aW5kb3csICd0b3VjaG1vdmUnLCB0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICggIXRoaXMub3B0aW9ucy5kaXNhYmxlUG9pbnRlciApIHtcbiAgICAgICAgICAgICAgICB1dGlscy5hZGRFdmVudCh3aW5kb3csIHV0aWxzLnByZWZpeFBvaW50ZXJFdmVudCgncG9pbnRlcm1vdmUnKSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoICF0aGlzLm9wdGlvbnMuZGlzYWJsZU1vdXNlICkge1xuICAgICAgICAgICAgICAgIHV0aWxzLmFkZEV2ZW50KHdpbmRvdywgJ21vdXNlbW92ZScsIHRoaXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnNjcm9sbGVyLl9leGVjRXZlbnQoJ2JlZm9yZVNjcm9sbFN0YXJ0Jyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgX21vdmU6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICB2YXIgcG9pbnQgPSBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0gOiBlLFxuICAgICAgICAgICAgICAgIGRlbHRhWCwgZGVsdGFZLFxuICAgICAgICAgICAgICAgIG5ld1gsIG5ld1ksXG4gICAgICAgICAgICAgICAgdGltZXN0YW1wID0gdXRpbHMuZ2V0VGltZSgpO1xuXG4gICAgICAgICAgICBpZiAoICF0aGlzLm1vdmVkICkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsZXIuX2V4ZWNFdmVudCgnc2Nyb2xsU3RhcnQnKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5tb3ZlZCA9IHRydWU7XG5cbiAgICAgICAgICAgIGRlbHRhWCA9IHBvaW50LnBhZ2VYIC0gdGhpcy5sYXN0UG9pbnRYO1xuICAgICAgICAgICAgdGhpcy5sYXN0UG9pbnRYID0gcG9pbnQucGFnZVg7XG5cbiAgICAgICAgICAgIGRlbHRhWSA9IHBvaW50LnBhZ2VZIC0gdGhpcy5sYXN0UG9pbnRZO1xuICAgICAgICAgICAgdGhpcy5sYXN0UG9pbnRZID0gcG9pbnQucGFnZVk7XG5cbiAgICAgICAgICAgIG5ld1ggPSB0aGlzLnggKyBkZWx0YVg7XG4gICAgICAgICAgICBuZXdZID0gdGhpcy55ICsgZGVsdGFZO1xuXG4gICAgICAgICAgICB0aGlzLl9wb3MobmV3WCwgbmV3WSk7XG5cbiAgICAvLyBJTlNFUlQgUE9JTlQ6IGluZGljYXRvci5fbW92ZVxuXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9LFxuXG4gICAgICAgIF9lbmQ6IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBpZiAoICF0aGlzLmluaXRpYXRlZCApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuaW5pdGlhdGVkID0gZmFsc2U7XG5cbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICAgIHV0aWxzLnJlbW92ZUV2ZW50KHdpbmRvdywgJ3RvdWNobW92ZScsIHRoaXMpO1xuICAgICAgICAgICAgdXRpbHMucmVtb3ZlRXZlbnQod2luZG93LCB1dGlscy5wcmVmaXhQb2ludGVyRXZlbnQoJ3BvaW50ZXJtb3ZlJyksIHRoaXMpO1xuICAgICAgICAgICAgdXRpbHMucmVtb3ZlRXZlbnQod2luZG93LCAnbW91c2Vtb3ZlJywgdGhpcyk7XG5cbiAgICAgICAgICAgIGlmICggdGhpcy5zY3JvbGxlci5vcHRpb25zLnNuYXAgKSB7XG4gICAgICAgICAgICAgICAgdmFyIHNuYXAgPSB0aGlzLnNjcm9sbGVyLl9uZWFyZXN0U25hcCh0aGlzLnNjcm9sbGVyLngsIHRoaXMuc2Nyb2xsZXIueSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgdGltZSA9IHRoaXMub3B0aW9ucy5zbmFwU3BlZWQgfHwgTWF0aC5tYXgoXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXRoLm1heChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLm1pbihNYXRoLmFicyh0aGlzLnNjcm9sbGVyLnggLSBzbmFwLngpLCAxMDAwKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLm1pbihNYXRoLmFicyh0aGlzLnNjcm9sbGVyLnkgLSBzbmFwLnkpLCAxMDAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSwgMzAwKTtcblxuICAgICAgICAgICAgICAgIGlmICggdGhpcy5zY3JvbGxlci54ICE9IHNuYXAueCB8fCB0aGlzLnNjcm9sbGVyLnkgIT0gc25hcC55ICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbGVyLmRpcmVjdGlvblggPSAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbGVyLmRpcmVjdGlvblkgPSAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbGVyLmN1cnJlbnRQYWdlID0gc25hcDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxlci5zY3JvbGxUbyhzbmFwLngsIHNuYXAueSwgdGltZSwgdGhpcy5zY3JvbGxlci5vcHRpb25zLmJvdW5jZUVhc2luZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIHRoaXMubW92ZWQgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY3JvbGxlci5fZXhlY0V2ZW50KCdzY3JvbGxFbmQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICB0cmFuc2l0aW9uVGltZTogZnVuY3Rpb24gKHRpbWUpIHtcbiAgICAgICAgICAgIHRpbWUgPSB0aW1lIHx8IDA7XG4gICAgICAgICAgICB2YXIgZHVyYXRpb25Qcm9wID0gdXRpbHMuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uO1xuICAgICAgICAgICAgaWYoIWR1cmF0aW9uUHJvcCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5pbmRpY2F0b3JTdHlsZVtkdXJhdGlvblByb3BdID0gdGltZSArICdtcyc7XG5cbiAgICAgICAgICAgIGlmICggIXRpbWUgJiYgdXRpbHMuaXNCYWRBbmRyb2lkICkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kaWNhdG9yU3R5bGVbZHVyYXRpb25Qcm9wXSA9ICcwLjAwMDFtcyc7XG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlIDAuMDAwMW1zXG4gICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICAgICAgICAgIHJBRihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYoc2VsZi5pbmRpY2F0b3JTdHlsZVtkdXJhdGlvblByb3BdID09PSAnMC4wMDAxbXMnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmluZGljYXRvclN0eWxlW2R1cmF0aW9uUHJvcF0gPSAnMHMnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdHJhbnNpdGlvblRpbWluZ0Z1bmN0aW9uOiBmdW5jdGlvbiAoZWFzaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmluZGljYXRvclN0eWxlW3V0aWxzLnN0eWxlLnRyYW5zaXRpb25UaW1pbmdGdW5jdGlvbl0gPSBlYXNpbmc7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVmcmVzaDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy50cmFuc2l0aW9uVGltZSgpO1xuXG4gICAgICAgICAgICBpZiAoIHRoaXMub3B0aW9ucy5saXN0ZW5YICYmICF0aGlzLm9wdGlvbnMubGlzdGVuWSApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluZGljYXRvclN0eWxlLmRpc3BsYXkgPSB0aGlzLnNjcm9sbGVyLmhhc0hvcml6b250YWxTY3JvbGwgPyAnYmxvY2snIDogJ25vbmUnO1xuICAgICAgICAgICAgfSBlbHNlIGlmICggdGhpcy5vcHRpb25zLmxpc3RlblkgJiYgIXRoaXMub3B0aW9ucy5saXN0ZW5YICkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kaWNhdG9yU3R5bGUuZGlzcGxheSA9IHRoaXMuc2Nyb2xsZXIuaGFzVmVydGljYWxTY3JvbGwgPyAnYmxvY2snIDogJ25vbmUnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluZGljYXRvclN0eWxlLmRpc3BsYXkgPSB0aGlzLnNjcm9sbGVyLmhhc0hvcml6b250YWxTY3JvbGwgfHwgdGhpcy5zY3JvbGxlci5oYXNWZXJ0aWNhbFNjcm9sbCA/ICdibG9jaycgOiAnbm9uZSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggdGhpcy5zY3JvbGxlci5oYXNIb3Jpem9udGFsU2Nyb2xsICYmIHRoaXMuc2Nyb2xsZXIuaGFzVmVydGljYWxTY3JvbGwgKSB7XG4gICAgICAgICAgICAgICAgdXRpbHMuYWRkQ2xhc3ModGhpcy53cmFwcGVyLCAnaVNjcm9sbEJvdGhTY3JvbGxiYXJzJyk7XG4gICAgICAgICAgICAgICAgdXRpbHMucmVtb3ZlQ2xhc3ModGhpcy53cmFwcGVyLCAnaVNjcm9sbExvbmVTY3JvbGxiYXInKTtcblxuICAgICAgICAgICAgICAgIGlmICggdGhpcy5vcHRpb25zLmRlZmF1bHRTY3JvbGxiYXJzICYmIHRoaXMub3B0aW9ucy5jdXN0b21TdHlsZSApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB0aGlzLm9wdGlvbnMubGlzdGVuWCApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud3JhcHBlci5zdHlsZS5yaWdodCA9ICc4cHgnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53cmFwcGVyLnN0eWxlLmJvdHRvbSA9ICc4cHgnO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB1dGlscy5yZW1vdmVDbGFzcyh0aGlzLndyYXBwZXIsICdpU2Nyb2xsQm90aFNjcm9sbGJhcnMnKTtcbiAgICAgICAgICAgICAgICB1dGlscy5hZGRDbGFzcyh0aGlzLndyYXBwZXIsICdpU2Nyb2xsTG9uZVNjcm9sbGJhcicpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLm9wdGlvbnMuZGVmYXVsdFNjcm9sbGJhcnMgJiYgdGhpcy5vcHRpb25zLmN1c3RvbVN0eWxlICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXMub3B0aW9ucy5saXN0ZW5YICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy53cmFwcGVyLnN0eWxlLnJpZ2h0ID0gJzJweCc7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndyYXBwZXIuc3R5bGUuYm90dG9tID0gJzJweCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciByID0gdGhpcy53cmFwcGVyLm9mZnNldEhlaWdodDsgIC8vIGZvcmNlIHJlZnJlc2hcblxuICAgICAgICAgICAgaWYgKCB0aGlzLm9wdGlvbnMubGlzdGVuWCApIHtcbiAgICAgICAgICAgICAgICB0aGlzLndyYXBwZXJXaWR0aCA9IHRoaXMud3JhcHBlci5jbGllbnRXaWR0aDtcbiAgICAgICAgICAgICAgICBpZiAoIHRoaXMub3B0aW9ucy5yZXNpemUgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kaWNhdG9yV2lkdGggPSBNYXRoLm1heChNYXRoLnJvdW5kKHRoaXMud3JhcHBlcldpZHRoICogdGhpcy53cmFwcGVyV2lkdGggLyAodGhpcy5zY3JvbGxlci5zY3JvbGxlcldpZHRoIHx8IHRoaXMud3JhcHBlcldpZHRoIHx8IDEpKSwgOCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kaWNhdG9yU3R5bGUud2lkdGggPSB0aGlzLmluZGljYXRvcldpZHRoICsgJ3B4JztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGljYXRvcldpZHRoID0gdGhpcy5pbmRpY2F0b3IuY2xpZW50V2lkdGg7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5tYXhQb3NYID0gdGhpcy53cmFwcGVyV2lkdGggLSB0aGlzLmluZGljYXRvcldpZHRoO1xuXG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLm9wdGlvbnMuc2hyaW5rID09ICdjbGlwJyApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5taW5Cb3VuZGFyeVggPSAtdGhpcy5pbmRpY2F0b3JXaWR0aCArIDg7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWF4Qm91bmRhcnlYID0gdGhpcy53cmFwcGVyV2lkdGggLSA4O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWluQm91bmRhcnlYID0gMDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXhCb3VuZGFyeVggPSB0aGlzLm1heFBvc1g7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5zaXplUmF0aW9YID0gdGhpcy5vcHRpb25zLnNwZWVkUmF0aW9YIHx8ICh0aGlzLnNjcm9sbGVyLm1heFNjcm9sbFggJiYgKHRoaXMubWF4UG9zWCAvIHRoaXMuc2Nyb2xsZXIubWF4U2Nyb2xsWCkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIHRoaXMub3B0aW9ucy5saXN0ZW5ZICkge1xuICAgICAgICAgICAgICAgIHRoaXMud3JhcHBlckhlaWdodCA9IHRoaXMud3JhcHBlci5jbGllbnRIZWlnaHQ7XG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLm9wdGlvbnMucmVzaXplICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGljYXRvckhlaWdodCA9IE1hdGgubWF4KE1hdGgucm91bmQodGhpcy53cmFwcGVySGVpZ2h0ICogdGhpcy53cmFwcGVySGVpZ2h0IC8gKHRoaXMuc2Nyb2xsZXIuc2Nyb2xsZXJIZWlnaHQgfHwgdGhpcy53cmFwcGVySGVpZ2h0IHx8IDEpKSwgOCk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kaWNhdG9yU3R5bGUuaGVpZ2h0ID0gdGhpcy5pbmRpY2F0b3JIZWlnaHQgKyAncHgnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kaWNhdG9ySGVpZ2h0ID0gdGhpcy5pbmRpY2F0b3IuY2xpZW50SGVpZ2h0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMubWF4UG9zWSA9IHRoaXMud3JhcHBlckhlaWdodCAtIHRoaXMuaW5kaWNhdG9ySGVpZ2h0O1xuXG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLm9wdGlvbnMuc2hyaW5rID09ICdjbGlwJyApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5taW5Cb3VuZGFyeVkgPSAtdGhpcy5pbmRpY2F0b3JIZWlnaHQgKyA4O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1heEJvdW5kYXJ5WSA9IHRoaXMud3JhcHBlckhlaWdodCAtIDg7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5taW5Cb3VuZGFyeVkgPSAwO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm1heEJvdW5kYXJ5WSA9IHRoaXMubWF4UG9zWTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aGlzLm1heFBvc1kgPSB0aGlzLndyYXBwZXJIZWlnaHQgLSB0aGlzLmluZGljYXRvckhlaWdodDtcbiAgICAgICAgICAgICAgICB0aGlzLnNpemVSYXRpb1kgPSB0aGlzLm9wdGlvbnMuc3BlZWRSYXRpb1kgfHwgKHRoaXMuc2Nyb2xsZXIubWF4U2Nyb2xsWSAmJiAodGhpcy5tYXhQb3NZIC8gdGhpcy5zY3JvbGxlci5tYXhTY3JvbGxZKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudXBkYXRlUG9zaXRpb24oKTtcbiAgICAgICAgfSxcblxuICAgICAgICB1cGRhdGVQb3NpdGlvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHggPSB0aGlzLm9wdGlvbnMubGlzdGVuWCAmJiBNYXRoLnJvdW5kKHRoaXMuc2l6ZVJhdGlvWCAqIHRoaXMuc2Nyb2xsZXIueCkgfHwgMCxcbiAgICAgICAgICAgICAgICB5ID0gdGhpcy5vcHRpb25zLmxpc3RlblkgJiYgTWF0aC5yb3VuZCh0aGlzLnNpemVSYXRpb1kgKiB0aGlzLnNjcm9sbGVyLnkpIHx8IDA7XG5cbiAgICAgICAgICAgIGlmICggIXRoaXMub3B0aW9ucy5pZ25vcmVCb3VuZGFyaWVzICkge1xuICAgICAgICAgICAgICAgIGlmICggeCA8IHRoaXMubWluQm91bmRhcnlYICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXMub3B0aW9ucy5zaHJpbmsgPT0gJ3NjYWxlJyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2lkdGggPSBNYXRoLm1heCh0aGlzLmluZGljYXRvcldpZHRoICsgeCwgOCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGljYXRvclN0eWxlLndpZHRoID0gdGhpcy53aWR0aCArICdweCc7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgeCA9IHRoaXMubWluQm91bmRhcnlYO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIHggPiB0aGlzLm1heEJvdW5kYXJ5WCApIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCB0aGlzLm9wdGlvbnMuc2hyaW5rID09ICdzY2FsZScgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gTWF0aC5tYXgodGhpcy5pbmRpY2F0b3JXaWR0aCAtICh4IC0gdGhpcy5tYXhQb3NYKSwgOCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGljYXRvclN0eWxlLndpZHRoID0gdGhpcy53aWR0aCArICdweCc7XG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0gdGhpcy5tYXhQb3NYICsgdGhpcy5pbmRpY2F0b3JXaWR0aCAtIHRoaXMud2lkdGg7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB4ID0gdGhpcy5tYXhCb3VuZGFyeVg7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCB0aGlzLm9wdGlvbnMuc2hyaW5rID09ICdzY2FsZScgJiYgdGhpcy53aWR0aCAhPSB0aGlzLmluZGljYXRvcldpZHRoICkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5pbmRpY2F0b3JXaWR0aDtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbmRpY2F0b3JTdHlsZS53aWR0aCA9IHRoaXMud2lkdGggKyAncHgnO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICggeSA8IHRoaXMubWluQm91bmRhcnlZICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXMub3B0aW9ucy5zaHJpbmsgPT0gJ3NjYWxlJyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gTWF0aC5tYXgodGhpcy5pbmRpY2F0b3JIZWlnaHQgKyB5ICogMywgOCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGljYXRvclN0eWxlLmhlaWdodCA9IHRoaXMuaGVpZ2h0ICsgJ3B4JztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB5ID0gdGhpcy5taW5Cb3VuZGFyeVk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICggeSA+IHRoaXMubWF4Qm91bmRhcnlZICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHRoaXMub3B0aW9ucy5zaHJpbmsgPT0gJ3NjYWxlJyApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gTWF0aC5tYXgodGhpcy5pbmRpY2F0b3JIZWlnaHQgLSAoeSAtIHRoaXMubWF4UG9zWSkgKiAzLCA4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kaWNhdG9yU3R5bGUuaGVpZ2h0ID0gdGhpcy5oZWlnaHQgKyAncHgnO1xuICAgICAgICAgICAgICAgICAgICAgICAgeSA9IHRoaXMubWF4UG9zWSArIHRoaXMuaW5kaWNhdG9ySGVpZ2h0IC0gdGhpcy5oZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB5ID0gdGhpcy5tYXhCb3VuZGFyeVk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCB0aGlzLm9wdGlvbnMuc2hyaW5rID09ICdzY2FsZScgJiYgdGhpcy5oZWlnaHQgIT0gdGhpcy5pbmRpY2F0b3JIZWlnaHQgKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5pbmRpY2F0b3JIZWlnaHQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5kaWNhdG9yU3R5bGUuaGVpZ2h0ID0gdGhpcy5oZWlnaHQgKyAncHgnO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy54ID0geDtcbiAgICAgICAgICAgIHRoaXMueSA9IHk7XG5cbiAgICAgICAgICAgIGlmICggdGhpcy5zY3JvbGxlci5vcHRpb25zLnVzZVRyYW5zZm9ybSApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluZGljYXRvclN0eWxlW3V0aWxzLnN0eWxlLnRyYW5zZm9ybV0gPSAndHJhbnNsYXRlKCcgKyB4ICsgJ3B4LCcgKyB5ICsgJ3B4KScgKyB0aGlzLnNjcm9sbGVyLnRyYW5zbGF0ZVo7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kaWNhdG9yU3R5bGUubGVmdCA9IHggKyAncHgnO1xuICAgICAgICAgICAgICAgIHRoaXMuaW5kaWNhdG9yU3R5bGUudG9wID0geSArICdweCc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgX3BvczogZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgICAgIGlmICggeCA8IDAgKSB7XG4gICAgICAgICAgICAgICAgeCA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB4ID4gdGhpcy5tYXhQb3NYICkge1xuICAgICAgICAgICAgICAgIHggPSB0aGlzLm1heFBvc1g7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICggeSA8IDAgKSB7XG4gICAgICAgICAgICAgICAgeSA9IDA7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCB5ID4gdGhpcy5tYXhQb3NZICkge1xuICAgICAgICAgICAgICAgIHkgPSB0aGlzLm1heFBvc1k7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHggPSB0aGlzLm9wdGlvbnMubGlzdGVuWCA/IE1hdGgucm91bmQoeCAvIHRoaXMuc2l6ZVJhdGlvWCkgOiB0aGlzLnNjcm9sbGVyLng7XG4gICAgICAgICAgICB5ID0gdGhpcy5vcHRpb25zLmxpc3RlblkgPyBNYXRoLnJvdW5kKHkgLyB0aGlzLnNpemVSYXRpb1kpIDogdGhpcy5zY3JvbGxlci55O1xuXG4gICAgICAgICAgICB0aGlzLnNjcm9sbGVyLnNjcm9sbFRvKHgsIHkpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZhZGU6IGZ1bmN0aW9uICh2YWwsIGhvbGQpIHtcbiAgICAgICAgICAgIGlmICggaG9sZCAmJiAhdGhpcy52aXNpYmxlICkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZmFkZVRpbWVvdXQpO1xuICAgICAgICAgICAgdGhpcy5mYWRlVGltZW91dCA9IG51bGw7XG5cbiAgICAgICAgICAgIHZhciB0aW1lID0gdmFsID8gMjUwIDogNTAwLFxuICAgICAgICAgICAgICAgIGRlbGF5ID0gdmFsID8gMCA6IDMwMDtcblxuICAgICAgICAgICAgdmFsID0gdmFsID8gJzEnIDogJzAnO1xuXG4gICAgICAgICAgICB0aGlzLndyYXBwZXJTdHlsZVt1dGlscy5zdHlsZS50cmFuc2l0aW9uRHVyYXRpb25dID0gdGltZSArICdtcyc7XG5cbiAgICAgICAgICAgIHRoaXMuZmFkZVRpbWVvdXQgPSBzZXRUaW1lb3V0KChmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53cmFwcGVyU3R5bGUub3BhY2l0eSA9IHZhbDtcbiAgICAgICAgICAgICAgICB0aGlzLnZpc2libGUgPSArdmFsO1xuICAgICAgICAgICAgfSkuYmluZCh0aGlzLCB2YWwpLCBkZWxheSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgSVNjcm9sbC51dGlscyA9IHV0aWxzO1xuXG4gICAgaWYgKCB0eXBlb2YgbW9kdWxlICE9ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzICkge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IElTY3JvbGw7XG4gICAgfSBlbHNlIGlmICggdHlwZW9mIGRlZmluZSA9PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgKSB7XG4gICAgICAgICAgICBkZWZpbmUoIGZ1bmN0aW9uICgpIHsgcmV0dXJuIElTY3JvbGw7IH0gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB3aW5kb3cuSVNjcm9sbCA9IElTY3JvbGw7XG4gICAgfVxuXG4gICAgfSkod2luZG93LCBkb2N1bWVudCwgTWF0aCk7XG5cbiAgICAvKiFcbiAgICAgKiBmdWxsUGFnZSBTY3JvbGxPdmVyZmxvd1xuICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9hbHZhcm90cmlnby9mdWxsUGFnZS5qc1xuICAgICAqIEBsaWNlbnNlIE1JVCBsaWNlbnNlZFxuICAgICAqXG4gICAgICogQ29weXJpZ2h0IChDKSAyMDE1IGFsdmFyb3RyaWdvLmNvbSAtIEEgcHJvamVjdCBieSBBbHZhcm8gVHJpZ29cbiAgICAgKi9cbiAgICAoZnVuY3Rpb24od2luZG93LCAkKSB7XG4gICAgICAgIHZhciBBQ1RJVkUgPSAgICAgICAgICAgICAgICAnYWN0aXZlJztcbiAgICAgICAgdmFyIEFDVElWRV9TRUwgPSAgICAgICAgICAgICcuJyArIEFDVElWRTtcblxuICAgICAgICB2YXIgU0VDVElPTiA9ICAgICAgICAgICAgICAgJ2ZwLXNlY3Rpb24nO1xuICAgICAgICB2YXIgU0VDVElPTl9TRUwgPSAgICAgICAgICAgJy4nICsgU0VDVElPTjtcbiAgICAgICAgdmFyIFNFQ1RJT05fQUNUSVZFX1NFTCA9ICAgIFNFQ1RJT05fU0VMICsgQUNUSVZFX1NFTDtcblxuICAgICAgICB2YXIgU0xJREUgPSAgICAgICAgICAgICAgICAgJ2ZwLXNsaWRlJztcbiAgICAgICAgdmFyIFNMSURFX1NFTCA9ICAgICAgICAgICAgICcuJyArIFNMSURFO1xuICAgICAgICB2YXIgU0xJREVfQUNUSVZFX1NFTCA9ICAgICAgU0xJREVfU0VMICsgQUNUSVZFX1NFTDtcbiAgICAgICAgdmFyIFNMSURFU19XUkFQUEVSID0gICAgICAgICdmcC1zbGlkZXMnO1xuICAgICAgICB2YXIgU0xJREVTX1dSQVBQRVJfU0VMID0gICAgJy4nICsgU0xJREVTX1dSQVBQRVI7XG5cbiAgICAgICAgLy8gc2Nyb2xsb3ZlcmZsb3dcbiAgICAgICAgdmFyIFNDUk9MTEFCTEUgPSAgICAgICAgICAgICdmcC1zY3JvbGxhYmxlJztcbiAgICAgICAgdmFyIFNDUk9MTEFCTEVfU0VMID0gICAgICAgICcuJyArIFNDUk9MTEFCTEU7XG5cbiAgICAgICAgaWYodHlwZW9mIElTY3JvbGwgIT09ICd1bmRlZmluZWQnKXtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAqIFR1cm5zIGlTY3JvbGwgYG1vdXNld2hlZWxgIG9wdGlvbiBvZmYgZHluYW1pY2FsbHlcbiAgICAgICAgICAgICogaHR0cHM6Ly9naXRodWIuY29tL2N1YmlxL2lzY3JvbGwvaXNzdWVzLzEwMzZcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBJU2Nyb2xsLnByb3RvdHlwZS53aGVlbE9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMud3JhcHBlci5hZGRFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMud3JhcHBlci5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXdoZWVsJywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy53cmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoJ0RPTU1vdXNlU2Nyb2xsJywgdGhpcyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKlxuICAgICAgICAgICAgKiBUdXJucyBpU2Nyb2xsIGBtb3VzZXdoZWVsYCBvcHRpb24gb24gZHluYW1pY2FsbHlcbiAgICAgICAgICAgICogaHR0cHM6Ly9naXRodWIuY29tL2N1YmlxL2lzY3JvbGwvaXNzdWVzLzEwMzZcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBJU2Nyb2xsLnByb3RvdHlwZS53aGVlbE9mZiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndyYXBwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignd2hlZWwnLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLndyYXBwZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V3aGVlbCcsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMud3JhcHBlci5yZW1vdmVFdmVudExpc3RlbmVyKCdET01Nb3VzZVNjcm9sbCcsIHRoaXMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBBbiBvYmplY3QgdG8gaGFuZGxlIG92ZXJmbG93IHNjcm9sbGluZy5cbiAgICAgICAgICogVGhpcyB1c2VzIGpxdWVyeS5zbGltU2Nyb2xsIHRvIGFjY29tcGxpc2ggb3ZlcmZsb3cgc2Nyb2xsaW5nLlxuICAgICAgICAgKiBJdCBpcyBwb3NzaWJsZSB0byBwYXNzIGluIGFuIGFsdGVybmF0ZSBzY3JvbGxPdmVyZmxvd0hhbmRsZXJcbiAgICAgICAgICogdG8gdGhlIGZ1bGxwYWdlLmpzIG9wdGlvbiB0aGF0IGltcGxlbWVudHMgdGhlIHNhbWUgZnVuY3Rpb25zXG4gICAgICAgICAqIGFzIHRoaXMgaGFuZGxlci5cbiAgICAgICAgICpcbiAgICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAgICovXG4gICAgICAgIHdpbmRvdy5pc2Nyb2xsSGFuZGxlciA9IHtcbiAgICAgICAgICAgIHJlZnJlc2hJZDogbnVsbCxcbiAgICAgICAgICAgIGlTY3JvbGxJbnN0YW5jZXM6IFtdLFxuXG4gICAgICAgICAgICAvLyBFbmFibGVzIG9yIGRpc2FibGVzIHRoZSBtb3VzZSB3aGVlbCBmb3IgdGhlIGFjdGl2ZSBzZWN0aW9uIG9yIGFsbCBzbGlkZXMgaW4gaXRcbiAgICAgICAgICAgIHRvZ2dsZVdoZWVsOiBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgICAgICAgICAgdmFyIHNjcm9sbGFibGUgPSAkKFNFQ1RJT05fQUNUSVZFX1NFTCkuZmluZChTQ1JPTExBQkxFX1NFTCk7XG4gICAgICAgICAgICAgICAgc2Nyb2xsYWJsZS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpU2Nyb2xsSW5zdGFuY2UgPSAkKHRoaXMpLmRhdGEoJ2lzY3JvbGxJbnN0YW5jZScpO1xuICAgICAgICAgICAgICAgICAgICBpZih0eXBlb2YgaVNjcm9sbEluc3RhbmNlICE9PSAndW5kZWZpbmVkJyAmJiBpU2Nyb2xsSW5zdGFuY2Upe1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYodmFsdWUpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlTY3JvbGxJbnN0YW5jZS53aGVlbE9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlTY3JvbGxJbnN0YW5jZS53aGVlbE9mZigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICogVHVybnMgb2ZmIGlTY3JvbGwgZm9yIHRoZSBkZXN0aW5hdGlvbiBzZWN0aW9uLlxuICAgICAgICAgICAgKiBXaGVuIHNjcm9sbGluZyB2ZXJ5IGZhc3Qgb24gc29tZSB0cmFja3BhZHMgKGFuZCBBcHBsZSBsYXB0b3BzKSB0aGUgaW5lcnRpYWwgc2Nyb2xsaW5nIHdvdWxkXG4gICAgICAgICAgICAqIHNjcm9sbCB0aGUgZGVzdGluYXRpb24gc2VjdGlvbi9zbGlkZSBiZWZvcmUgdGhlIHNlY3Rpb25zIGFuaW1hdGlvbnMgZW5kcy5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICBvbkxlYXZlOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgIGlzY3JvbGxIYW5kbGVyLnRvZ2dsZVdoZWVsKGZhbHNlKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vIFR1cm5zIG9mZiBpU2Nyb2xsIGZvciB0aGUgbGVhdmluZyBzZWN0aW9uXG4gICAgICAgICAgICBiZWZvcmVMZWF2ZTogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICBpc2Nyb2xsSGFuZGxlci5vbkxlYXZlKClcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8vIFR1cm5zIG9uIGlTY3JvbGwgb24gc2VjdGlvbiBsb2FkXG4gICAgICAgICAgICBhZnRlckxvYWQ6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgaXNjcm9sbEhhbmRsZXIudG9nZ2xlV2hlZWwodHJ1ZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIG92ZXJmbG93IHNjcm9sbGluZyBpcyBuZWVkZWQgZm9yIGEgc2VjdGlvbi5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGVsZW1lbnQgICAgICBqUXVlcnkgb2JqZWN0IGNvbnRhaW5pbmcgY3VycmVudCBzZWN0aW9uXG4gICAgICAgICAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHNjcm9sbEhlaWdodCBDdXJyZW50IHdpbmRvdyBoZWlnaHQgaW4gcGl4ZWxzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGNyZWF0ZTogZnVuY3Rpb24oZWxlbWVudCwgc2Nyb2xsSGVpZ2h0LCBzY3JvbGxPdmVyZmxvd09wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsYWJsZSA9IGVsZW1lbnQuZmluZChTQ1JPTExBQkxFX1NFTCk7XG5cbiAgICAgICAgICAgICAgICBzY3JvbGxhYmxlLmhlaWdodChzY3JvbGxIZWlnaHQpO1xuICAgICAgICAgICAgICAgIHNjcm9sbGFibGUuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyICR0aGlzID0gJCh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlTY3JvbGxJbnN0YW5jZSA9ICR0aGlzLmRhdGEoJ2lzY3JvbGxJbnN0YW5jZScpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoaVNjcm9sbEluc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goaXNjcm9sbEhhbmRsZXIuaVNjcm9sbEluc3RhbmNlcywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaVNjcm9sbEluc3RhbmNlID0gbmV3IElTY3JvbGwoJHRoaXMuZ2V0KDApLCBzY3JvbGxPdmVyZmxvd09wdGlvbnMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlTY3JvbGxJbnN0YW5jZS5vbignc2Nyb2xsRW5kJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzWydmcF9pc0F0VG9wJ10gPSB0aGlzLnkgPiAtMzA7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzWydmcF9pc0F0RW5kJ10gPSB0aGlzLnkgLSB0aGlzLm1heFNjcm9sbFkgPCAzMDtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaXNjcm9sbEhhbmRsZXIuaVNjcm9sbEluc3RhbmNlcy5wdXNoKGlTY3JvbGxJbnN0YW5jZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy9vZmYgYnkgZGVmYXVsdCB1bnRpbCB0aGUgc2VjdGlvbiBnZXRzIGFjdGl2ZVxuICAgICAgICAgICAgICAgICAgICBpU2Nyb2xsSW5zdGFuY2Uud2hlZWxPZmYoKTtcblxuICAgICAgICAgICAgICAgICAgICAkdGhpcy5kYXRhKCdpc2Nyb2xsSW5zdGFuY2UnLCBpU2Nyb2xsSW5zdGFuY2UpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm4gYSBib29sZWFuIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBzY3JvbGxhYmxlIGVsZW1lbnQgaXMgYVxuICAgICAgICAgICAgICogdGhlIGVuZCBvciBhdCB0aGUgc3RhcnQgb2YgdGhlIHNjcm9sbGluZyBkZXBlbmRpbmcgb24gdGhlIGdpdmVuIHR5cGUuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICB7U3RyaW5nfSAgdHlwZSAgICAgICBFaXRoZXIgJ3RvcCcgb3IgJ2JvdHRvbSdcbiAgICAgICAgICAgICAqIEBwYXJhbSAge09iamVjdH0gIHNjcm9sbGFibGUgalF1ZXJ5IG9iamVjdCBmb3IgdGhlIHNjcm9sbGFibGUgZWxlbWVudFxuICAgICAgICAgICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgaXNTY3JvbGxlZDogZnVuY3Rpb24odHlwZSwgc2Nyb2xsYWJsZSkge1xuICAgICAgICAgICAgICAgIHZhciBzY3JvbGxlciA9IHNjcm9sbGFibGUuZGF0YSgnaXNjcm9sbEluc3RhbmNlJyk7XG5cbiAgICAgICAgICAgICAgICAvL25vIHNjcm9sbGVyP1xuICAgICAgICAgICAgICAgIGlmICghc2Nyb2xsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICd0b3AnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzY3JvbGxlci55ID49IDAgJiYgIXNjcm9sbGFibGUuc2Nyb2xsVG9wKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnYm90dG9tJykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDAgLSBzY3JvbGxlci55KSArIHNjcm9sbGFibGUuc2Nyb2xsVG9wKCkgKyAxICsgc2Nyb2xsYWJsZS5pbm5lckhlaWdodCgpID49IHNjcm9sbGFibGVbMF0uc2Nyb2xsSGVpZ2h0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmV0dXJucyB0aGUgc2Nyb2xsYWJsZSBlbGVtZW50IGZvciB0aGUgZ2l2ZW4gc2VjdGlvbi5cbiAgICAgICAgICAgICAqIElmIHRoZXJlIGFyZSBsYW5kc2NhcGUgc2xpZGVzLCB3aWxsIG9ubHkgcmV0dXJuIGEgc2Nyb2xsYWJsZSBlbGVtZW50XG4gICAgICAgICAgICAgKiBpZiBpdCBpcyBpbiB0aGUgYWN0aXZlIHNsaWRlLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBwYXJhbSAge09iamVjdH0gIGFjdGl2ZVNlY3Rpb24galF1ZXJ5IG9iamVjdCBjb250YWluaW5nIGN1cnJlbnQgc2VjdGlvblxuICAgICAgICAgICAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc2Nyb2xsYWJsZTogZnVuY3Rpb24oYWN0aXZlU2VjdGlvbil7XG4gICAgICAgICAgICAgICAgLy8gaWYgdGhlcmUgYXJlIGxhbmRzY2FwZSBzbGlkZXMsIHdlIGNoZWNrIGlmIHRoZSBzY3JvbGxpbmcgYmFyIGlzIGluIHRoZSBjdXJyZW50IG9uZSBvciBub3RcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlU2VjdGlvbi5maW5kKFNMSURFU19XUkFQUEVSX1NFTCkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhY3RpdmVTZWN0aW9uLmZpbmQoU0xJREVfQUNUSVZFX1NFTCkuZmluZChTQ1JPTExBQkxFX1NFTCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBhY3RpdmVTZWN0aW9uLmZpbmQoU0NST0xMQUJMRV9TRUwpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBzY3JvbGwgaGVpZ2h0IG9mIHRoZSB3cmFwcGVkIGNvbnRlbnQuXG4gICAgICAgICAgICAgKiBJZiB0aGlzIGlzIGxhcmdlciB0aGFuIHRoZSB3aW5kb3cgaGVpZ2h0IG1pbnVzIHNlY3Rpb24gcGFkZGluZyxcbiAgICAgICAgICAgICAqIG92ZXJmbG93IHNjcm9sbGluZyBpcyBuZWVkZWQuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICB7T2JqZWN0fSBlbGVtZW50IGpRdWVyeSBvYmplY3QgY29udGFpbmluZyBjdXJyZW50IHNlY3Rpb25cbiAgICAgICAgICAgICAqIEByZXR1cm4ge051bWJlcn1cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgc2Nyb2xsSGVpZ2h0OiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQuZmluZChTQ1JPTExBQkxFX1NFTCkuY2hpbGRyZW4oKS5maXJzdCgpLmdldCgwKS5zY3JvbGxIZWlnaHQ7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIG92ZXJmbG93IHNjcm9sbGluZyBpcyBubyBsb25nZXIgbmVlZGVkIGZvciBhIHNlY3Rpb24uXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogQHBhcmFtICB7T2JqZWN0fSBlbGVtZW50ICAgICAgalF1ZXJ5IG9iamVjdCBjb250YWluaW5nIGN1cnJlbnQgc2VjdGlvblxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICByZW1vdmU6IGZ1bmN0aW9uKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsYWJsZSA9IGVsZW1lbnQuZmluZChTQ1JPTExBQkxFX1NFTCk7XG4gICAgICAgICAgICAgICAgaWYgKHNjcm9sbGFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpU2Nyb2xsSW5zdGFuY2UgPSBzY3JvbGxhYmxlLmRhdGEoJ2lzY3JvbGxJbnN0YW5jZScpO1xuICAgICAgICAgICAgICAgICAgICBpZihpU2Nyb2xsSW5zdGFuY2Upe1xuICAgICAgICAgICAgICAgICAgICAgICAgaVNjcm9sbEluc3RhbmNlLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbGFibGUuZGF0YSgnaXNjcm9sbEluc3RhbmNlJywgbnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsZW1lbnQuZmluZChTQ1JPTExBQkxFX1NFTCkuY2hpbGRyZW4oKS5maXJzdCgpLmNoaWxkcmVuKCkuZmlyc3QoKS51bndyYXAoKS51bndyYXAoKTtcbiAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gb3ZlcmZsb3cgc2Nyb2xsaW5nIGhhcyBhbHJlYWR5IGJlZW4gc2V0dXAgYnV0IHRoZVxuICAgICAgICAgICAgICogd2luZG93IGhlaWdodCBoYXMgcG90ZW50aWFsbHkgY2hhbmdlZC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGVsZW1lbnQgICAgICBqUXVlcnkgb2JqZWN0IGNvbnRhaW5pbmcgY3VycmVudCBzZWN0aW9uXG4gICAgICAgICAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHNjcm9sbEhlaWdodCBDdXJyZW50IHdpbmRvdyBoZWlnaHQgaW4gcGl4ZWxzXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgLy91c2luZyBhIHRpbWVvdXQgaW4gb3JkZXIgdG8gZXhlY3V0ZSB0aGUgcmVmcmVzaCBmdW5jdGlvbiBvbmx5IG9uY2Ugd2hlbiBgdXBkYXRlYCBpcyBjYWxsZWQgbXVsdGlwbGUgdGltZXMgaW4gYVxuICAgICAgICAgICAgICAgIC8vc2hvcnQgcGVyaW9kIG9mIHRpbWUuXG4gICAgICAgICAgICAgICAgLy9pdCBhbHNvIGNvbWVzIG9uIGhhbmR5IGJlY2F1c2UgaVNjcm9sbCByZXF1aXJlcyB0aGUgdXNlIG9mIHRpbWVvdXQgd2hlbiB1c2luZyBgcmVmcmVzaGAuXG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGlzY3JvbGxIYW5kbGVyLnJlZnJlc2hJZCk7XG4gICAgICAgICAgICAgICAgaXNjcm9sbEhhbmRsZXIucmVmcmVzaElkID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAkLmVhY2goaXNjcm9sbEhhbmRsZXIuaVNjcm9sbEluc3RhbmNlcywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuZ2V0KDApLnJlZnJlc2goKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgMTUwKTtcblxuICAgICAgICAgICAgICAgIC8vdXBkYXRpbmcgdGhlIHdyYXBwZXJzIGhlaWdodFxuICAgICAgICAgICAgICAgIGVsZW1lbnQuZmluZChTQ1JPTExBQkxFX1NFTCkuY3NzKCdoZWlnaHQnLCBzY3JvbGxIZWlnaHQgKyAncHgnKS5wYXJlbnQoKS5jc3MoJ2hlaWdodCcsIHNjcm9sbEhlaWdodCArICdweCcpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDYWxsZWQgdG8gZ2V0IGFueSBhZGRpdGlvbmFsIGVsZW1lbnRzIG5lZWRlZCB0byB3cmFwIHRoZSBzZWN0aW9uXG4gICAgICAgICAgICAgKiBjb250ZW50IGluIG9yZGVyIHRvIGZhY2lsaXRhdGUgb3ZlcmZsb3cgc2Nyb2xsaW5nLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEByZXR1cm4ge1N0cmluZ3xPYmplY3R9IENhbiBiZSBhIHN0cmluZyBjb250YWluaW5nIEhUTUwsXG4gICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBhIERPTSBlbGVtZW50LCBvciBqUXVlcnkgb2JqZWN0LlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB3cmFwQ29udGVudDogZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICc8ZGl2IGNsYXNzPVwiJyArIFNDUk9MTEFCTEUgKyAnXCI+PGRpdiBjbGFzcz1cImZwLXNjcm9sbGVyXCI+PC9kaXY+PC9kaXY+JztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KSh3aW5kb3csIGpRdWVyeSk7XG5cblxuICAgIC8vIHNjcm9sbG92ZXJmbG93IG1vZHVsZVxuICAgIChmdW5jdGlvbiAod2luZG93LCBkb2N1bWVudCwgJCkge1xuICAgICAgICAkLmZuLmZwX3Njcm9sbG92ZXJmbG93ID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAvLyBrZWVwaW5nIGNlbnRyYWwgc2V0IG9mIGNsYXNzbmFtZXMgYW5kIHNlbGVjdG9yc1xuICAgICAgICAgICAgdmFyIFNDUk9MTEFCTEUgPSAgICAgICAgICAgICdmcC1zY3JvbGxhYmxlJztcbiAgICAgICAgICAgIHZhciBTQ1JPTExBQkxFX1NFTCA9ICAgICAgICAnLicgKyBTQ1JPTExBQkxFO1xuXG4gICAgICAgICAgICB2YXIgQUNUSVZFID0gICAgICAgICAgICAgICAgJ2FjdGl2ZSc7XG4gICAgICAgICAgICB2YXIgQUNUSVZFX1NFTCA9ICAgICAgICAgICAgJy4nICsgQUNUSVZFO1xuXG4gICAgICAgICAgICB2YXIgU0VDVElPTiA9ICAgICAgICAgICAgICAgJ2ZwLXNlY3Rpb24nO1xuICAgICAgICAgICAgdmFyIFNFQ1RJT05fU0VMID0gICAgICAgICAgICcuJyArIFNFQ1RJT047XG4gICAgICAgICAgICB2YXIgU0VDVElPTl9BQ1RJVkVfU0VMID0gICAgU0VDVElPTl9TRUwgKyBBQ1RJVkVfU0VMO1xuXG4gICAgICAgICAgICB2YXIgU0xJREUgPSAgICAgICAgICAgICAgICAgJ2ZwLXNsaWRlJztcbiAgICAgICAgICAgIHZhciBTTElERV9TRUwgPSAgICAgICAgICAgICAnLicgKyBTTElERTtcbiAgICAgICAgICAgIHZhciBTTElERV9BQ1RJVkVfU0VMID0gICAgICBTTElERV9TRUwgKyBBQ1RJVkVfU0VMO1xuXG4gICAgICAgICAgICB2YXIgU0xJREVTX1dSQVBQRVIgPSAgICAgICAgJ2ZwLXNsaWRlcyc7XG4gICAgICAgICAgICB2YXIgU0xJREVTX1dSQVBQRVJfU0VMID0gICAgJy4nICsgU0xJREVTX1dSQVBQRVI7XG5cbiAgICAgICAgICAgIHZhciBUQUJMRV9DRUxMID0gICAgICAgICAgICAnZnAtdGFibGVDZWxsJztcbiAgICAgICAgICAgIHZhciBUQUJMRV9DRUxMX1NFTCA9ICAgICAgICAnLicgKyBUQUJMRV9DRUxMO1xuXG4gICAgICAgICAgICB2YXIgUkVTUE9OU0lWRSA9ICAgICAgICAgICAgJ2ZwLXJlc3BvbnNpdmUnO1xuICAgICAgICAgICAgdmFyIEFVVE9fSEVJR0hUX1JFU1BPTlNJVkU9ICdmcC1hdXRvLWhlaWdodC1yZXNwb25zaXZlJztcblxuICAgICAgICAgICAgLypcbiAgICAgICAgICAgICogVHVybnMgaVNjcm9sbCBgbW91c2V3aGVlbGAgb3B0aW9uIG9mZiBkeW5hbWljYWxseVxuICAgICAgICAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vY3ViaXEvaXNjcm9sbC9pc3N1ZXMvMTAzNlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIElTY3JvbGwucHJvdG90eXBlLndoZWVsT24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdGhpcy53cmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoJ3doZWVsJywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy53cmFwcGVyLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNld2hlZWwnLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB0aGlzLndyYXBwZXIuYWRkRXZlbnRMaXN0ZW5lcignRE9NTW91c2VTY3JvbGwnLCB0aGlzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAqIFR1cm5zIGlTY3JvbGwgYG1vdXNld2hlZWxgIG9wdGlvbiBvbiBkeW5hbWljYWxseVxuICAgICAgICAgICAgKiBodHRwczovL2dpdGh1Yi5jb20vY3ViaXEvaXNjcm9sbC9pc3N1ZXMvMTAzNlxuICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIElTY3JvbGwucHJvdG90eXBlLndoZWVsT2ZmID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHRoaXMud3JhcHBlci5yZW1vdmVFdmVudExpc3RlbmVyKCd3aGVlbCcsIHRoaXMpO1xuICAgICAgICAgICAgICAgIHRoaXMud3JhcHBlci5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXdoZWVsJywgdGhpcyk7XG4gICAgICAgICAgICAgICAgdGhpcy53cmFwcGVyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ0RPTU1vdXNlU2Nyb2xsJywgdGhpcyk7XG4gICAgICAgICAgICB9O1xuXG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIHNjcm9sbEJhckhhbmRsZXIoKXtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgICAgICAgICAgc2VsZi5vcHRpb25zID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIHNlbGYuaW5pdCA9IGZ1bmN0aW9uKG9wdGlvbnMsIGlzY3JvbGxPcHRpb25zKXtcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5pc2Nyb2xsT3B0aW9ucyA9IGlzY3JvbGxPcHRpb25zO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlU2Nyb2xsQmFyRm9yQWxsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAkLmZuLmZ1bGxwYWdlLnNoYXJlZC5hZnRlclJlbmRlckFjdGlvbnMoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvL2FmdGVyIERPTSBhbmQgaW1hZ2VzIGFyZSBsb2FkZWRcbiAgICAgICAgICAgICAgICAgICAgJCh3aW5kb3cpLm9uKCdsb2FkJywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZVNjcm9sbEJhckZvckFsbCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgJC5mbi5mdWxscGFnZS5zaGFyZWQuYWZ0ZXJSZW5kZXJBY3Rpb25zKCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmO1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIENyZWF0ZXMgdGhlIHNjcm9sbGJhciBmb3IgdGhlIHNlY3Rpb25zIGFuZCBzbGlkZXMgaW4gdGhlIHNpdGVcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVNjcm9sbEJhckZvckFsbCgpe1xuICAgICAgICAgICAgICAgICAgICBpZigkKCdib2R5JykuaGFzQ2xhc3MoUkVTUE9OU0lWRSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlUmVzcG9uc2l2ZVNjcm9sbE92ZXJmbG93cygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JFYWNoU2VjdGlvbkFuZFNsaWRlKGNyZWF0ZVNjcm9sbEJhcik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIENoZWNrcyBpZiB0aGUgZWxlbWVudCBuZWVkcyBzY3JvbGxiYXIgYW5kIGlmIHRoZSB1c2VyIHdhbnRzIHRvIGFwcGx5IGl0LlxuICAgICAgICAgICAgICAgICogSWYgc28gaXQgY3JlYXRlcyBpdC5cbiAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAgIGpRdWVyeSBvYmplY3Qgb2YgdGhlIHNlY3Rpb24gb3Igc2xpZGVcbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVNjcm9sbEJhcihlbGVtZW50KXtcbiAgICAgICAgICAgICAgICAgICAgLy9Vc2VyIGRvZXNuJ3Qgd2FudCBzY3JvbGxiYXIgaGVyZT8gU2F5b25hcmEgYmFieSFcbiAgICAgICAgICAgICAgICAgICAgaWYoZWxlbWVudC5oYXNDbGFzcygnZnAtbm9zY3JvbGwnKSkgcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vbmVjZXNzYXJ5IHRvIG1ha2UgYHNjcm9sbEhlaWdodGAgd29yayB1bmRlciBPcGVyYSAxMlxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmNzcygnb3ZlcmZsb3cnLCAnaGlkZGVuJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbE92ZXJmbG93SGFuZGxlciA9IHNlbGYub3B0aW9ucy5zY3JvbGxPdmVyZmxvd0hhbmRsZXI7XG4gICAgICAgICAgICAgICAgICAgIHZhciB3cmFwID0gc2Nyb2xsT3ZlcmZsb3dIYW5kbGVyLndyYXBDb250ZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWN0aW9uID0gZWxlbWVudC5jbG9zZXN0KFNFQ1RJT05fU0VMKTsgLy9pbiBjYXNlIGVsZW1lbnQgaXMgYSBzbGlkZVxuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsYWJsZSA9IHNjcm9sbE92ZXJmbG93SGFuZGxlci5zY3JvbGxhYmxlKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29udGVudEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhZGRpbmdzID0gcGFyc2VJbnQoc2VjdGlvbi5jc3MoJ3BhZGRpbmctYm90dG9tJykpICsgcGFyc2VJbnQoc2VjdGlvbi5jc3MoJ3BhZGRpbmctdG9wJykpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgdGhlcmUgd2FzIHNjcm9sbCwgdGhlIGNvbnRlbnRIZWlnaHQgd2lsbCBiZSB0aGUgb25lIGluIHRoZSBzY3JvbGxhYmxlIHNlY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgaWYoc2Nyb2xsYWJsZS5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudEhlaWdodCA9IHNjcm9sbE92ZXJmbG93SGFuZGxlci5zY3JvbGxIZWlnaHQoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnRIZWlnaHQgPSBlbGVtZW50LmdldCgwKS5zY3JvbGxIZWlnaHQgLSBwYWRkaW5ncztcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNlbGYub3B0aW9ucy52ZXJ0aWNhbENlbnRlcmVkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50SGVpZ2h0ID0gZWxlbWVudC5maW5kKFRBQkxFX0NFTExfU0VMKS5nZXQoMCkuc2Nyb2xsSGVpZ2h0IC0gcGFkZGluZ3M7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsSGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpIC0gcGFkZGluZ3M7XG5cbiAgICAgICAgICAgICAgICAgICAgLy9uZWVkcyBzY3JvbGw/XG4gICAgICAgICAgICAgICAgICAgIGlmICggY29udGVudEhlaWdodCA+IHNjcm9sbEhlaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy9kaWQgd2UgYWxyZWFkeSBoYXZlIGFuIHNjcm9sbGJhciA/IFVwZGF0aW5nIGl0XG4gICAgICAgICAgICAgICAgICAgICAgICBpZihzY3JvbGxhYmxlLmxlbmd0aCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsT3ZlcmZsb3dIYW5kbGVyLnVwZGF0ZShlbGVtZW50LCBzY3JvbGxIZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jcmVhdGluZyB0aGUgc2Nyb2xsaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNle1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNlbGYub3B0aW9ucy52ZXJ0aWNhbENlbnRlcmVkKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5maW5kKFRBQkxFX0NFTExfU0VMKS53cmFwSW5uZXIod3JhcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQud3JhcElubmVyKHdyYXApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxPdmVyZmxvd0hhbmRsZXIuY3JlYXRlKGVsZW1lbnQsIHNjcm9sbEhlaWdodCwgc2VsZi5pc2Nyb2xsT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy9yZW1vdmluZyB0aGUgc2Nyb2xsaW5nIHdoZW4gaXQgaXMgbm90IG5lY2Vzc2FyeSBhbnltb3JlXG4gICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxPdmVyZmxvd0hhbmRsZXIucmVtb3ZlKGVsZW1lbnQpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy91bmRvXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY3NzKCdvdmVyZmxvdycsICcnKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAqIEFwcGxpZXMgYSBjYWxsYmFjayBmdW5jdGlvbiB0byBlYWNoIHNlY3Rpb24gaW4gdGhlIHNpdGVcbiAgICAgICAgICAgICAgICAqIG9yIHRoZSBzbGlkZXMgd2l0aGluIHRoZW1cbiAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZvckVhY2hTZWN0aW9uQW5kU2xpZGUoY2FsbGJhY2spe1xuICAgICAgICAgICAgICAgICAgICAkKFNFQ1RJT05fU0VMKS5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2xpZGVzID0gJCh0aGlzKS5maW5kKFNMSURFX1NFTCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHNsaWRlcy5sZW5ndGgpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNsaWRlcy5lYWNoKGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCQodGhpcykpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soJCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICogUmVtb3ZlcyBzY3JvbGxPdmVyZmxvdyBmb3Igc2VjdGlvbnMgdXNpbmcgdGhlIGNsYXNzIGBmcC1hdXRvLWhlaWdodC1yZXNwb25zaXZlYFxuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVtb3ZlUmVzcG9uc2l2ZVNjcm9sbE92ZXJmbG93cygpe1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsT3ZlcmZsb3dIYW5kbGVyID0gc2VsZi5vcHRpb25zLnNjcm9sbE92ZXJmbG93SGFuZGxlcjtcbiAgICAgICAgICAgICAgICAgICAgZm9yRWFjaFNlY3Rpb25BbmRTbGlkZShmdW5jdGlvbihlbGVtZW50KXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmKGVsZW1lbnQuY2xvc2VzdChTRUNUSU9OX1NFTCkuaGFzQ2xhc3MoQVVUT19IRUlHSFRfUkVTUE9OU0lWRSkpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbE92ZXJmbG93SGFuZGxlci5yZW1vdmUoZWxlbWVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vcHVibGljIGZ1bmN0aW9uc1xuICAgICAgICAgICAgICAgIHNlbGYuY3JlYXRlU2Nyb2xsQmFyRm9yQWxsID0gY3JlYXRlU2Nyb2xsQmFyRm9yQWxsO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEFuIG9iamVjdCB0byBoYW5kbGUgb3ZlcmZsb3cgc2Nyb2xsaW5nLlxuICAgICAgICAgICAgICogVGhpcyB1c2VzIGpxdWVyeS5zbGltU2Nyb2xsIHRvIGFjY29tcGxpc2ggb3ZlcmZsb3cgc2Nyb2xsaW5nLlxuICAgICAgICAgICAgICogSXQgaXMgcG9zc2libGUgdG8gcGFzcyBpbiBhbiBhbHRlcm5hdGUgc2Nyb2xsT3ZlcmZsb3dIYW5kbGVyXG4gICAgICAgICAgICAgKiB0byB0aGUgZnVsbHBhZ2UuanMgb3B0aW9uIHRoYXQgaW1wbGVtZW50cyB0aGUgc2FtZSBmdW5jdGlvbnNcbiAgICAgICAgICAgICAqIGFzIHRoaXMgaGFuZGxlci5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB2YXIgaXNjcm9sbEhhbmRsZXIgPSB7XG4gICAgICAgICAgICAgICAgcmVmcmVzaElkOiBudWxsLFxuICAgICAgICAgICAgICAgIGlTY3JvbGxJbnN0YW5jZXM6IFtdLFxuXG4gICAgICAgICAgICAgICAgLy8gRGVmYXVsdCBvcHRpb25zIGZvciBpU2Nyb2xsLmpzIHVzZWQgd2hlbiB1c2luZyBzY3JvbGxPdmVyZmxvd1xuICAgICAgICAgICAgICAgIGlzY3JvbGxPcHRpb25zOiB7XG4gICAgICAgICAgICAgICAgICAgIHNjcm9sbGJhcnM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIG1vdXNlV2hlZWw6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGhpZGVTY3JvbGxiYXJzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZmFkZVNjcm9sbGJhcnM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlTW91c2U6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGludGVyYWN0aXZlU2Nyb2xsYmFyczogdHJ1ZVxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICBpbml0OiBmdW5jdGlvbihvcHRpb25zKXtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGlzVG91Y2ggPSAoKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdykgfHwgKG5hdmlnYXRvci5tc01heFRvdWNoUG9pbnRzID4gMCkgfHwgKG5hdmlnYXRvci5tYXhUb3VjaFBvaW50cykpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vZml4aW5nIGJ1ZyBpbiBpU2Nyb2xsIHdpdGggbGlua3M6IGh0dHBzOi8vZ2l0aHViLmNvbS9jdWJpcS9pc2Nyb2xsL2lzc3Vlcy83ODNcbiAgICAgICAgICAgICAgICAgICAgaXNjcm9sbEhhbmRsZXIuaXNjcm9sbE9wdGlvbnMuY2xpY2sgPSBpc1RvdWNoOyAvLyBzZWUgIzIwMzVcblxuICAgICAgICAgICAgICAgICAgICAvL2V4dGVuZGluZyBpU2Nyb2xsIG9wdGlvbnMgd2l0aCB0aGUgdXNlciBjdXN0b20gb25lc1xuICAgICAgICAgICAgICAgICAgICBpc2Nyb2xsSGFuZGxlci5pc2Nyb2xsT3B0aW9ucyA9ICQuZXh0ZW5kKGlzY3JvbGxIYW5kbGVyLmlzY3JvbGxPcHRpb25zLCBvcHRpb25zLnNjcm9sbE92ZXJmbG93T3B0aW9ucyk7XG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBzY3JvbGxCYXJIYW5kbGVyKCkuaW5pdChvcHRpb25zLCBpc2Nyb2xsSGFuZGxlci5pc2Nyb2xsT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIC8vIEVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIG1vdXNlIHdoZWVsIGZvciB0aGUgYWN0aXZlIHNlY3Rpb24gb3IgYWxsIHNsaWRlcyBpbiBpdFxuICAgICAgICAgICAgICAgIHRvZ2dsZVdoZWVsOiBmdW5jdGlvbih2YWx1ZSl7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxhYmxlID0gJChTRUNUSU9OX0FDVElWRV9TRUwpLmZpbmQoU0NST0xMQUJMRV9TRUwpO1xuICAgICAgICAgICAgICAgICAgICBzY3JvbGxhYmxlLmVhY2goZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpU2Nyb2xsSW5zdGFuY2UgPSAkKHRoaXMpLmRhdGEoJ2lzY3JvbGxJbnN0YW5jZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYodHlwZW9mIGlTY3JvbGxJbnN0YW5jZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaVNjcm9sbEluc3RhbmNlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZih2YWx1ZSl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlTY3JvbGxJbnN0YW5jZS53aGVlbE9uKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2V7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlTY3JvbGxJbnN0YW5jZS5zY3JvbGxUbygwLCAwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaVNjcm9sbEluc3RhbmNlLndoZWVsT2ZmKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgKiBUdXJucyBvZmYgaVNjcm9sbCBmb3IgdGhlIGRlc3RpbmF0aW9uIHNlY3Rpb24uXG4gICAgICAgICAgICAgICAgKiBXaGVuIHNjcm9sbGluZyB2ZXJ5IGZhc3Qgb24gc29tZSB0cmFja3BhZHMgKGFuZCBBcHBsZSBsYXB0b3BzKSB0aGUgaW5lcnRpYWwgc2Nyb2xsaW5nIHdvdWxkXG4gICAgICAgICAgICAgICAgKiBzY3JvbGwgdGhlIGRlc3RpbmF0aW9uIHNlY3Rpb24vc2xpZGUgYmVmb3JlIHRoZSBzZWN0aW9ucyBhbmltYXRpb25zIGVuZHMuXG4gICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBvbkxlYXZlOiBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICBpc2Nyb2xsSGFuZGxlci50b2dnbGVXaGVlbChmYWxzZSk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIC8vIFR1cm5zIG9mZiBpU2Nyb2xsIGZvciB0aGUgbGVhdmluZyBzZWN0aW9uXG4gICAgICAgICAgICAgICAgYmVmb3JlTGVhdmU6IGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgIGlzY3JvbGxIYW5kbGVyLm9uTGVhdmUoKVxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAvLyBUdXJucyBvbiBpU2Nyb2xsIG9uIHNlY3Rpb24gbG9hZFxuICAgICAgICAgICAgICAgIGFmdGVyTG9hZDogZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgaXNjcm9sbEhhbmRsZXIudG9nZ2xlV2hlZWwodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIENhbGxlZCB3aGVuIG92ZXJmbG93IHNjcm9sbGluZyBpcyBuZWVkZWQgZm9yIGEgc2VjdGlvbi5cbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSAge09iamVjdH0gZWxlbWVudCAgICAgIGpRdWVyeSBvYmplY3QgY29udGFpbmluZyBjdXJyZW50IHNlY3Rpb25cbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHNjcm9sbEhlaWdodCBDdXJyZW50IHdpbmRvdyBoZWlnaHQgaW4gcGl4ZWxzXG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgY3JlYXRlOiBmdW5jdGlvbihlbGVtZW50LCBzY3JvbGxIZWlnaHQsIGlzY3JvbGxPcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzY3JvbGxhYmxlID0gZWxlbWVudC5maW5kKFNDUk9MTEFCTEVfU0VMKTtcblxuICAgICAgICAgICAgICAgICAgICBzY3JvbGxhYmxlLmhlaWdodChzY3JvbGxIZWlnaHQpO1xuICAgICAgICAgICAgICAgICAgICBzY3JvbGxhYmxlLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgJHRoaXMgPSAkKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlTY3JvbGxJbnN0YW5jZSA9ICR0aGlzLmRhdGEoJ2lzY3JvbGxJbnN0YW5jZScpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlTY3JvbGxJbnN0YW5jZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChpc2Nyb2xsSGFuZGxlci5pU2Nyb2xsSW5zdGFuY2VzLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgaVNjcm9sbEluc3RhbmNlID0gbmV3IElTY3JvbGwoJHRoaXMuZ2V0KDApLCBpc2Nyb2xsT3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpc2Nyb2xsSGFuZGxlci5pU2Nyb2xsSW5zdGFuY2VzLnB1c2goaVNjcm9sbEluc3RhbmNlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy9vZmYgYnkgZGVmYXVsdCB1bnRpbCB0aGUgc2VjdGlvbiBnZXRzIGFjdGl2ZVxuICAgICAgICAgICAgICAgICAgICAgICAgaVNjcm9sbEluc3RhbmNlLndoZWVsT2ZmKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLmRhdGEoJ2lzY3JvbGxJbnN0YW5jZScsIGlTY3JvbGxJbnN0YW5jZSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBSZXR1cm4gYSBib29sZWFuIGRlcGVuZGluZyBvbiB3aGV0aGVyIHRoZSBzY3JvbGxhYmxlIGVsZW1lbnQgaXMgYVxuICAgICAgICAgICAgICAgICAqIHRoZSBlbmQgb3IgYXQgdGhlIHN0YXJ0IG9mIHRoZSBzY3JvbGxpbmcgZGVwZW5kaW5nIG9uIHRoZSBnaXZlbiB0eXBlLlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogQHBhcmFtICB7U3RyaW5nfSAgdHlwZSAgICAgICBFaXRoZXIgJ3RvcCcgb3IgJ2JvdHRvbSdcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gIHtPYmplY3R9ICBzY3JvbGxhYmxlIGpRdWVyeSBvYmplY3QgZm9yIHRoZSBzY3JvbGxhYmxlIGVsZW1lbnRcbiAgICAgICAgICAgICAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIGlzU2Nyb2xsZWQ6IGZ1bmN0aW9uKHR5cGUsIHNjcm9sbGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNjcm9sbGVyID0gc2Nyb2xsYWJsZS5kYXRhKCdpc2Nyb2xsSW5zdGFuY2UnKTtcblxuICAgICAgICAgICAgICAgICAgICAvL25vIHNjcm9sbGVyP1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXNjcm9sbGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAndG9wJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNjcm9sbGVyLnkgPj0gMCAmJiAhc2Nyb2xsYWJsZS5zY3JvbGxUb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnYm90dG9tJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgwIC0gc2Nyb2xsZXIueSkgKyBzY3JvbGxhYmxlLnNjcm9sbFRvcCgpICsgMSArIHNjcm9sbGFibGUuaW5uZXJIZWlnaHQoKSA+PSBzY3JvbGxhYmxlWzBdLnNjcm9sbEhlaWdodDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBSZXR1cm5zIHRoZSBzY3JvbGxhYmxlIGVsZW1lbnQgZm9yIHRoZSBnaXZlbiBzZWN0aW9uLlxuICAgICAgICAgICAgICAgICAqIElmIHRoZXJlIGFyZSBsYW5kc2NhcGUgc2xpZGVzLCB3aWxsIG9ubHkgcmV0dXJuIGEgc2Nyb2xsYWJsZSBlbGVtZW50XG4gICAgICAgICAgICAgICAgICogaWYgaXQgaXMgaW4gdGhlIGFjdGl2ZSBzbGlkZS5cbiAgICAgICAgICAgICAgICAgKlxuICAgICAgICAgICAgICAgICAqIEBwYXJhbSAge09iamVjdH0gIGFjdGl2ZVNlY3Rpb24galF1ZXJ5IG9iamVjdCBjb250YWluaW5nIGN1cnJlbnQgc2VjdGlvblxuICAgICAgICAgICAgICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgc2Nyb2xsYWJsZTogZnVuY3Rpb24oYWN0aXZlU2VjdGlvbil7XG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlIGFyZSBsYW5kc2NhcGUgc2xpZGVzLCB3ZSBjaGVjayBpZiB0aGUgc2Nyb2xsaW5nIGJhciBpcyBpbiB0aGUgY3VycmVudCBvbmUgb3Igbm90XG4gICAgICAgICAgICAgICAgICAgIGlmIChhY3RpdmVTZWN0aW9uLmZpbmQoU0xJREVTX1dSQVBQRVJfU0VMKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhY3RpdmVTZWN0aW9uLmZpbmQoU0xJREVfQUNUSVZFX1NFTCkuZmluZChTQ1JPTExBQkxFX1NFTCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFjdGl2ZVNlY3Rpb24uZmluZChTQ1JPTExBQkxFX1NFTCk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIFJldHVybnMgdGhlIHNjcm9sbCBoZWlnaHQgb2YgdGhlIHdyYXBwZWQgY29udGVudC5cbiAgICAgICAgICAgICAgICAgKiBJZiB0aGlzIGlzIGxhcmdlciB0aGFuIHRoZSB3aW5kb3cgaGVpZ2h0IG1pbnVzIHNlY3Rpb24gcGFkZGluZyxcbiAgICAgICAgICAgICAgICAgKiBvdmVyZmxvdyBzY3JvbGxpbmcgaXMgbmVlZGVkLlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogQHBhcmFtICB7T2JqZWN0fSBlbGVtZW50IGpRdWVyeSBvYmplY3QgY29udGFpbmluZyBjdXJyZW50IHNlY3Rpb25cbiAgICAgICAgICAgICAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XG4gICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgc2Nyb2xsSGVpZ2h0OiBmdW5jdGlvbihlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmZpbmQoU0NST0xMQUJMRV9TRUwpLmNoaWxkcmVuKCkuZmlyc3QoKS5nZXQoMCkuc2Nyb2xsSGVpZ2h0O1xuICAgICAgICAgICAgICAgIH0sXG5cbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBDYWxsZWQgd2hlbiBvdmVyZmxvdyBzY3JvbGxpbmcgaXMgbm8gbG9uZ2VyIG5lZWRlZCBmb3IgYSBzZWN0aW9uLlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogQHBhcmFtICB7T2JqZWN0fSBlbGVtZW50ICAgICAgalF1ZXJ5IG9iamVjdCBjb250YWluaW5nIGN1cnJlbnQgc2VjdGlvblxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHJlbW92ZTogZnVuY3Rpb24oZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc2Nyb2xsYWJsZSA9IGVsZW1lbnQuZmluZChTQ1JPTExBQkxFX1NFTCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzY3JvbGxhYmxlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlTY3JvbGxJbnN0YW5jZSA9IHNjcm9sbGFibGUuZGF0YSgnaXNjcm9sbEluc3RhbmNlJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpU2Nyb2xsSW5zdGFuY2UuZGVzdHJveSgpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxhYmxlLmRhdGEoJ2lzY3JvbGxJbnN0YW5jZScsIG51bGwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuZmluZChTQ1JPTExBQkxFX1NFTCkuY2hpbGRyZW4oKS5maXJzdCgpLmNoaWxkcmVuKCkuZmlyc3QoKS51bndyYXAoKS51bndyYXAoKTtcbiAgICAgICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgICogQ2FsbGVkIHdoZW4gb3ZlcmZsb3cgc2Nyb2xsaW5nIGhhcyBhbHJlYWR5IGJlZW4gc2V0dXAgYnV0IHRoZVxuICAgICAgICAgICAgICAgICAqIHdpbmRvdyBoZWlnaHQgaGFzIHBvdGVudGlhbGx5IGNoYW5nZWQuXG4gICAgICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAgICAgKiBAcGFyYW0gIHtPYmplY3R9IGVsZW1lbnQgICAgICBqUXVlcnkgb2JqZWN0IGNvbnRhaW5pbmcgY3VycmVudCBzZWN0aW9uXG4gICAgICAgICAgICAgICAgICogQHBhcmFtICB7TnVtYmVyfSBzY3JvbGxIZWlnaHQgQ3VycmVudCB3aW5kb3cgaGVpZ2h0IGluIHBpeGVsc1xuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHVwZGF0ZTogZnVuY3Rpb24oZWxlbWVudCwgc2Nyb2xsSGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vdXNpbmcgYSB0aW1lb3V0IGluIG9yZGVyIHRvIGV4ZWN1dGUgdGhlIHJlZnJlc2ggZnVuY3Rpb24gb25seSBvbmNlIHdoZW4gYHVwZGF0ZWAgaXMgY2FsbGVkIG11bHRpcGxlIHRpbWVzIGluIGFcbiAgICAgICAgICAgICAgICAgICAgLy9zaG9ydCBwZXJpb2Qgb2YgdGltZS5cbiAgICAgICAgICAgICAgICAgICAgLy9pdCBhbHNvIGNvbWVzIG9uIGhhbmR5IGJlY2F1c2UgaVNjcm9sbCByZXF1aXJlcyB0aGUgdXNlIG9mIHRpbWVvdXQgd2hlbiB1c2luZyBgcmVmcmVzaGAuXG4gICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChpc2Nyb2xsSGFuZGxlci5yZWZyZXNoSWQpO1xuICAgICAgICAgICAgICAgICAgICBpc2Nyb2xsSGFuZGxlci5yZWZyZXNoSWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goaXNjcm9sbEhhbmRsZXIuaVNjcm9sbEluc3RhbmNlcywgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmdldCgwKS5yZWZyZXNoKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSwgMTUwKTtcblxuICAgICAgICAgICAgICAgICAgICAvL3VwZGF0aW5nIHRoZSB3cmFwcGVycyBoZWlnaHRcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudC5maW5kKFNDUk9MTEFCTEVfU0VMKS5jc3MoJ2hlaWdodCcsIHNjcm9sbEhlaWdodCArICdweCcpLnBhcmVudCgpLmNzcygnaGVpZ2h0Jywgc2Nyb2xsSGVpZ2h0ICsgJ3B4Jyk7XG4gICAgICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgICAqIENhbGxlZCB0byBnZXQgYW55IGFkZGl0aW9uYWwgZWxlbWVudHMgbmVlZGVkIHRvIHdyYXAgdGhlIHNlY3Rpb25cbiAgICAgICAgICAgICAgICAgKiBjb250ZW50IGluIG9yZGVyIHRvIGZhY2lsaXRhdGUgb3ZlcmZsb3cgc2Nyb2xsaW5nLlxuICAgICAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgICAgICogQHJldHVybiB7U3RyaW5nfE9iamVjdH0gQ2FuIGJlIGEgc3RyaW5nIGNvbnRhaW5pbmcgSFRNTCxcbiAgICAgICAgICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICBhIERPTSBlbGVtZW50LCBvciBqUXVlcnkgb2JqZWN0LlxuICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgIHdyYXBDb250ZW50OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICc8ZGl2IGNsYXNzPVwiJyArIFNDUk9MTEFCTEUgKyAnXCI+PGRpdiBjbGFzcz1cImZwLXNjcm9sbGVyXCI+PC9kaXY+PC9kaXY+JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlzY3JvbGxIYW5kbGVyOiBpc2Nyb2xsSGFuZGxlclxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSkoKTtcbiAgICB9KSh3aW5kb3csIGRvY3VtZW50LCBqUXVlcnkpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3ZlbmRvci9zY3JvbGxvdmVyZmxvdy5qcyIsIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9zcmMvc2Fzcy9hcHAuc2Fzc1xuLy8gbW9kdWxlIGlkID0gOVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vc3JjL3Nhc3MvdmlwLnNhc3Ncbi8vIG1vZHVsZSBpZCA9IDEwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=